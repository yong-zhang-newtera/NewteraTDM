//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.1433 版自动生成。
// 
#pragma warning disable 1591

namespace Newtera.DataGridActiveX.ActiveXControlWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ActiveXControlServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class ActiveXControlService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDataGridViewForClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataGridViewForTaxonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataGridViewForRelatedClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataGridViewForArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXQueryForDataGridViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArrayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDBAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveWorkingChartInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNamedChartInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNamedChartTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsChartNameUniqueOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTemplateNameUniqueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartDefXmlByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplateDefXmlByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteChartTemplateByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExportTypesInXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartFormatsInXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlgorithmTypesInXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportDataToFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportArrayDataToFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunAlgorithmOnClassDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunAlgorithmOnArrayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassDataForPivotGridOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArrayDataForPivotGridOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ActiveXControlService() {
            this.Url = "http://localhost/Newtera/WebService/ActiveXControlWebService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDataGridViewForClassCompletedEventHandler GetDataGridViewForClassCompleted;
        
        /// <remarks/>
        public event GetDataGridViewForTaxonCompletedEventHandler GetDataGridViewForTaxonCompleted;
        
        /// <remarks/>
        public event GetDataGridViewForRelatedClassCompletedEventHandler GetDataGridViewForRelatedClassCompleted;
        
        /// <remarks/>
        public event GetDataGridViewForArrayCompletedEventHandler GetDataGridViewForArrayCompleted;
        
        /// <remarks/>
        public event GetXQueryForDataGridViewCompletedEventHandler GetXQueryForDataGridViewCompleted;
        
        /// <remarks/>
        public event BeginQueryCompletedEventHandler BeginQueryCompleted;
        
        /// <remarks/>
        public event GetNextResultCompletedEventHandler GetNextResultCompleted;
        
        /// <remarks/>
        public event EndQueryCompletedEventHandler EndQueryCompleted;
        
        /// <remarks/>
        public event GetArrayDataCompletedEventHandler GetArrayDataCompleted;
        
        /// <remarks/>
        public event IsDBACompletedEventHandler IsDBACompleted;
        
        /// <remarks/>
        public event SaveWorkingChartInfoCompletedEventHandler SaveWorkingChartInfoCompleted;
        
        /// <remarks/>
        public event SaveNamedChartInfoCompletedEventHandler SaveNamedChartInfoCompleted;
        
        /// <remarks/>
        public event SaveNamedChartTemplateCompletedEventHandler SaveNamedChartTemplateCompleted;
        
        /// <remarks/>
        public event IsChartNameUniqueCompletedEventHandler IsChartNameUniqueCompleted;
        
        /// <remarks/>
        public event IsTemplateNameUniqueCompletedEventHandler IsTemplateNameUniqueCompleted;
        
        /// <remarks/>
        public event GetChartInfosCompletedEventHandler GetChartInfosCompleted;
        
        /// <remarks/>
        public event GetChartTemplatesCompletedEventHandler GetChartTemplatesCompleted;
        
        /// <remarks/>
        public event GetChartDefXmlByIdCompletedEventHandler GetChartDefXmlByIdCompleted;
        
        /// <remarks/>
        public event GetTemplateDefXmlByIdCompletedEventHandler GetTemplateDefXmlByIdCompleted;
        
        /// <remarks/>
        public event DeleteChartTemplateByIdCompletedEventHandler DeleteChartTemplateByIdCompleted;
        
        /// <remarks/>
        public event GetExportTypesInXmlCompletedEventHandler GetExportTypesInXmlCompleted;
        
        /// <remarks/>
        public event GetChartFormatsInXmlCompletedEventHandler GetChartFormatsInXmlCompleted;
        
        /// <remarks/>
        public event GetAlgorithmTypesInXmlCompletedEventHandler GetAlgorithmTypesInXmlCompleted;
        
        /// <remarks/>
        public event ExportDataToFileCompletedEventHandler ExportDataToFileCompleted;
        
        /// <remarks/>
        public event ExportArrayDataToFileCompletedEventHandler ExportArrayDataToFileCompleted;
        
        /// <remarks/>
        public event RunAlgorithmOnClassDataCompletedEventHandler RunAlgorithmOnClassDataCompleted;
        
        /// <remarks/>
        public event RunAlgorithmOnArrayDataCompletedEventHandler RunAlgorithmOnArrayDataCompleted;
        
        /// <remarks/>
        public event GetClassDataForPivotGridCompletedEventHandler GetClassDataForPivotGridCompleted;
        
        /// <remarks/>
        public event GetArrayDataForPivotGridCompletedEventHandler GetArrayDataForPivotGridCompleted;
        
        /// <remarks/>
        public event GetImageNamesCompletedEventHandler GetImageNamesCompleted;
        
        /// <remarks/>
        public event GetImageBytesCompletedEventHandler GetImageBytesCompleted;
        
        /// <remarks/>
        public event UpdateDataCompletedEventHandler UpdateDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDataGridViewForClass", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataGridViewForClass(string connectionStr, string className) {
            object[] results = this.Invoke("GetDataGridViewForClass", new object[] {
                        connectionStr,
                        className});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataGridViewForClass(string connectionStr, string className, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataGridViewForClass", new object[] {
                        connectionStr,
                        className}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDataGridViewForClass(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataGridViewForClassAsync(string connectionStr, string className) {
            this.GetDataGridViewForClassAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void GetDataGridViewForClassAsync(string connectionStr, string className, object userState) {
            if ((this.GetDataGridViewForClassOperationCompleted == null)) {
                this.GetDataGridViewForClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataGridViewForClassOperationCompleted);
            }
            this.InvokeAsync("GetDataGridViewForClass", new object[] {
                        connectionStr,
                        className}, this.GetDataGridViewForClassOperationCompleted, userState);
        }
        
        private void OnGetDataGridViewForClassOperationCompleted(object arg) {
            if ((this.GetDataGridViewForClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataGridViewForClassCompleted(this, new GetDataGridViewForClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDataGridViewForTaxon", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataGridViewForTaxon(string connectionStr, string taxonomyName, string taxonName) {
            object[] results = this.Invoke("GetDataGridViewForTaxon", new object[] {
                        connectionStr,
                        taxonomyName,
                        taxonName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataGridViewForTaxon(string connectionStr, string taxonomyName, string taxonName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataGridViewForTaxon", new object[] {
                        connectionStr,
                        taxonomyName,
                        taxonName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDataGridViewForTaxon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataGridViewForTaxonAsync(string connectionStr, string taxonomyName, string taxonName) {
            this.GetDataGridViewForTaxonAsync(connectionStr, taxonomyName, taxonName, null);
        }
        
        /// <remarks/>
        public void GetDataGridViewForTaxonAsync(string connectionStr, string taxonomyName, string taxonName, object userState) {
            if ((this.GetDataGridViewForTaxonOperationCompleted == null)) {
                this.GetDataGridViewForTaxonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataGridViewForTaxonOperationCompleted);
            }
            this.InvokeAsync("GetDataGridViewForTaxon", new object[] {
                        connectionStr,
                        taxonomyName,
                        taxonName}, this.GetDataGridViewForTaxonOperationCompleted, userState);
        }
        
        private void OnGetDataGridViewForTaxonOperationCompleted(object arg) {
            if ((this.GetDataGridViewForTaxonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataGridViewForTaxonCompleted(this, new GetDataGridViewForTaxonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDataGridViewForRelatedClass", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataGridViewForRelatedClass(string connectionStr, string className, string relatedClassAlias, string relatedClassName, string objId) {
            object[] results = this.Invoke("GetDataGridViewForRelatedClass", new object[] {
                        connectionStr,
                        className,
                        relatedClassAlias,
                        relatedClassName,
                        objId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataGridViewForRelatedClass(string connectionStr, string className, string relatedClassAlias, string relatedClassName, string objId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataGridViewForRelatedClass", new object[] {
                        connectionStr,
                        className,
                        relatedClassAlias,
                        relatedClassName,
                        objId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDataGridViewForRelatedClass(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataGridViewForRelatedClassAsync(string connectionStr, string className, string relatedClassAlias, string relatedClassName, string objId) {
            this.GetDataGridViewForRelatedClassAsync(connectionStr, className, relatedClassAlias, relatedClassName, objId, null);
        }
        
        /// <remarks/>
        public void GetDataGridViewForRelatedClassAsync(string connectionStr, string className, string relatedClassAlias, string relatedClassName, string objId, object userState) {
            if ((this.GetDataGridViewForRelatedClassOperationCompleted == null)) {
                this.GetDataGridViewForRelatedClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataGridViewForRelatedClassOperationCompleted);
            }
            this.InvokeAsync("GetDataGridViewForRelatedClass", new object[] {
                        connectionStr,
                        className,
                        relatedClassAlias,
                        relatedClassName,
                        objId}, this.GetDataGridViewForRelatedClassOperationCompleted, userState);
        }
        
        private void OnGetDataGridViewForRelatedClassOperationCompleted(object arg) {
            if ((this.GetDataGridViewForRelatedClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataGridViewForRelatedClassCompleted(this, new GetDataGridViewForRelatedClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDataGridViewForArray", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataGridViewForArray(string connectionStr, string className, string arrayName) {
            object[] results = this.Invoke("GetDataGridViewForArray", new object[] {
                        connectionStr,
                        className,
                        arrayName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataGridViewForArray(string connectionStr, string className, string arrayName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataGridViewForArray", new object[] {
                        connectionStr,
                        className,
                        arrayName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDataGridViewForArray(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataGridViewForArrayAsync(string connectionStr, string className, string arrayName) {
            this.GetDataGridViewForArrayAsync(connectionStr, className, arrayName, null);
        }
        
        /// <remarks/>
        public void GetDataGridViewForArrayAsync(string connectionStr, string className, string arrayName, object userState) {
            if ((this.GetDataGridViewForArrayOperationCompleted == null)) {
                this.GetDataGridViewForArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataGridViewForArrayOperationCompleted);
            }
            this.InvokeAsync("GetDataGridViewForArray", new object[] {
                        connectionStr,
                        className,
                        arrayName}, this.GetDataGridViewForArrayOperationCompleted, userState);
        }
        
        private void OnGetDataGridViewForArrayOperationCompleted(object arg) {
            if ((this.GetDataGridViewForArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataGridViewForArrayCompleted(this, new GetDataGridViewForArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetXQueryForDataGridView", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXQueryForDataGridView(string connectionStr, string xml) {
            object[] results = this.Invoke("GetXQueryForDataGridView", new object[] {
                        connectionStr,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetXQueryForDataGridView(string connectionStr, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetXQueryForDataGridView", new object[] {
                        connectionStr,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetXQueryForDataGridView(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXQueryForDataGridViewAsync(string connectionStr, string xml) {
            this.GetXQueryForDataGridViewAsync(connectionStr, xml, null);
        }
        
        /// <remarks/>
        public void GetXQueryForDataGridViewAsync(string connectionStr, string xml, object userState) {
            if ((this.GetXQueryForDataGridViewOperationCompleted == null)) {
                this.GetXQueryForDataGridViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXQueryForDataGridViewOperationCompleted);
            }
            this.InvokeAsync("GetXQueryForDataGridView", new object[] {
                        connectionStr,
                        xml}, this.GetXQueryForDataGridViewOperationCompleted, userState);
        }
        
        private void OnGetXQueryForDataGridViewOperationCompleted(object arg) {
            if ((this.GetXQueryForDataGridViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXQueryForDataGridViewCompleted(this, new GetXQueryForDataGridViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/BeginQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginQuery(string connectionStr, string query, int pageSize) {
            object[] results = this.Invoke("BeginQuery", new object[] {
                        connectionStr,
                        query,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBeginQuery(string connectionStr, string query, int pageSize, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BeginQuery", new object[] {
                        connectionStr,
                        query,
                        pageSize}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBeginQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginQueryAsync(string connectionStr, string query, int pageSize) {
            this.BeginQueryAsync(connectionStr, query, pageSize, null);
        }
        
        /// <remarks/>
        public void BeginQueryAsync(string connectionStr, string query, int pageSize, object userState) {
            if ((this.BeginQueryOperationCompleted == null)) {
                this.BeginQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginQueryOperationCompleted);
            }
            this.InvokeAsync("BeginQuery", new object[] {
                        connectionStr,
                        query,
                        pageSize}, this.BeginQueryOperationCompleted, userState);
        }
        
        private void OnBeginQueryOperationCompleted(object arg) {
            if ((this.BeginQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginQueryCompleted(this, new BeginQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetNextResult", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetNextResult(string connectionStr, string queryId) {
            object[] results = this.Invoke("GetNextResult", new object[] {
                        connectionStr,
                        queryId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNextResult(string connectionStr, string queryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNextResult", new object[] {
                        connectionStr,
                        queryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetNextResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextResultAsync(string connectionStr, string queryId) {
            this.GetNextResultAsync(connectionStr, queryId, null);
        }
        
        /// <remarks/>
        public void GetNextResultAsync(string connectionStr, string queryId, object userState) {
            if ((this.GetNextResultOperationCompleted == null)) {
                this.GetNextResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextResultOperationCompleted);
            }
            this.InvokeAsync("GetNextResult", new object[] {
                        connectionStr,
                        queryId}, this.GetNextResultOperationCompleted, userState);
        }
        
        private void OnGetNextResultOperationCompleted(object arg) {
            if ((this.GetNextResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextResultCompleted(this, new GetNextResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/EndQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndQuery(string queryId) {
            this.Invoke("EndQuery", new object[] {
                        queryId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEndQuery(string queryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EndQuery", new object[] {
                        queryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEndQuery(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EndQueryAsync(string queryId) {
            this.EndQueryAsync(queryId, null);
        }
        
        /// <remarks/>
        public void EndQueryAsync(string queryId, object userState) {
            if ((this.EndQueryOperationCompleted == null)) {
                this.EndQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndQueryOperationCompleted);
            }
            this.InvokeAsync("EndQuery", new object[] {
                        queryId}, this.EndQueryOperationCompleted, userState);
        }
        
        private void OnEndQueryOperationCompleted(object arg) {
            if ((this.EndQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetArrayData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetArrayData(string connectionStr, string className, string arrayName, string instanceId) {
            object[] results = this.Invoke("GetArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetArrayData(string connectionStr, string className, string arrayName, string instanceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetArrayData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetArrayDataAsync(string connectionStr, string className, string arrayName, string instanceId) {
            this.GetArrayDataAsync(connectionStr, className, arrayName, instanceId, null);
        }
        
        /// <remarks/>
        public void GetArrayDataAsync(string connectionStr, string className, string arrayName, string instanceId, object userState) {
            if ((this.GetArrayDataOperationCompleted == null)) {
                this.GetArrayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArrayDataOperationCompleted);
            }
            this.InvokeAsync("GetArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId}, this.GetArrayDataOperationCompleted, userState);
        }
        
        private void OnGetArrayDataOperationCompleted(object arg) {
            if ((this.GetArrayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArrayDataCompleted(this, new GetArrayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsDBA", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsDBA(string connectionStr) {
            object[] results = this.Invoke("IsDBA", new object[] {
                        connectionStr});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsDBA(string connectionStr, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsDBA", new object[] {
                        connectionStr}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsDBA(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsDBAAsync(string connectionStr) {
            this.IsDBAAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void IsDBAAsync(string connectionStr, object userState) {
            if ((this.IsDBAOperationCompleted == null)) {
                this.IsDBAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDBAOperationCompleted);
            }
            this.InvokeAsync("IsDBA", new object[] {
                        connectionStr}, this.IsDBAOperationCompleted, userState);
        }
        
        private void OnIsDBAOperationCompleted(object arg) {
            if ((this.IsDBACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDBACompleted(this, new IsDBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SaveWorkingChartInfo", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveWorkingChartInfo(string connectionStr, string chartType, string xml, int blockNum) {
            this.Invoke("SaveWorkingChartInfo", new object[] {
                        connectionStr,
                        chartType,
                        xml,
                        blockNum});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveWorkingChartInfo(string connectionStr, string chartType, string xml, int blockNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveWorkingChartInfo", new object[] {
                        connectionStr,
                        chartType,
                        xml,
                        blockNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveWorkingChartInfo(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveWorkingChartInfoAsync(string connectionStr, string chartType, string xml, int blockNum) {
            this.SaveWorkingChartInfoAsync(connectionStr, chartType, xml, blockNum, null);
        }
        
        /// <remarks/>
        public void SaveWorkingChartInfoAsync(string connectionStr, string chartType, string xml, int blockNum, object userState) {
            if ((this.SaveWorkingChartInfoOperationCompleted == null)) {
                this.SaveWorkingChartInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWorkingChartInfoOperationCompleted);
            }
            this.InvokeAsync("SaveWorkingChartInfo", new object[] {
                        connectionStr,
                        chartType,
                        xml,
                        blockNum}, this.SaveWorkingChartInfoOperationCompleted, userState);
        }
        
        private void OnSaveWorkingChartInfoOperationCompleted(object arg) {
            if ((this.SaveWorkingChartInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWorkingChartInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SaveNamedChartInfo", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveNamedChartInfo(string connectionStr, string name, string desc, string chartType, string xml, int blockNum) {
            this.Invoke("SaveNamedChartInfo", new object[] {
                        connectionStr,
                        name,
                        desc,
                        chartType,
                        xml,
                        blockNum});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveNamedChartInfo(string connectionStr, string name, string desc, string chartType, string xml, int blockNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveNamedChartInfo", new object[] {
                        connectionStr,
                        name,
                        desc,
                        chartType,
                        xml,
                        blockNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveNamedChartInfo(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveNamedChartInfoAsync(string connectionStr, string name, string desc, string chartType, string xml, int blockNum) {
            this.SaveNamedChartInfoAsync(connectionStr, name, desc, chartType, xml, blockNum, null);
        }
        
        /// <remarks/>
        public void SaveNamedChartInfoAsync(string connectionStr, string name, string desc, string chartType, string xml, int blockNum, object userState) {
            if ((this.SaveNamedChartInfoOperationCompleted == null)) {
                this.SaveNamedChartInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNamedChartInfoOperationCompleted);
            }
            this.InvokeAsync("SaveNamedChartInfo", new object[] {
                        connectionStr,
                        name,
                        desc,
                        chartType,
                        xml,
                        blockNum}, this.SaveNamedChartInfoOperationCompleted, userState);
        }
        
        private void OnSaveNamedChartInfoOperationCompleted(object arg) {
            if ((this.SaveNamedChartInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNamedChartInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SaveNamedChartTemplate", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveNamedChartTemplate(string connectionStr, string className, string name, string desc, string chartType, string xml) {
            this.Invoke("SaveNamedChartTemplate", new object[] {
                        connectionStr,
                        className,
                        name,
                        desc,
                        chartType,
                        xml});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveNamedChartTemplate(string connectionStr, string className, string name, string desc, string chartType, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveNamedChartTemplate", new object[] {
                        connectionStr,
                        className,
                        name,
                        desc,
                        chartType,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveNamedChartTemplate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveNamedChartTemplateAsync(string connectionStr, string className, string name, string desc, string chartType, string xml) {
            this.SaveNamedChartTemplateAsync(connectionStr, className, name, desc, chartType, xml, null);
        }
        
        /// <remarks/>
        public void SaveNamedChartTemplateAsync(string connectionStr, string className, string name, string desc, string chartType, string xml, object userState) {
            if ((this.SaveNamedChartTemplateOperationCompleted == null)) {
                this.SaveNamedChartTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNamedChartTemplateOperationCompleted);
            }
            this.InvokeAsync("SaveNamedChartTemplate", new object[] {
                        connectionStr,
                        className,
                        name,
                        desc,
                        chartType,
                        xml}, this.SaveNamedChartTemplateOperationCompleted, userState);
        }
        
        private void OnSaveNamedChartTemplateOperationCompleted(object arg) {
            if ((this.SaveNamedChartTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNamedChartTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsChartNameUnique", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsChartNameUnique(string connectionStr, string name) {
            object[] results = this.Invoke("IsChartNameUnique", new object[] {
                        connectionStr,
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsChartNameUnique(string connectionStr, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsChartNameUnique", new object[] {
                        connectionStr,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsChartNameUnique(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsChartNameUniqueAsync(string connectionStr, string name) {
            this.IsChartNameUniqueAsync(connectionStr, name, null);
        }
        
        /// <remarks/>
        public void IsChartNameUniqueAsync(string connectionStr, string name, object userState) {
            if ((this.IsChartNameUniqueOperationCompleted == null)) {
                this.IsChartNameUniqueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsChartNameUniqueOperationCompleted);
            }
            this.InvokeAsync("IsChartNameUnique", new object[] {
                        connectionStr,
                        name}, this.IsChartNameUniqueOperationCompleted, userState);
        }
        
        private void OnIsChartNameUniqueOperationCompleted(object arg) {
            if ((this.IsChartNameUniqueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsChartNameUniqueCompleted(this, new IsChartNameUniqueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsTemplateNameUnique", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsTemplateNameUnique(string connectionStr, string className, string name) {
            object[] results = this.Invoke("IsTemplateNameUnique", new object[] {
                        connectionStr,
                        className,
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsTemplateNameUnique(string connectionStr, string className, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsTemplateNameUnique", new object[] {
                        connectionStr,
                        className,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsTemplateNameUnique(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsTemplateNameUniqueAsync(string connectionStr, string className, string name) {
            this.IsTemplateNameUniqueAsync(connectionStr, className, name, null);
        }
        
        /// <remarks/>
        public void IsTemplateNameUniqueAsync(string connectionStr, string className, string name, object userState) {
            if ((this.IsTemplateNameUniqueOperationCompleted == null)) {
                this.IsTemplateNameUniqueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTemplateNameUniqueOperationCompleted);
            }
            this.InvokeAsync("IsTemplateNameUnique", new object[] {
                        connectionStr,
                        className,
                        name}, this.IsTemplateNameUniqueOperationCompleted, userState);
        }
        
        private void OnIsTemplateNameUniqueOperationCompleted(object arg) {
            if ((this.IsTemplateNameUniqueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTemplateNameUniqueCompleted(this, new IsTemplateNameUniqueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetChartInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChartInfos(string connectionStr) {
            object[] results = this.Invoke("GetChartInfos", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChartInfos(string connectionStr, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChartInfos", new object[] {
                        connectionStr}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetChartInfos(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartInfosAsync(string connectionStr) {
            this.GetChartInfosAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetChartInfosAsync(string connectionStr, object userState) {
            if ((this.GetChartInfosOperationCompleted == null)) {
                this.GetChartInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartInfosOperationCompleted);
            }
            this.InvokeAsync("GetChartInfos", new object[] {
                        connectionStr}, this.GetChartInfosOperationCompleted, userState);
        }
        
        private void OnGetChartInfosOperationCompleted(object arg) {
            if ((this.GetChartInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartInfosCompleted(this, new GetChartInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetChartTemplates", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChartTemplates(string connectionStr, string className) {
            object[] results = this.Invoke("GetChartTemplates", new object[] {
                        connectionStr,
                        className});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChartTemplates(string connectionStr, string className, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChartTemplates", new object[] {
                        connectionStr,
                        className}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetChartTemplates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartTemplatesAsync(string connectionStr, string className) {
            this.GetChartTemplatesAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void GetChartTemplatesAsync(string connectionStr, string className, object userState) {
            if ((this.GetChartTemplatesOperationCompleted == null)) {
                this.GetChartTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetChartTemplates", new object[] {
                        connectionStr,
                        className}, this.GetChartTemplatesOperationCompleted, userState);
        }
        
        private void OnGetChartTemplatesOperationCompleted(object arg) {
            if ((this.GetChartTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartTemplatesCompleted(this, new GetChartTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetChartDefXmlById", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChartDefXmlById(string chartId, int blockNum) {
            object[] results = this.Invoke("GetChartDefXmlById", new object[] {
                        chartId,
                        blockNum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChartDefXmlById(string chartId, int blockNum, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChartDefXmlById", new object[] {
                        chartId,
                        blockNum}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetChartDefXmlById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartDefXmlByIdAsync(string chartId, int blockNum) {
            this.GetChartDefXmlByIdAsync(chartId, blockNum, null);
        }
        
        /// <remarks/>
        public void GetChartDefXmlByIdAsync(string chartId, int blockNum, object userState) {
            if ((this.GetChartDefXmlByIdOperationCompleted == null)) {
                this.GetChartDefXmlByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartDefXmlByIdOperationCompleted);
            }
            this.InvokeAsync("GetChartDefXmlById", new object[] {
                        chartId,
                        blockNum}, this.GetChartDefXmlByIdOperationCompleted, userState);
        }
        
        private void OnGetChartDefXmlByIdOperationCompleted(object arg) {
            if ((this.GetChartDefXmlByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartDefXmlByIdCompleted(this, new GetChartDefXmlByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetTemplateDefXmlById", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemplateDefXmlById(string templateId) {
            object[] results = this.Invoke("GetTemplateDefXmlById", new object[] {
                        templateId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTemplateDefXmlById(string templateId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTemplateDefXmlById", new object[] {
                        templateId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTemplateDefXmlById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplateDefXmlByIdAsync(string templateId) {
            this.GetTemplateDefXmlByIdAsync(templateId, null);
        }
        
        /// <remarks/>
        public void GetTemplateDefXmlByIdAsync(string templateId, object userState) {
            if ((this.GetTemplateDefXmlByIdOperationCompleted == null)) {
                this.GetTemplateDefXmlByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplateDefXmlByIdOperationCompleted);
            }
            this.InvokeAsync("GetTemplateDefXmlById", new object[] {
                        templateId}, this.GetTemplateDefXmlByIdOperationCompleted, userState);
        }
        
        private void OnGetTemplateDefXmlByIdOperationCompleted(object arg) {
            if ((this.GetTemplateDefXmlByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplateDefXmlByIdCompleted(this, new GetTemplateDefXmlByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteChartTemplateById", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteChartTemplateById(string templateId) {
            this.Invoke("DeleteChartTemplateById", new object[] {
                        templateId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteChartTemplateById(string templateId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteChartTemplateById", new object[] {
                        templateId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteChartTemplateById(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteChartTemplateByIdAsync(string templateId) {
            this.DeleteChartTemplateByIdAsync(templateId, null);
        }
        
        /// <remarks/>
        public void DeleteChartTemplateByIdAsync(string templateId, object userState) {
            if ((this.DeleteChartTemplateByIdOperationCompleted == null)) {
                this.DeleteChartTemplateByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteChartTemplateByIdOperationCompleted);
            }
            this.InvokeAsync("DeleteChartTemplateById", new object[] {
                        templateId}, this.DeleteChartTemplateByIdOperationCompleted, userState);
        }
        
        private void OnDeleteChartTemplateByIdOperationCompleted(object arg) {
            if ((this.DeleteChartTemplateByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteChartTemplateByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetExportTypesInXml", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExportTypesInXml() {
            object[] results = this.Invoke("GetExportTypesInXml", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExportTypesInXml(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExportTypesInXml", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetExportTypesInXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExportTypesInXmlAsync() {
            this.GetExportTypesInXmlAsync(null);
        }
        
        /// <remarks/>
        public void GetExportTypesInXmlAsync(object userState) {
            if ((this.GetExportTypesInXmlOperationCompleted == null)) {
                this.GetExportTypesInXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExportTypesInXmlOperationCompleted);
            }
            this.InvokeAsync("GetExportTypesInXml", new object[0], this.GetExportTypesInXmlOperationCompleted, userState);
        }
        
        private void OnGetExportTypesInXmlOperationCompleted(object arg) {
            if ((this.GetExportTypesInXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExportTypesInXmlCompleted(this, new GetExportTypesInXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetChartFormatsInXml", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChartFormatsInXml() {
            object[] results = this.Invoke("GetChartFormatsInXml", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChartFormatsInXml(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChartFormatsInXml", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetChartFormatsInXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartFormatsInXmlAsync() {
            this.GetChartFormatsInXmlAsync(null);
        }
        
        /// <remarks/>
        public void GetChartFormatsInXmlAsync(object userState) {
            if ((this.GetChartFormatsInXmlOperationCompleted == null)) {
                this.GetChartFormatsInXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartFormatsInXmlOperationCompleted);
            }
            this.InvokeAsync("GetChartFormatsInXml", new object[0], this.GetChartFormatsInXmlOperationCompleted, userState);
        }
        
        private void OnGetChartFormatsInXmlOperationCompleted(object arg) {
            if ((this.GetChartFormatsInXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartFormatsInXmlCompleted(this, new GetChartFormatsInXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAlgorithmTypesInXml", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAlgorithmTypesInXml() {
            object[] results = this.Invoke("GetAlgorithmTypesInXml", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAlgorithmTypesInXml(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAlgorithmTypesInXml", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAlgorithmTypesInXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlgorithmTypesInXmlAsync() {
            this.GetAlgorithmTypesInXmlAsync(null);
        }
        
        /// <remarks/>
        public void GetAlgorithmTypesInXmlAsync(object userState) {
            if ((this.GetAlgorithmTypesInXmlOperationCompleted == null)) {
                this.GetAlgorithmTypesInXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlgorithmTypesInXmlOperationCompleted);
            }
            this.InvokeAsync("GetAlgorithmTypesInXml", new object[0], this.GetAlgorithmTypesInXmlOperationCompleted, userState);
        }
        
        private void OnGetAlgorithmTypesInXmlOperationCompleted(object arg) {
            if ((this.GetAlgorithmTypesInXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlgorithmTypesInXmlCompleted(this, new GetAlgorithmTypesInXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExportDataToFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExportDataToFile(string connectionStr, string dataGridViewXml, string fileName, string exportTypeName, string selectedLines) {
            this.Invoke("ExportDataToFile", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        fileName,
                        exportTypeName,
                        selectedLines});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExportDataToFile(string connectionStr, string dataGridViewXml, string fileName, string exportTypeName, string selectedLines, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExportDataToFile", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        fileName,
                        exportTypeName,
                        selectedLines}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExportDataToFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExportDataToFileAsync(string connectionStr, string dataGridViewXml, string fileName, string exportTypeName, string selectedLines) {
            this.ExportDataToFileAsync(connectionStr, dataGridViewXml, fileName, exportTypeName, selectedLines, null);
        }
        
        /// <remarks/>
        public void ExportDataToFileAsync(string connectionStr, string dataGridViewXml, string fileName, string exportTypeName, string selectedLines, object userState) {
            if ((this.ExportDataToFileOperationCompleted == null)) {
                this.ExportDataToFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportDataToFileOperationCompleted);
            }
            this.InvokeAsync("ExportDataToFile", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        fileName,
                        exportTypeName,
                        selectedLines}, this.ExportDataToFileOperationCompleted, userState);
        }
        
        private void OnExportDataToFileOperationCompleted(object arg) {
            if ((this.ExportDataToFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportDataToFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExportArrayDataToFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExportArrayDataToFile(string connectionStr, string className, string arrayName, string instanceId, string fileName, string exportTypeName, string selectedLines) {
            this.Invoke("ExportArrayDataToFile", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        fileName,
                        exportTypeName,
                        selectedLines});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExportArrayDataToFile(string connectionStr, string className, string arrayName, string instanceId, string fileName, string exportTypeName, string selectedLines, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExportArrayDataToFile", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        fileName,
                        exportTypeName,
                        selectedLines}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExportArrayDataToFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExportArrayDataToFileAsync(string connectionStr, string className, string arrayName, string instanceId, string fileName, string exportTypeName, string selectedLines) {
            this.ExportArrayDataToFileAsync(connectionStr, className, arrayName, instanceId, fileName, exportTypeName, selectedLines, null);
        }
        
        /// <remarks/>
        public void ExportArrayDataToFileAsync(string connectionStr, string className, string arrayName, string instanceId, string fileName, string exportTypeName, string selectedLines, object userState) {
            if ((this.ExportArrayDataToFileOperationCompleted == null)) {
                this.ExportArrayDataToFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportArrayDataToFileOperationCompleted);
            }
            this.InvokeAsync("ExportArrayDataToFile", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        fileName,
                        exportTypeName,
                        selectedLines}, this.ExportArrayDataToFileOperationCompleted, userState);
        }
        
        private void OnExportArrayDataToFileOperationCompleted(object arg) {
            if ((this.ExportArrayDataToFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportArrayDataToFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/RunAlgorithmOnClassData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunAlgorithmOnClassData(string connectionStr, string dataGridViewXml, string algorithmName, string selectedLines) {
            object[] results = this.Invoke("RunAlgorithmOnClassData", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        algorithmName,
                        selectedLines});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRunAlgorithmOnClassData(string connectionStr, string dataGridViewXml, string algorithmName, string selectedLines, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RunAlgorithmOnClassData", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        algorithmName,
                        selectedLines}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRunAlgorithmOnClassData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunAlgorithmOnClassDataAsync(string connectionStr, string dataGridViewXml, string algorithmName, string selectedLines) {
            this.RunAlgorithmOnClassDataAsync(connectionStr, dataGridViewXml, algorithmName, selectedLines, null);
        }
        
        /// <remarks/>
        public void RunAlgorithmOnClassDataAsync(string connectionStr, string dataGridViewXml, string algorithmName, string selectedLines, object userState) {
            if ((this.RunAlgorithmOnClassDataOperationCompleted == null)) {
                this.RunAlgorithmOnClassDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunAlgorithmOnClassDataOperationCompleted);
            }
            this.InvokeAsync("RunAlgorithmOnClassData", new object[] {
                        connectionStr,
                        dataGridViewXml,
                        algorithmName,
                        selectedLines}, this.RunAlgorithmOnClassDataOperationCompleted, userState);
        }
        
        private void OnRunAlgorithmOnClassDataOperationCompleted(object arg) {
            if ((this.RunAlgorithmOnClassDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunAlgorithmOnClassDataCompleted(this, new RunAlgorithmOnClassDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/RunAlgorithmOnArrayData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunAlgorithmOnArrayData(string connectionStr, string className, string arrayName, string instanceId, string algorithmName, string selectedCols, string selectedRows) {
            object[] results = this.Invoke("RunAlgorithmOnArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        algorithmName,
                        selectedCols,
                        selectedRows});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRunAlgorithmOnArrayData(string connectionStr, string className, string arrayName, string instanceId, string algorithmName, string selectedCols, string selectedRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RunAlgorithmOnArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        algorithmName,
                        selectedCols,
                        selectedRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRunAlgorithmOnArrayData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunAlgorithmOnArrayDataAsync(string connectionStr, string className, string arrayName, string instanceId, string algorithmName, string selectedCols, string selectedRows) {
            this.RunAlgorithmOnArrayDataAsync(connectionStr, className, arrayName, instanceId, algorithmName, selectedCols, selectedRows, null);
        }
        
        /// <remarks/>
        public void RunAlgorithmOnArrayDataAsync(string connectionStr, string className, string arrayName, string instanceId, string algorithmName, string selectedCols, string selectedRows, object userState) {
            if ((this.RunAlgorithmOnArrayDataOperationCompleted == null)) {
                this.RunAlgorithmOnArrayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunAlgorithmOnArrayDataOperationCompleted);
            }
            this.InvokeAsync("RunAlgorithmOnArrayData", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId,
                        algorithmName,
                        selectedCols,
                        selectedRows}, this.RunAlgorithmOnArrayDataOperationCompleted, userState);
        }
        
        private void OnRunAlgorithmOnArrayDataOperationCompleted(object arg) {
            if ((this.RunAlgorithmOnArrayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunAlgorithmOnArrayDataCompleted(this, new RunAlgorithmOnArrayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetClassDataForPivotGrid", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClassDataForPivotGrid(string connectionStr, string dataGridViewXml) {
            object[] results = this.Invoke("GetClassDataForPivotGrid", new object[] {
                        connectionStr,
                        dataGridViewXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClassDataForPivotGrid(string connectionStr, string dataGridViewXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClassDataForPivotGrid", new object[] {
                        connectionStr,
                        dataGridViewXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetClassDataForPivotGrid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClassDataForPivotGridAsync(string connectionStr, string dataGridViewXml) {
            this.GetClassDataForPivotGridAsync(connectionStr, dataGridViewXml, null);
        }
        
        /// <remarks/>
        public void GetClassDataForPivotGridAsync(string connectionStr, string dataGridViewXml, object userState) {
            if ((this.GetClassDataForPivotGridOperationCompleted == null)) {
                this.GetClassDataForPivotGridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassDataForPivotGridOperationCompleted);
            }
            this.InvokeAsync("GetClassDataForPivotGrid", new object[] {
                        connectionStr,
                        dataGridViewXml}, this.GetClassDataForPivotGridOperationCompleted, userState);
        }
        
        private void OnGetClassDataForPivotGridOperationCompleted(object arg) {
            if ((this.GetClassDataForPivotGridCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassDataForPivotGridCompleted(this, new GetClassDataForPivotGridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetArrayDataForPivotGrid", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetArrayDataForPivotGrid(string connectionStr, string className, string arrayName, string instanceId) {
            object[] results = this.Invoke("GetArrayDataForPivotGrid", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetArrayDataForPivotGrid(string connectionStr, string className, string arrayName, string instanceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetArrayDataForPivotGrid", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetArrayDataForPivotGrid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetArrayDataForPivotGridAsync(string connectionStr, string className, string arrayName, string instanceId) {
            this.GetArrayDataForPivotGridAsync(connectionStr, className, arrayName, instanceId, null);
        }
        
        /// <remarks/>
        public void GetArrayDataForPivotGridAsync(string connectionStr, string className, string arrayName, string instanceId, object userState) {
            if ((this.GetArrayDataForPivotGridOperationCompleted == null)) {
                this.GetArrayDataForPivotGridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArrayDataForPivotGridOperationCompleted);
            }
            this.InvokeAsync("GetArrayDataForPivotGrid", new object[] {
                        connectionStr,
                        className,
                        arrayName,
                        instanceId}, this.GetArrayDataForPivotGridOperationCompleted, userState);
        }
        
        private void OnGetArrayDataForPivotGridOperationCompleted(object arg) {
            if ((this.GetArrayDataForPivotGridCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArrayDataForPivotGridCompleted(this, new GetArrayDataForPivotGridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetImageNames", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetImageNames() {
            object[] results = this.Invoke("GetImageNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImageNames(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImageNames", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetImageNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageNamesAsync() {
            this.GetImageNamesAsync(null);
        }
        
        /// <remarks/>
        public void GetImageNamesAsync(object userState) {
            if ((this.GetImageNamesOperationCompleted == null)) {
                this.GetImageNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageNamesOperationCompleted);
            }
            this.InvokeAsync("GetImageNames", new object[0], this.GetImageNamesOperationCompleted, userState);
        }
        
        private void OnGetImageNamesOperationCompleted(object arg) {
            if ((this.GetImageNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageNamesCompleted(this, new GetImageNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetImageBytes", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetImageBytes(string imageName) {
            object[] results = this.Invoke("GetImageBytes", new object[] {
                        imageName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImageBytes(string imageName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImageBytes", new object[] {
                        imageName}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetImageBytes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageBytesAsync(string imageName) {
            this.GetImageBytesAsync(imageName, null);
        }
        
        /// <remarks/>
        public void GetImageBytesAsync(string imageName, object userState) {
            if ((this.GetImageBytesOperationCompleted == null)) {
                this.GetImageBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageBytesOperationCompleted);
            }
            this.InvokeAsync("GetImageBytes", new object[] {
                        imageName}, this.GetImageBytesOperationCompleted, userState);
        }
        
        private void OnGetImageBytesOperationCompleted(object arg) {
            if ((this.GetImageBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageBytesCompleted(this, new GetImageBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UpdateData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateData(string connectionStr, string className, string xml) {
            object[] results = this.Invoke("UpdateData", new object[] {
                        connectionStr,
                        className,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateData(string connectionStr, string className, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateData", new object[] {
                        connectionStr,
                        className,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdateData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string connectionStr, string className, string xml) {
            this.UpdateDataAsync(connectionStr, className, xml, null);
        }
        
        /// <remarks/>
        public void UpdateDataAsync(string connectionStr, string className, string xml, object userState) {
            if ((this.UpdateDataOperationCompleted == null)) {
                this.UpdateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataOperationCompleted);
            }
            this.InvokeAsync("UpdateData", new object[] {
                        connectionStr,
                        className,
                        xml}, this.UpdateDataOperationCompleted, userState);
        }
        
        private void OnUpdateDataOperationCompleted(object arg) {
            if ((this.UpdateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataCompleted(this, new UpdateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDataGridViewForClassCompletedEventHandler(object sender, GetDataGridViewForClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataGridViewForClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataGridViewForClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDataGridViewForTaxonCompletedEventHandler(object sender, GetDataGridViewForTaxonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataGridViewForTaxonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataGridViewForTaxonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDataGridViewForRelatedClassCompletedEventHandler(object sender, GetDataGridViewForRelatedClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataGridViewForRelatedClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataGridViewForRelatedClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDataGridViewForArrayCompletedEventHandler(object sender, GetDataGridViewForArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataGridViewForArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataGridViewForArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetXQueryForDataGridViewCompletedEventHandler(object sender, GetXQueryForDataGridViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXQueryForDataGridViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXQueryForDataGridViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void BeginQueryCompletedEventHandler(object sender, BeginQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetNextResultCompletedEventHandler(object sender, GetNextResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void EndQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetArrayDataCompletedEventHandler(object sender, GetArrayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArrayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArrayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsDBACompletedEventHandler(object sender, IsDBACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDBACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDBACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveWorkingChartInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveNamedChartInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveNamedChartTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsChartNameUniqueCompletedEventHandler(object sender, IsChartNameUniqueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsChartNameUniqueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsChartNameUniqueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsTemplateNameUniqueCompletedEventHandler(object sender, IsTemplateNameUniqueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTemplateNameUniqueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTemplateNameUniqueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChartInfosCompletedEventHandler(object sender, GetChartInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChartTemplatesCompletedEventHandler(object sender, GetChartTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChartDefXmlByIdCompletedEventHandler(object sender, GetChartDefXmlByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartDefXmlByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartDefXmlByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetTemplateDefXmlByIdCompletedEventHandler(object sender, GetTemplateDefXmlByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplateDefXmlByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplateDefXmlByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteChartTemplateByIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetExportTypesInXmlCompletedEventHandler(object sender, GetExportTypesInXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExportTypesInXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExportTypesInXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChartFormatsInXmlCompletedEventHandler(object sender, GetChartFormatsInXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartFormatsInXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartFormatsInXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetAlgorithmTypesInXmlCompletedEventHandler(object sender, GetAlgorithmTypesInXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlgorithmTypesInXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlgorithmTypesInXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ExportDataToFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ExportArrayDataToFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RunAlgorithmOnClassDataCompletedEventHandler(object sender, RunAlgorithmOnClassDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunAlgorithmOnClassDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunAlgorithmOnClassDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RunAlgorithmOnArrayDataCompletedEventHandler(object sender, RunAlgorithmOnArrayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunAlgorithmOnArrayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunAlgorithmOnArrayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetClassDataForPivotGridCompletedEventHandler(object sender, GetClassDataForPivotGridCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClassDataForPivotGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClassDataForPivotGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetArrayDataForPivotGridCompletedEventHandler(object sender, GetArrayDataForPivotGridCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArrayDataForPivotGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArrayDataForPivotGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetImageNamesCompletedEventHandler(object sender, GetImageNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetImageBytesCompletedEventHandler(object sender, GetImageBytesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageBytesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageBytesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UpdateDataCompletedEventHandler(object sender, UpdateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591