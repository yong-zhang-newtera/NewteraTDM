#region Copyright (c) 2000-2009 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{       ASPxGridView                                 }
{                                                                   }
{       Copyright (c) 2000-2009 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2009 Developer Express Inc.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using System.ComponentModel;
using System.Drawing.Design;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.Design;
using DevExpress.Data;
using DevExpress.Web.ASPxClasses;
using DevExpress.Web.Data;
using DevExpress.Web.ASPxEditors;
using DevExpress.Web.ASPxEditors.Design;
using DevExpress.Web.ASPxClasses.Internal;
using DevExpress.Web.ASPxGridView.Design;
using DevExpress.XtraGrid;
using DevExpress.Web.ASPxEditors.Internal;
using DevExpress.Web.ASPxEditors.FilterControl;
namespace DevExpress.Web.ASPxGridView {
	public enum GridViewColumnFixedStyle { None, Left };
	public abstract class GridViewColumn : WebColumnBase {
		static Unit DefaultWidth = Unit.Pixel(120);
		GridViewHeaderStyle headerStyle;
		GridViewCellStyle cellStyle;
		GridViewFooterStyle footerCellStyle;
		GridViewGroupFooterStyle groupFooterCellStyle;
		ITemplate headerTemplate;
		ITemplate headerCaptionTemplate;
		ITemplate footerTemplate;
		bool autoGenerated;
		public GridViewColumn() 
			: base() {
			this.headerStyle = new GridViewHeaderStyle();
			this.cellStyle = new GridViewCellStyle();
			this.footerCellStyle = new GridViewFooterStyle();
			this.groupFooterCellStyle = new GridViewGroupFooterStyle();
		}
		internal bool AutoGenerated {
			get { return autoGenerated; }
			set { autoGenerated = value; }
		}
		[Browsable(false)]
		public virtual ASPxGridView Grid {
			get {
				GridViewColumnCollection gridColl = Collection as GridViewColumnCollection;
				if(gridColl == null) return null;
				return gridColl.Grid;
			}
		}
		[Description("Gets the style settings used to paint the column's header."), Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewHeaderStyle HeaderStyle { get { return headerStyle; } }
		[Description("Gets the style settings used to paint column cells."), Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewCellStyle CellStyle { get { return cellStyle; } }
		[Description("Gets the style settings used to paint footer cells within a column."), Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewFooterStyle FooterCellStyle { get { return footerCellStyle; } }
		[Description("Gets the style settings used to paint group footer cells within a column."), Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewGroupFooterStyle GroupFooterCellStyle { get { return groupFooterCellStyle; } }
		[Category("Templates"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), 
		TemplateContainer(typeof(GridViewHeaderTemplateContainer))]
		public virtual ITemplate HeaderTemplate {
			get { return headerTemplate; }
			set {
				if(HeaderTemplate == value) return;
				headerTemplate = value;
				TemplatesChanged();
			}
		}
		[Category("Templates"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TemplateContainer(typeof(GridViewHeaderTemplateContainer))]
		public virtual ITemplate HeaderCaptionTemplate {
			get { return headerCaptionTemplate; }
			set {
				if(HeaderCaptionTemplate == value) return;
				headerCaptionTemplate = value;
				TemplatesChanged();
			}
		}
		[Category("Templates"), Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TemplateContainer(typeof(GridViewFooterCellTemplateContainer))]
		public virtual ITemplate FooterTemplate {
			get { return footerTemplate; }
			set {
				if(FooterTemplate == value) return;
				footerTemplate = value;
				TemplatesChanged();
			}
		}
		[Description("Gets or sets whether the column's header is displayed within the Customization Window when the column is hidden. ")]
		public new bool ShowInCustomizationForm {
			get { return base.ShowInCustomizationForm; }
			set { base.ShowInCustomizationForm = value; }
		}
		[Description("Gets or sets whether the column is fixed on the ASPxGridView's left edge."), Category("Behavior"), DefaultValue(GridViewColumnFixedStyle.None), NotifyParentProperty(true)]
		public GridViewColumnFixedStyle FixedStyle {
			get { return (GridViewColumnFixedStyle)GetIntProperty("FixedStyle", (int)GridViewColumnFixedStyle.None); }
			set {
				if (value == FixedStyle) return;
				SetIntProperty("FixedStyle", (int)GridViewColumnFixedStyle.None, (int)value);				
				if(Grid != null)
					Grid.OnColumnCollectionChanged();				
			}
		}
		public override bool IsClickable() { return GetAllowDragDrop() || GetAllowSort(); }
		protected internal virtual ColumnSortOrder GetSortOrder() { return ColumnSortOrder.None; }		
		protected internal virtual bool GetAllowAutoFilter() { return false; }
		protected internal virtual bool GetAllowDragDrop() { return true; }
		protected internal virtual bool GetAllowSort() { return false; }
		protected internal virtual bool GetAllowGroup() { return GetAllowSort(); }
		protected internal virtual bool GetHasFilterButton() { return false; }
		protected internal virtual bool GetIsFiltered() { return false; }
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			GridViewColumn col = (GridViewColumn)source;
			if(col == null) return;
			this.FixedStyle = col.FixedStyle;
			this.AutoGenerated = col.AutoGenerated;
			this.HeaderStyle.Assign(col.HeaderStyle);
			this.CellStyle.Assign(col.CellStyle);
			this.FooterCellStyle.Assign(col.FooterCellStyle);
			this.GroupFooterCellStyle.Assign(col.GroupFooterCellStyle);
			this.HeaderCaptionTemplate = col.HeaderCaptionTemplate;
			this.HeaderTemplate = col.HeaderTemplate;
			this.FooterTemplate = col.FooterTemplate;
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return new IStateManager[] { HeaderStyle, CellStyle, FooterCellStyle, GroupFooterCellStyle };
		}
		protected internal virtual bool IsEquals(string id_field_caption) {
			return id_field_caption == Name;
		}
		protected internal void ResetWidth() {
			SetUnitProperty("Width", Unit.Empty, Unit.Empty);
		}
	}
	public enum ColumnCommandButtonType { Edit, New, Delete, Select, Update, Cancel, ClearFilter }
	public class GridViewCommandColumnButton : StateManager {
		GridViewCommandColumn column;
		ColumnCommandButtonType buttonType;
		ImageProperties image;
		public GridViewCommandColumnButton(GridViewCommandColumn column, ColumnCommandButtonType buttonType) {
			this.column = column;
			this.buttonType = buttonType;
			this.image = new ImageProperties(column);
		}
		protected internal GridViewCommandColumn Column { get { return column; } }
		protected ASPxGridView Grid { get { return Column != null ? Column.Grid : null; } }
		[Browsable(false)]
		public ColumnCommandButtonType ButtonType { get { return buttonType; } }
		public override string ToString() {
			return string.Empty;
		}
		[Description("Gets or sets whether the button is displayed within command column cells."), Category("Appearance"), DefaultValue(false), NotifyParentProperty(true)]
		public bool Visible {
			get { return GetBoolProperty("Visible", false); }
			set {
				if(value == Visible) return;
				SetBoolProperty("Visible", false, value);
				OnChanged();
			}
		}
		[Description("Gets or sets the button's text."), Category("Appearance"), DefaultValue(""), NotifyParentProperty(true), Localizable(true)]
		public string Text {
			get { return GetStringProperty("Text", string.Empty); }
			set {
				if(value == Text) return;
				SetStringProperty("Text", string.Empty, value);
				OnChanged();
			}
		}
		protected string DefaultText { get { return Grid != null ? Grid.SettingsText.GetCommandButtonText(ButtonType) : ASPxGridViewTextSettings.GetCommandButtonDefaultText(ButtonType); } }
		protected internal string GetText() { return string.IsNullOrEmpty(Text) ? DefaultText : Text; }
		[Description("Gets the settings of an image displayed within the button."), Category("Appearance"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ImageProperties Image { get { return image; } }
		protected virtual void OnChanged() {
			if(Column != null) Column.OnColumnChanged();
		}
		public virtual void Assign(GridViewCommandColumnButton source) {
			this.Visible = source.Visible;
			Image.Assign(source.Image);
			this.Text = source.Text;
		}
	}
	public enum GridViewCustomButtonVisibility { FilterRow, AllDataRows, BrowsableRow, EditableRow, Invisible }
	public class GridViewCommandColumnCustomButton : CollectionItem {
		ImageProperties image;
		public GridViewCommandColumnCustomButton() {
			this.image = new ImageProperties();
		}
		protected GridViewCommandColumnCustomButtonCollection ButtonCollection { get { return Collection as GridViewCommandColumnCustomButtonCollection; } }
		protected internal GridViewCommandColumn Column { get { return ButtonCollection != null ? ButtonCollection.Column : null; } }
		[Description("Gets or sets a value that identifies the custom button."), Category("Behavior"), DefaultValue(""), NotifyParentProperty(true), Localizable(true)]
		public string ID {
			get { return GetStringProperty("ID", string.Empty); }
			set {
				if(value == ID) return;
				SetStringProperty("ID", string.Empty, value);
				OnChanged();
			}
		}
		[Description("Gets or sets a value that specifies in which rows the custom button is displayed."), Category("Appearance"), DefaultValue(GridViewCustomButtonVisibility.BrowsableRow), NotifyParentProperty(true)]
		public GridViewCustomButtonVisibility Visibility {
			get { return (GridViewCustomButtonVisibility)GetEnumProperty("Visibility", GridViewCustomButtonVisibility.BrowsableRow); }
			set {
				if(value == Visibility) return;
				SetEnumProperty("Visibility", GridViewCustomButtonVisibility.BrowsableRow, value);
				OnChanged();
			}
		}
		protected internal bool IsVisible(GridViewTableCommandCellType cellType, bool isEditingRow) {
			if(Visibility == GridViewCustomButtonVisibility.Invisible) return false;
			if(Visibility == GridViewCustomButtonVisibility.FilterRow) return cellType == GridViewTableCommandCellType.Filter;
			if(cellType == GridViewTableCommandCellType.Filter) return false;
			if(Visibility == GridViewCustomButtonVisibility.AllDataRows) return cellType == GridViewTableCommandCellType.Data;
			if(isEditingRow) return Visibility == GridViewCustomButtonVisibility.EditableRow;
			return Visibility == GridViewCustomButtonVisibility.BrowsableRow;
		}
		[Description("Gets or sets the button's text."), Category("Appearance"), DefaultValue(""), NotifyParentProperty(true), Localizable(true)]
		public string Text {
			get { return GetStringProperty("Text", string.Empty); }
			set {
				if(value == Text) return;
				SetStringProperty("Text", string.Empty, value);
			}
		}
		[Description("Gets the settings of an image displayed within the custom button."), Category("Appearance"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ImageProperties Image { get { return image; } }
		public override void Assign(CollectionItem source) {
			GridViewCommandColumnCustomButton button = source as GridViewCommandColumnCustomButton;
			if(button == null) return;
			ID = button.ID;
			Text = button.Text;
			Visibility = button.Visibility;
			Image.Assign(button.Image);
		}
		protected internal string GetText() {
			if(!string.IsNullOrEmpty(Text)) return Text;
			return ID;
		}
		protected internal string GetID() {
			if(!string.IsNullOrEmpty(ID)) return ID;
			return Text;
		}
		protected virtual void OnChanged() {
			if(Column != null) Column.OnColumnChanged();
		}
	}
	public class GridViewCommandColumnCustomButtonCollection : Collection {
		GridViewCommandColumn column;
		public GridViewCommandColumnCustomButtonCollection(GridViewCommandColumn column) {
			this.column = column;
		}
		[Description("Gets a command column that owns this collection.")]
public GridViewCommandColumn Column { get { return column; } }
		public override string ToString() { return string.Empty; }
		[Browsable(false)]
		public GridViewCommandColumnCustomButton this[int index] {
			get { return GetItem(index) as GridViewCommandColumnCustomButton; }
		}
		[Browsable(false)]
		public GridViewCommandColumnCustomButton this[string IDorText] {
			get {
				foreach(GridViewCommandColumnCustomButton button in this) {
					if(button.ID == IDorText) return button;
				}
				foreach(GridViewCommandColumnCustomButton button in this) {
					if(button.Text == IDorText) return button;
				}
				return null;
			}
		}
		protected override Type GetKnownType() {
			return typeof(GridViewCommandColumnCustomButton);
		}
		public void Add(GridViewCommandColumnCustomButton button) {
			base.Add(button);
		}
		public void Insert(int index, GridViewCommandColumnCustomButton button) {
			base.Insert(index, button);
		}
		public void Remove(GridViewCommandColumnCustomButton button) {
			base.Remove(button);
		}
		public int IndexOf(GridViewCommandColumnCustomButton button) {
			return base.IndexOf(button);
		}
		protected override void OnChanged() {
			base.OnChanged();
			if(Column != null) {
				Column.OnColumnChanged();
			}
		}
	}
	public class GridViewCommandColumn : GridViewColumn {
		GridViewCommandColumnButton
			editButton, newButton, deleteButton,
			selectButton, cancelButton, updateButton, clearFilterButton;
		GridViewCommandColumnCustomButtonCollection customButtons;
		public GridViewCommandColumn() : this(string.Empty) { }
		public GridViewCommandColumn(string caption) {
			this.editButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.Edit);
			this.newButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.New);
			this.deleteButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.Delete);
			this.selectButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.Select);
			this.cancelButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.Cancel);
			this.updateButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.Update);
			this.clearFilterButton = new GridViewCommandColumnButton(this, ColumnCommandButtonType.ClearFilter);
			this.customButtons = new GridViewCommandColumnCustomButtonCollection(this);
			Caption = caption;
		}
		[Description("Gets the Edit button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton EditButton { get { return editButton; } }
		[Description("Gets the New button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton NewButton { get { return newButton; } }
		[Description("Gets the Delete button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton DeleteButton { get { return deleteButton; } }
		[Description("Gets the Select button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton SelectButton { get { return selectButton; } }
		[Description("Gets the Cancel button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton CancelButton { get { return cancelButton; } }
		[Description("Gets the Update button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton UpdateButton { get { return updateButton; } }
		[Description("Gets the Clear button's settings."), Category("Buttons"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		 RefreshProperties(RefreshProperties.All), TypeConverter(typeof(ExpandableObjectConverter)), NotifyParentProperty(true)]
		public GridViewCommandColumnButton ClearFilterButton { get { return clearFilterButton; } }
		[Description("Gets the collection of custom buttons. "),
		PersistenceMode(PersistenceMode.InnerProperty), MergableProperty(false), Category("Data"),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		DefaultValue((string)null), AutoFormatDisable, NotifyParentProperty(true),
		TypeConverter(typeof(DevExpress.Utils.Design.UniversalCollectionTypeConverter))]
		public GridViewCommandColumnCustomButtonCollection CustomButtons { get { return this.customButtons; } }
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
							new IStateManager[] { EditButton, NewButton, DeleteButton, SelectButton, CancelButton, UpdateButton, ClearFilterButton });
		}
		protected internal override bool GetAllowDragDrop() {
			if(AllowDragDrop == DefaultBoolean.Default && Grid != null)
				return Grid.SettingsBehavior.AllowDragDrop;
			return AllowDragDrop != DefaultBoolean.False;
		}
		[Description("Gets or sets the command button's type."), Category("Buttons"), DefaultValue(ButtonType.Link), NotifyParentProperty(true)]
		public ButtonType ButtonType {
			get { return (ButtonType)GetIntProperty("ButtonType", (int)ButtonType.Link); }
			set {
				if(value == ButtonType) return;
				SetIntProperty("ButtonType", (int)ButtonType.Link, (int)value);
				OnColumnChanged();
			}
		}
		[Description("Gets or sets whether the check box used to select/deselect data rows is shown."), Category("Buttons"), DefaultValue(false), NotifyParentProperty(true)]
		public bool ShowSelectCheckbox {
			get { return GetBoolProperty("ShowSelectCheckbox", false); }
			set {
				if(ShowSelectCheckbox == value) return;
				SetBoolProperty("ShowSelectCheckbox", false, value);
				OnColumnChanged();
			}
		}
		[Description("Gets or sets whether end-users can drag the column's header."), DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowDragDrop {
			get { return (DefaultBoolean)GetIntProperty("AllowDragDrop", (int)DefaultBoolean.Default); }
			set {
				if(AllowDragDrop == value) return;
				SetIntProperty("AllowDragDrop", (int)DefaultBoolean.Default, (int)value);
				OnColumnChanged();
			}
		}
		public override string ToString() {
			if(!string.IsNullOrEmpty(Caption)) return Caption;
			return "#";
		}
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			GridViewCommandColumn col = source as GridViewCommandColumn;
			if(col == null) return;
			this.ShowSelectCheckbox = col.ShowSelectCheckbox;
			this.ButtonType = col.ButtonType;
			this.AllowDragDrop = col.AllowDragDrop;
			this.EditButton.Assign(col.EditButton);
			this.NewButton.Assign(col.NewButton);
			this.DeleteButton.Assign(col.DeleteButton);
			this.SelectButton.Assign(col.SelectButton);
			this.CancelButton.Assign(col.CancelButton);
			this.UpdateButton.Assign(col.UpdateButton);
			this.ClearFilterButton.Assign(col.ClearFilterButton);
			this.customButtons.Assign(col.CustomButtons);
		}
		protected ASPxGridViewTextSettings Texts { get { return Grid != null ? Grid.SettingsText : null; } }
	}
	[ControlBuilder(typeof(DevExpress.Web.ASPxGridView.Design.GridViewDataColumnBuilder))]
	public class GridViewDataColumn : GridViewColumn, IWebColumnInfo, IDataSourceViewSchemaAccessor, IFilterColumn {
		GridViewEditCellStyle editCellStyle;
		GridViewFilterCellStyle filterCellStyle;
		GridViewDataColumnSettings settings;
		GridColumnEditFormSettings editFormSettings;
		GridViewEditFormCaptionStyle editFormCaptionStyle;
		ITemplate dataItemTemplate, editItemTemplate, groupRowTemplate;
		EditPropertiesBase propertiesEdit;
		ColumnSortOrder ungroupedSortOrder = ColumnSortOrder.None;
		public GridViewDataColumn() : this(string.Empty, string.Empty) { }
		public GridViewDataColumn(string fieldName) : this(fieldName, string.Empty) { }
		public GridViewDataColumn(string fieldName, string caption) {
			this.editCellStyle = new GridViewEditCellStyle();
			this.filterCellStyle = new GridViewFilterCellStyle();
			this.editFormCaptionStyle = new GridViewEditFormCaptionStyle();
			this.editFormSettings = new GridColumnEditFormSettings(this);
			this.settings = new GridViewDataColumnSettings(this);
			FieldName = fieldName;
			Caption = caption;
		}
		[Category("Behavior"),
		Browsable(false), 
		PersistenceMode(PersistenceMode.InnerProperty),
		RefreshProperties(RefreshProperties.All),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TypeConverter(typeof(DevExpress.Web.ASPxGridView.Design.GridViewColumnEditPropertiesConverter)),
		Editor(typeof(DevExpress.Web.ASPxGridView.Design.GridViewColumnEditPropertiesEditor), typeof(System.Drawing.Design.UITypeEditor)),
		NotifyParentProperty(true)]
		public virtual EditPropertiesBase PropertiesEdit {
			get {
				return propertiesEdit;
			}
			set {
				if(propertiesEdit == value) return;
				propertiesEdit = value;
				SetPropertiesEditTypeCore(value == null ? string.Empty : EditRegistrationInfo.GetEditName(value));
				OnPropertiesEditTypeChanged();
			}
		}
		[DefaultValue(""), Localizable(false), Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Visible), NotifyParentProperty(true)]
		public virtual string PropertiesEditType {
			get { return GetStringProperty("PropertiesEditType", string.Empty); }
			set {
				SetPropertiesEditTypeCore(value);
				PropertiesEdit = UpdateColumnEdit();
			}
		}
		protected virtual void OnPropertiesEditTypeChanged() {
			LayoutChanged();
		}
		void SetPropertiesEditTypeCore(string value) {
			if(value == null) value = string.Empty;
			SetStringProperty("PropertiesEditType", string.Empty, value);
		}
		EditPropertiesBase UpdateColumnEdit() {
			return EditRegistrationInfo.CreateProperties(PropertiesEditType);
		}
		[Description("Provides access to the column's options."),
		Category("Behavior"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		NotifyParentProperty(true)]
		public GridViewDataColumnSettings Settings { get { return settings; } }
		[Description("Gets the settings of the edit cell which is displayed within the Edit Form and corresponds to the current data column."),
		Category("Behavior"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		NotifyParentProperty(true)]
		public GridColumnEditFormSettings EditFormSettings { get { return editFormSettings; } }
		[Description("Gets the style settings used to paint the column's cells within the Edit Form."),
		Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewEditCellStyle EditCellStyle { get { return editCellStyle; } }
		[Description("Gets the style settings used to paint a cell within the Auto Filter Row that corresponds to the current data column."),
		Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewFilterCellStyle FilterCellStyle { get { return filterCellStyle; } }
		[Description("Gets the style settings used to paint the caption of the edit cell that corresponds to the current column."),
		Category("Styles"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public GridViewEditFormCaptionStyle EditFormCaptionStyle { get { return editFormCaptionStyle; } }
		[Category("Templates"), Browsable(false), DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty),
		TemplateContainer(typeof(GridViewDataItemTemplateContainer)), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public virtual ITemplate DataItemTemplate {
			get { return dataItemTemplate; }
			set {
				if(DataItemTemplate == value) return;
				dataItemTemplate = value;
				TemplatesChanged();
			}
		}
		[Category("Templates"), Browsable(false), DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty),
		TemplateContainer(typeof(GridViewEditItemTemplateContainer), BindingDirection.TwoWay), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public virtual ITemplate EditItemTemplate {
			get { return editItemTemplate; }
			set {
				if(EditItemTemplate == value) return;
				editItemTemplate = value;
				TemplatesChanged();
			}
		}
		[Category("Templates"), Browsable(false), DefaultValue(null), PersistenceMode(PersistenceMode.InnerProperty),
		TemplateContainer(typeof(GridViewGroupRowTemplateContainer)), NotifyParentProperty(true),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public virtual ITemplate GroupRowTemplate {
			get { return groupRowTemplate; }
			set {
				if(GroupRowTemplate == value) return;
				groupRowTemplate = value;
				TemplatesChanged();
			}
		}
		[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Localizable(false)]
		public string FilterExpression {
			get {
				if(Grid == null) return string.Empty;
				return Grid.GetColumnFilterString(this);
			}
		}
		[Description("Gets or sets the name of the database field assigned to the current column."),
		Category("Data"), DefaultValue(""), Localizable(false), RefreshProperties(RefreshProperties.Repaint),
		TypeConverter(typeof(GridViewFieldConverter)), NotifyParentProperty(true)]
		public virtual string FieldName {
			get { return GetStringProperty("FieldName", string.Empty); }
			set {
				if(value == null) value = string.Empty;
				if(value == FieldName) return;
				SetStringProperty("FieldName", string.Empty, value);
				OnColumnBindingChanged();
			}
		}
		[Description("Gets or sets the data type and binding mode of the column."),
		Category("Data"), DefaultValue(UnboundColumnType.Bound), NotifyParentProperty(true)]
		public virtual UnboundColumnType UnboundType {
			get { return (UnboundColumnType)GetIntProperty("UnboundType", (int)UnboundColumnType.Bound); }
			set {
				if(UnboundType == value) return;
				SetIntProperty("UnboundType", (int)UnboundColumnType.Bound, (int)value);
				OnColumnBindingChanged();
			}
		}
		[Description("Gets or sets a value that specifies whether the column takes part in grouping and at which level."),
		Category("Data"), DefaultValue(-1), NotifyParentProperty(true)]
		public int GroupIndex {
			get { return GetIntProperty("GroupIndex", -1); }
			set {
				if(GroupIndex == value) return;
				if(Grid != null) {
					value = Grid.GroupBy(this, value);
				}
				else {
					if(SortOrder == ColumnSortOrder.None && value > -1) SortAscending();
				}
				SetGroupIndex(value);
			}
		}
		[Description("Gets or sets the column's position among sorted columns."),
		Category("Data"), DefaultValue(-1), NotifyParentProperty(true)]
		public int SortIndex {
			get { return GetIntProperty("SortIndex", -1); }
			set {
				if(Grid != null) {
					value = Grid.SortBy(this, value);
				}
				SetSortIndex(value);
			}
		}
		[Description("Gets or sets the column's sort order."),
		Category("Data"), DefaultValue(ColumnSortOrder.None), NotifyParentProperty(true)]
		public virtual ColumnSortOrder SortOrder {
			get { return (ColumnSortOrder)GetObjectProperty("SortOrder", ColumnSortOrder.None); }
			set {
				if(Grid != null)
					value = Grid.SortBy(this, value);
				else {
					SortIndex = value == ColumnSortOrder.None ? -1 : (SortIndex == -1 ? 0 : SortIndex);
				}
				SetSortOrder(value);
			}
		}
		protected internal ColumnSortOrder UngroupedSortOrder { get { return ungroupedSortOrder; } set { ungroupedSortOrder = value; } }
		[Description("Gets or sets whether end-users are allowed to edit the column's cell values."),
		Category("Behavior"), DefaultValue(false), NotifyParentProperty(true)]
		public virtual bool ReadOnly {
			get { return GetBoolProperty("ReadOnly", false); }
			set {
				SetBoolProperty("ReadOnly", false, value);
			}
		}
		public void AutoFilterBy(string value) {
			if(Grid != null)
				Grid.AutoFilterByColumn(this, value);
		}
		public void GroupBy() {
			if(Grid != null) {
				Grid.GroupBy(this);
			}
		}
		public void UnGroup() {
			GroupIndex = -1;
		}
		public void SortAscending() {
			SortOrder = ColumnSortOrder.Ascending;
		}
		public void SortDescending() {
			SortOrder = ColumnSortOrder.Descending;
		}
		public void UnSort() {
			SortIndex = -1;
		}
		[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public bool ShowInFilterControl {
			get {
				if (Settings.ShowInFilterControl == DefaultBoolean.Default) 
					return Visible && !string.IsNullOrEmpty(FieldName);
				return Settings.ShowInFilterControl == DefaultBoolean.True;
			}
		}
		[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public string EditFormCaption {
			get { return !string.IsNullOrEmpty(EditFormSettings.Caption) ? EditFormSettings.Caption : ToString(); }
		}
		public override string ToString() {
			if(Caption != string.Empty) return Caption;
#if DEBUGTEST
#endif
			return FieldNameToCaption();
		}
		protected internal bool IsNameOrFieldOrCaption(string id) {
			if(string.IsNullOrEmpty(id)) return false;
			return id == Name || id == FieldName || id == Caption || id == ToString();
		}
		string FieldNameToCaption() {
			string field = FieldName;
			if(Grid != null) {
				DataColumnInfo dc = Grid.DataProxy.GetColumnInfo(field);
				if(dc != null) field = dc.Caption;
			}
			return CommonUtils.SplitPascalCaseString(field);
		}
		protected internal void SetSortIndex(int value) {
			SetIntProperty("SortIndex", -1, value);
		}
		protected internal void SetSortOrder(ColumnSortOrder value) {
			SetObjectProperty("SortOrder", ColumnSortOrder.None, value);
		}
		protected internal void SetGroupIndex(int value) {
			SetIntProperty("GroupIndex", -1, value);
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.MergedBaseAndNewStateManagedObjects(base.GetStateManagedObjects(),
							EditCellStyle, FilterCellStyle, EditFormCaptionStyle, EditFormSettings, PropertiesEdit, Settings);
		}
		public override bool IsClickable() {
			return base.IsClickable() || GroupIndex > -1;
		}
		protected internal override ColumnSortOrder GetSortOrder() { return SortOrder; }
		protected internal override bool GetAllowDragDrop() {
			if(Settings.AllowDragDrop == DefaultBoolean.Default && Grid != null)
				return Grid.SettingsBehavior.AllowDragDrop;
			return Settings.AllowDragDrop != DefaultBoolean.False;
		}
		protected internal override bool GetAllowAutoFilter() { return Settings.AllowAutoFilter != DefaultBoolean.False && HasData; }
		protected internal override bool GetHasFilterButton() {
			if(!HasData) return false;
			if(Settings.AllowHeaderFilter == DefaultBoolean.True) return true;
			if(Settings.AllowHeaderFilter == DefaultBoolean.False) return false;
			return Grid.Settings.ShowHeaderFilterButton;
		}
		protected internal override bool GetIsFiltered() { return !string.IsNullOrEmpty(Grid.GetColumnFilterString(this)); }
		protected internal override bool GetAllowSort() {
			if(!HasData) return false;
			if(Settings.AllowSort == DefaultBoolean.Default && Grid != null)
				return Grid.SettingsBehavior.AllowSort;
			return Settings.AllowSort != DefaultBoolean.False;
		}
		protected internal override bool GetAllowGroup() {
			if(!HasData) return false;
			if(Settings.AllowGroup == DefaultBoolean.Default && Grid != null)
				return Grid.SettingsBehavior.AllowGroup;
			return Settings.AllowGroup != DefaultBoolean.False;
		}
		protected virtual bool HasData {
			get {
				return !string.IsNullOrEmpty(FieldName) || UnboundType != UnboundColumnType.Bound;
			}
		}
		protected virtual void OnColumnBindingChanged() {
			if(!IsLoading() && Grid != null) Grid.OnColumnBindingChanged(this);
		}
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			GridViewDataColumn col = source as GridViewDataColumn;
			if(col == null) return;
			this.EditCellStyle.Assign(col.EditCellStyle);
			this.FilterCellStyle.Assign(col.FilterCellStyle);
			this.EditFormCaptionStyle.Assign(col.EditFormCaptionStyle);
			this.EditFormSettings.Assign(col.EditFormSettings);
			this.DataItemTemplate = col.DataItemTemplate;
			this.EditItemTemplate = col.EditItemTemplate;
			this.GroupRowTemplate = col.GroupRowTemplate;
			AssignEditor(col);
			this.ReadOnly = col.ReadOnly;
			this.FieldName = col.FieldName;
			this.UnboundType = col.UnboundType;
			this.SetGroupIndex(col.GroupIndex);
			this.SetSortIndex(col.SortIndex);
			this.SetSortOrder(col.SortOrder);
			this.Settings.Assign(col.Settings);
		}
		protected virtual void AssignEditor(GridViewDataColumn source) {
			this.PropertiesEditType = source.PropertiesEditType;
			this.PropertiesEdit = source.PropertiesEdit;
		}
		object IDataSourceViewSchemaAccessor.DataSourceViewSchema {
			get {
				if(Grid == null) return null;
				return ((IDataSourceViewSchemaAccessor)Grid).DataSourceViewSchema;
			}
			set { }
		}
		protected internal Type GetDataType() {
			if(Grid == null) return typeof(object);
			Type res = Grid.DataProxy.GetFieldType(FieldName);
			return res == null ? typeof(object) : res;
		}
		static Dictionary<string, bool> farTypes;
		static Dictionary<string, bool> FarTypes {
			get {
				if(farTypes == null) {
					farTypes = new Dictionary<string, bool>();
					foreach(string s in new string[] {
													"Byte","Decimal","Double","Int16","Int32","Int64","SByte", "Single", 
													"UInt16","UInt32","UInt64"}) {
						farTypes[s] = true;
					}
				}
				return farTypes;
			}
		}
		protected internal virtual HorizontalAlign GetDisplayControlDefaultAlign() {
			Type type = GetDataType();
			if(FarTypes.ContainsKey(type.Name)) return HorizontalAlign.Right;
			return HorizontalAlign.NotSet;
		}
		protected internal override bool IsEquals(string id_field_caption) {
			if(id_field_caption == Name) return true;
			if(id_field_caption == FieldName) return true;
			return id_field_caption == Caption;
		}
		protected internal void FilterByHeaderPopup(string value) {
			if(Grid != null) Grid.FilterByHeaderPopup(this, value);
		}
		#region IFilterColumn Members
		DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass IFilterColumn.ClauseClass {
			get {
				if(PropertiesEdit != null && PropertiesEdit.GetEditorType() != EditorType.Generic) {
					if(PropertiesEdit.GetEditorType() == EditorType.Blob)
						return DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass.Blob;
					return DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass.Lookup;
				}
				Type dataType = GetDataType();
				if(dataType == typeof(string)) return DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass.String;
				return DevExpress.Data.Filtering.Helpers.FilterColumnClauseClass.Generic; 
			}
		}
		string IFilterColumn.DisplayName {  get { return ToString(); } }
		EditPropertiesBase IFilterColumn.PropertiesEdit {  get { return this.PropertiesEdit; }  }
		string IFilterColumn.PropertyName { get { return FieldName; } }
		Type IFilterColumn.PropertyType { get { return GetDataType(); } }
		#endregion
	}
	[TypeConverter(typeof(ExpandableObjectConverter))]
	public class GridViewDataColumnSettings : StateManager {
		GridViewDataColumn column;
		public GridViewDataColumnSettings(GridViewDataColumn column) {
			this.column = column;
		}
		protected GridViewDataColumn Column { get { return column; } }
		protected void OnChanged() { Column.OnColumnChanged(); }
		[Description("Gets or sets whether end-users can drag the column's header."),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowDragDrop {
			get { return (DefaultBoolean)GetIntProperty("AllowDragDrop", (int)DefaultBoolean.Default); }
			set {
				if(AllowDragDrop == value) return;
				SetIntProperty("AllowDragDrop", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets how column values are filtered."),
		DefaultValue(ColumnFilterMode.Value), NotifyParentProperty(true)]
		public ColumnFilterMode FilterMode {
			get { return (ColumnFilterMode)GetIntProperty("FilterMode", (int)ColumnFilterMode.Value); }
			set {
				if(FilterMode == value) return;
				SetIntProperty("FilterMode", (int)ColumnFilterMode.Value, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets how data rows are grouped when grouping by the current column is applied."),
		DefaultValue(ColumnGroupInterval.Default), NotifyParentProperty(true)]
		public ColumnGroupInterval GroupInterval {
			get { return (ColumnGroupInterval)GetIntProperty("GroupInterval", (int)ColumnGroupInterval.Default); }
			set {
				if(GroupInterval == value) return;
				SetIntProperty("GroupInterval", (int)ColumnGroupInterval.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets how the column's data is sorted when sorting is applied to it."),
		DefaultValue(ColumnSortMode.Default), NotifyParentProperty(true)]
		public ColumnSortMode SortMode {
			get { return (ColumnSortMode)GetIntProperty("SortMode", (int)ColumnSortMode.Default); }
			set {
				if(SortMode == value) return;
				SetIntProperty("SortMode", (int)ColumnSortMode.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether the filter expression entered by an end-user within the auto-filter row cell is automatically applied."),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowAutoFilterTextInputTimer {
			get { return (DefaultBoolean)GetIntProperty("AllowAutoFilterTextInputTimer", (int)DefaultBoolean.Default); }
			set {
				if(AllowAutoFilterTextInputTimer == value) return;
				SetIntProperty("AllowAutoFilterTextInputTimer", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether end-users can filter data by the column's values."),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowAutoFilter {
			get { return (DefaultBoolean)GetIntProperty("AllowAutoFilter", (int)DefaultBoolean.Default); }
			set {
				if(AllowAutoFilter == value) return;
				SetIntProperty("AllowAutoFilter", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether filter row buttons are displayed within the auto filter row. "),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean ShowFilterRowMenu {
			get { return (DefaultBoolean)GetEnumProperty("ShowFilterRowMenu", DefaultBoolean.Default); }
			set {
				if(ShowFilterRowMenu == value) return;
				SetEnumProperty("ShowFilterRowMenu", DefaultBoolean.Default, value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether the filter button is displayed within the current column's header. "),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowHeaderFilter {
			get { return (DefaultBoolean)GetIntProperty("AllowHeaderFilter", (int)DefaultBoolean.Default); }
			set {
				if(AllowHeaderFilter == value) return;
				SetIntProperty("AllowHeaderFilter", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether an end-user can create filter conditions within this column within the Filter Control."),
	   DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean ShowInFilterControl {
			get { return (DefaultBoolean)GetIntProperty("ShowInFilterControl", (int)DefaultBoolean.Default); }
			set {
				if (ShowInFilterControl == value) return;
				SetIntProperty("ShowInFilterControl", (int)DefaultBoolean.Default, (int)value);
				if(Column.Grid != null)
					Column.Grid.OnColumnCollectionChanged();
			}
		}
		[Description("Gets or sets the type of the comparison operator used to create filter conditions for the current column."),
		DefaultValue(AutoFilterCondition.Default), NotifyParentProperty(true)]
		public AutoFilterCondition AutoFilterCondition {
			get { return (AutoFilterCondition)GetIntProperty("AutoFilterCondition", (int)AutoFilterCondition.Default); }
			set {
				if(AutoFilterCondition == value) return;
				SetIntProperty("AutoFilterCondition", (int)AutoFilterCondition.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether end-users can sort data by the column's values."),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowSort {
			get { return (DefaultBoolean)GetIntProperty("AllowSort", (int)DefaultBoolean.Default); }
			set {
				if(AllowSort == value) return;
				SetIntProperty("AllowSort", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether end-users can group data by dragging the column's header to the Group Panel. "),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean AllowGroup {
			get { return (DefaultBoolean)GetIntProperty("AllowGroup", (int)DefaultBoolean.Default); }
			set {
				if(AllowGroup == value) return;
				SetIntProperty("AllowGroup", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		public virtual void Assign(GridViewDataColumnSettings source) {
			if(source == null) return;
			AllowDragDrop = source.AllowDragDrop;
			AllowGroup = source.AllowGroup;
			AllowSort = source.AllowSort;
			AllowAutoFilter = source.AllowAutoFilter;
			AllowHeaderFilter = source.AllowHeaderFilter;
			AutoFilterCondition = source.AutoFilterCondition;
			AllowAutoFilterTextInputTimer = source.AllowAutoFilterTextInputTimer;
			FilterMode = source.FilterMode;
			SortMode = source.SortMode;
			GroupInterval = source.GroupInterval;
			ShowFilterRowMenu = source.ShowFilterRowMenu;
			ShowInFilterControl = source.ShowInFilterControl;
		}
	}
	public enum ASPxColumnCaptionLocation { Default, Near, Top, None };
	[TypeConverter(typeof(ExpandableObjectConverter))]
	public class GridColumnEditFormSettings : StateManager {
		GridViewDataColumn column;
		public GridColumnEditFormSettings(GridViewDataColumn column) {
			this.column = column;
		}
		protected GridViewDataColumn Column { get { return column; } }
		protected void OnChanged() { Column.OnColumnChanged(); }
		[Description("Gets or sets the number of columns in the Edit Form that the cell spans."),
		DefaultValue(0), NotifyParentProperty(true)]
		public int ColumnSpan {
			get { return (int)GetIntProperty("ColumnSpan", 0); }
			set {
				value = Math.Max(0, value);
				if(ColumnSpan == value) return;
				SetIntProperty("ColumnSpan", 0, value);
				OnChanged();
			}
		}
		[Description("Gets or sets the number of rows in the Edit Form that the edit cell spans."),
		DefaultValue(0), NotifyParentProperty(true)]
		public int RowSpan {
			get { return (int)GetIntProperty("RowSpan", 0); }
			set {
				value = Math.Max(0, value);
				if(RowSpan == value) return;
				SetIntProperty("RowSpan", 0, value);
				OnChanged();
			}
		}
		[Description("Gets or sets whether the edit cell that corresponds to the current data column is displayed within the Edit Form."),
		DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true)]
		public DefaultBoolean Visible {
			get { return (DefaultBoolean)GetIntProperty("Visible", (int)DefaultBoolean.Default); }
			set {
				if(Visible == value) return;
				SetIntProperty("Visible", (int)DefaultBoolean.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets the edit cell's position within the Edit Form."),
		DefaultValue(-1), NotifyParentProperty(true)]
		public int VisibleIndex {
			get { return GetIntProperty("VisibleIndex", -1); }
			set {
				value = Math.Max(-1, value);
				if(VisibleIndex == value) return;
				SetIntProperty("VisibleIndex", -1, value);
				OnChanged();
			}
		}
		[Description("Gets or sets the location of the edit cell's caption."),
		DefaultValue(ASPxColumnCaptionLocation.Default), NotifyParentProperty(true)]
		public ASPxColumnCaptionLocation CaptionLocation {
			get { return (ASPxColumnCaptionLocation)GetIntProperty("CaptionLocation", (int)ASPxColumnCaptionLocation.Default); }
			set {
				if(CaptionLocation == value) return;
				SetIntProperty("CaptionLocation", (int)ASPxColumnCaptionLocation.Default, (int)value);
				OnChanged();
			}
		}
		[Description("Gets or sets the edit cell's caption."),
		DefaultValue(""), NotifyParentProperty(true)]
		public string Caption {
			get { return GetStringProperty("Caption", string.Empty); }
			set {
				if(value == null) value = string.Empty;
				if(Caption == value) return;
				SetStringProperty("Caption", string.Empty, value);
				OnChanged();
			}
		}
		public virtual void Assign(GridColumnEditFormSettings source) {
			this.CaptionLocation = source.CaptionLocation;
			this.Caption = Caption;
			this.ColumnSpan = source.ColumnSpan;
			this.RowSpan = source.RowSpan;
			this.Visible = source.Visible;
			this.VisibleIndex = source.VisibleIndex;
		}
	}
	[Editor(typeof(DevExpress.Web.ASPxGridView.Design.GridViewColumnsCollectionEditor), typeof(System.Drawing.Design.UITypeEditor))]
	public class GridViewColumnCollection : WebColumnCollectionBase {
		public GridViewColumnCollection(IWebControlObject webControlObject)
			: base(webControlObject) {
		}
		public override string ToString() { return string.Empty; }
		[Browsable(false)]
		public ASPxGridView Grid { get { return Owner as ASPxGridView; } }
		[Browsable(false)]
		public GridViewColumn this[int index] {
			get { return List[index] as GridViewColumn; }
		}
		[Browsable(false)]
		public GridViewColumn this[string ID_FieldName_Caption] {
			get {
				foreach(GridViewColumn column in this) {
					if(column.Name == ID_FieldName_Caption) return column;
				}
				foreach(GridViewColumn column in this) {
					GridViewDataColumn dataColumn = column as GridViewDataColumn;
					if(dataColumn != null && dataColumn.FieldName == ID_FieldName_Caption) return column;
				}
				foreach(GridViewColumn column in this) {
					if(column.Caption == ID_FieldName_Caption) return column;
				}
				return null;
			}
		}
		protected internal GridViewDataColumn GetDataColumnByStringArg(string arg) {
			return GetColumnByStringArg(arg) as GridViewDataColumn;
		}
		protected internal GridViewColumn GetColumnByStringArg(string arg) {
			int i;
			if(!Int32.TryParse(arg, out i)) {
				return this[arg];
			}
			return i >= 0 && i < Count ? this[i] : null;
		}
		protected IList List { get { return this as IList; } }
		protected override Type GetKnownType() {
			return typeof(GridViewColumn);
		}
		public void Add(GridViewColumn column) {
			List.Add(column);
		}
		public void Insert(int index, GridViewColumn column) {
			List.Insert(index, column);
		}
		public void Remove(GridViewColumn column) {
			List.Remove(column);
		}
		public int IndexOf(GridViewColumn column) {
			return List.IndexOf(column);
		}
		protected override void OnChanged() {
			base.OnChanged();
			Grid.OnColumnCollectionChanged();
		}
		protected override void OnInsertComplete(int index, object value) {
			base.OnInsertComplete(index, value);
			GridViewDataColumn column = value as GridViewDataColumn;
			if(column != null && !column.AutoGenerated) {
				Grid.AutoGenerateColumns = false;
			}
			if(Grid == null || column == null || column.UnboundType == UnboundColumnType.Bound) return;
			Grid.OnColumnBindingChanged(column);
		}
	}
	public enum AutoFilterCondition { Default, BeginsWith, EndsWith, Contains, Equals, Less, LessOrEqual, Greater, GreaterOrEqual, NotEqual }
	public enum ColumnFilterMode { Value, DisplayText }
}
