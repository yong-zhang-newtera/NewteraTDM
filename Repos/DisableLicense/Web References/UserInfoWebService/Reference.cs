//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DisableLicense.UserInfoWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserInfoServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class UserInfoService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsReadOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserRoleMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserRoleMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserEmailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSuperUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateSuperUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSuperUserPasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UserInfoService() {
            this.Url = global::DisableLicense.Properties.Settings.Default.DisableLicense_UserInfoWebService_UserInfoService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsReadOnlyCompletedEventHandler IsReadOnlyCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event GetRolesCompletedEventHandler GetRolesCompleted;
        
        /// <remarks/>
        public event GetAllRolesCompletedEventHandler GetAllRolesCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event ChangeUserPasswordCompletedEventHandler ChangeUserPasswordCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event AddRoleCompletedEventHandler AddRoleCompleted;
        
        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;
        
        /// <remarks/>
        public event AddUserRoleMappingCompletedEventHandler AddUserRoleMappingCompleted;
        
        /// <remarks/>
        public event DeleteUserRoleMappingCompletedEventHandler DeleteUserRoleMappingCompleted;
        
        /// <remarks/>
        public event GetUserEmailsCompletedEventHandler GetUserEmailsCompleted;
        
        /// <remarks/>
        public event GetSuperUserNameCompletedEventHandler GetSuperUserNameCompleted;
        
        /// <remarks/>
        public event AuthenticateSuperUserCompletedEventHandler AuthenticateSuperUserCompleted;
        
        /// <remarks/>
        public event ChangeSuperUserPasswordCompletedEventHandler ChangeSuperUserPasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsReadOnly", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsReadOnly() {
            object[] results = this.Invoke("IsReadOnly", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsReadOnlyAsync() {
            this.IsReadOnlyAsync(null);
        }
        
        /// <remarks/>
        public void IsReadOnlyAsync(object userState) {
            if ((this.IsReadOnlyOperationCompleted == null)) {
                this.IsReadOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsReadOnlyOperationCompleted);
            }
            this.InvokeAsync("IsReadOnly", new object[0], this.IsReadOnlyOperationCompleted, userState);
        }
        
        private void OnIsReadOnlyOperationCompleted(object arg) {
            if ((this.IsReadOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsReadOnlyCompleted(this, new IsReadOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/Authenticate", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string name, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        name,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string name, string password) {
            this.AuthenticateAsync(name, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string name, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        name,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetRoles", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRoles(string name) {
            object[] results = this.Invoke("GetRoles", new object[] {
                        name});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesAsync(string name) {
            this.GetRolesAsync(name, null);
        }
        
        /// <remarks/>
        public void GetRolesAsync(string name, object userState) {
            if ((this.GetRolesOperationCompleted == null)) {
                this.GetRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesOperationCompleted);
            }
            this.InvokeAsync("GetRoles", new object[] {
                        name}, this.GetRolesOperationCompleted, userState);
        }
        
        private void OnGetRolesOperationCompleted(object arg) {
            if ((this.GetRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesCompleted(this, new GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAllRoles", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAllRoles() {
            object[] results = this.Invoke("GetAllRoles", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRolesAsync() {
            this.GetAllRolesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(object userState) {
            if ((this.GetAllRolesOperationCompleted == null)) {
                this.GetAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllRoles", new object[0], this.GetAllRolesOperationCompleted, userState);
        }
        
        private void OnGetAllRolesOperationCompleted(object arg) {
            if ((this.GetAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetUsers", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUsers(string role) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        role});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(string role) {
            this.GetUsersAsync(role, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(string role, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        role}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAllUsers", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAllUsers() {
            object[] results = this.Invoke("GetAllUsers", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(object userState) {
            if ((this.GetAllUsersOperationCompleted == null)) {
                this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllUsers", new object[0], this.GetAllUsersOperationCompleted, userState);
        }
        
        private void OnGetAllUsersOperationCompleted(object arg) {
            if ((this.GetAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddUser", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUser(string userName, string password) {
            this.Invoke("AddUser", new object[] {
                        userName,
                        password});
        }
        
        /// <remarks/>
        public void AddUserAsync(string userName, string password) {
            this.AddUserAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string userName, string password, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        userName,
                        password}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ChangeUserPassword", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeUserPassword(string userName, string oldPassword, string newPassword) {
            this.Invoke("ChangeUserPassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword});
        }
        
        /// <remarks/>
        public void ChangeUserPasswordAsync(string userName, string oldPassword, string newPassword) {
            this.ChangeUserPasswordAsync(userName, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeUserPasswordAsync(string userName, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeUserPasswordOperationCompleted == null)) {
                this.ChangeUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeUserPassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword}, this.ChangeUserPasswordOperationCompleted, userState);
        }
        
        private void OnChangeUserPasswordOperationCompleted(object arg) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteUser", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string userName) {
            this.Invoke("DeleteUser", new object[] {
                        userName});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string userName) {
            this.DeleteUserAsync(userName, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string userName, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        userName}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddRole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRole(string roleName) {
            this.Invoke("AddRole", new object[] {
                        roleName});
        }
        
        /// <remarks/>
        public void AddRoleAsync(string roleName) {
            this.AddRoleAsync(roleName, null);
        }
        
        /// <remarks/>
        public void AddRoleAsync(string roleName, object userState) {
            if ((this.AddRoleOperationCompleted == null)) {
                this.AddRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoleOperationCompleted);
            }
            this.InvokeAsync("AddRole", new object[] {
                        roleName}, this.AddRoleOperationCompleted, userState);
        }
        
        private void OnAddRoleOperationCompleted(object arg) {
            if ((this.AddRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteRole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRole(string roleName) {
            this.Invoke("DeleteRole", new object[] {
                        roleName});
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string roleName) {
            this.DeleteRoleAsync(roleName, null);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string roleName, object userState) {
            if ((this.DeleteRoleOperationCompleted == null)) {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        roleName}, this.DeleteRoleOperationCompleted, userState);
        }
        
        private void OnDeleteRoleOperationCompleted(object arg) {
            if ((this.DeleteRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddUserRoleMapping", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserRoleMapping(string userName, string roleName) {
            this.Invoke("AddUserRoleMapping", new object[] {
                        userName,
                        roleName});
        }
        
        /// <remarks/>
        public void AddUserRoleMappingAsync(string userName, string roleName) {
            this.AddUserRoleMappingAsync(userName, roleName, null);
        }
        
        /// <remarks/>
        public void AddUserRoleMappingAsync(string userName, string roleName, object userState) {
            if ((this.AddUserRoleMappingOperationCompleted == null)) {
                this.AddUserRoleMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserRoleMappingOperationCompleted);
            }
            this.InvokeAsync("AddUserRoleMapping", new object[] {
                        userName,
                        roleName}, this.AddUserRoleMappingOperationCompleted, userState);
        }
        
        private void OnAddUserRoleMappingOperationCompleted(object arg) {
            if ((this.AddUserRoleMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserRoleMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteUserRoleMapping", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserRoleMapping(string userName, string roleName) {
            this.Invoke("DeleteUserRoleMapping", new object[] {
                        userName,
                        roleName});
        }
        
        /// <remarks/>
        public void DeleteUserRoleMappingAsync(string userName, string roleName) {
            this.DeleteUserRoleMappingAsync(userName, roleName, null);
        }
        
        /// <remarks/>
        public void DeleteUserRoleMappingAsync(string userName, string roleName, object userState) {
            if ((this.DeleteUserRoleMappingOperationCompleted == null)) {
                this.DeleteUserRoleMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserRoleMappingOperationCompleted);
            }
            this.InvokeAsync("DeleteUserRoleMapping", new object[] {
                        userName,
                        roleName}, this.DeleteUserRoleMappingOperationCompleted, userState);
        }
        
        private void OnDeleteUserRoleMappingOperationCompleted(object arg) {
            if ((this.DeleteUserRoleMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserRoleMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetUserEmails", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserEmails(string userName) {
            object[] results = this.Invoke("GetUserEmails", new object[] {
                        userName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserEmailsAsync(string userName) {
            this.GetUserEmailsAsync(userName, null);
        }
        
        /// <remarks/>
        public void GetUserEmailsAsync(string userName, object userState) {
            if ((this.GetUserEmailsOperationCompleted == null)) {
                this.GetUserEmailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserEmailsOperationCompleted);
            }
            this.InvokeAsync("GetUserEmails", new object[] {
                        userName}, this.GetUserEmailsOperationCompleted, userState);
        }
        
        private void OnGetUserEmailsOperationCompleted(object arg) {
            if ((this.GetUserEmailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserEmailsCompleted(this, new GetUserEmailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSuperUserName", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSuperUserName() {
            object[] results = this.Invoke("GetSuperUserName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSuperUserNameAsync() {
            this.GetSuperUserNameAsync(null);
        }
        
        /// <remarks/>
        public void GetSuperUserNameAsync(object userState) {
            if ((this.GetSuperUserNameOperationCompleted == null)) {
                this.GetSuperUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSuperUserNameOperationCompleted);
            }
            this.InvokeAsync("GetSuperUserName", new object[0], this.GetSuperUserNameOperationCompleted, userState);
        }
        
        private void OnGetSuperUserNameOperationCompleted(object arg) {
            if ((this.GetSuperUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSuperUserNameCompleted(this, new GetSuperUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AuthenticateSuperUser", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuthenticateSuperUser(string userName, string password) {
            object[] results = this.Invoke("AuthenticateSuperUser", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateSuperUserAsync(string userName, string password) {
            this.AuthenticateSuperUserAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateSuperUserAsync(string userName, string password, object userState) {
            if ((this.AuthenticateSuperUserOperationCompleted == null)) {
                this.AuthenticateSuperUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateSuperUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateSuperUser", new object[] {
                        userName,
                        password}, this.AuthenticateSuperUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateSuperUserOperationCompleted(object arg) {
            if ((this.AuthenticateSuperUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateSuperUserCompleted(this, new AuthenticateSuperUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ChangeSuperUserPassword", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeSuperUserPassword(string userName, string oldPassword, string newPassword) {
            this.Invoke("ChangeSuperUserPassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword});
        }
        
        /// <remarks/>
        public void ChangeSuperUserPasswordAsync(string userName, string oldPassword, string newPassword) {
            this.ChangeSuperUserPasswordAsync(userName, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeSuperUserPasswordAsync(string userName, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeSuperUserPasswordOperationCompleted == null)) {
                this.ChangeSuperUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSuperUserPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeSuperUserPassword", new object[] {
                        userName,
                        oldPassword,
                        newPassword}, this.ChangeSuperUserPasswordOperationCompleted, userState);
        }
        
        private void OnChangeSuperUserPasswordOperationCompleted(object arg) {
            if ((this.ChangeSuperUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSuperUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void IsReadOnlyCompletedEventHandler(object sender, IsReadOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsReadOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsReadOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetRolesCompletedEventHandler(object sender, GetRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetAllRolesCompletedEventHandler(object sender, GetAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void AddUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ChangeUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void AddRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void AddUserRoleMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DeleteUserRoleMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetUserEmailsCompletedEventHandler(object sender, GetUserEmailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserEmailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserEmailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSuperUserNameCompletedEventHandler(object sender, GetSuperUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSuperUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSuperUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void AuthenticateSuperUserCompletedEventHandler(object sender, AuthenticateSuperUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateSuperUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateSuperUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void ChangeSuperUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591