<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newtera.Common</name>
    </assembly>
    <members>
        <member name="T:Newtera.Common.Attachment.AttachmentInfoCollection">
            <summary>
            An object collection class to handle IAttachmentInfo when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 08 Jan 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.Attachment.IAttachmentInfo">
            <summary>
            Represents a common interface for the attachment info.
            </summary>
            <version>  	1.0.0 08 Jan 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.Attachment.IAttachmentInfo.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.Attachment.IAttachmentInfo.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.Attachment.IAttachmentInfo.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.#ctor">
            <summary>
             Initializes a new instance of the AttachmentInfoCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of AttachmentInfoCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Add(Newtera.Common.Attachment.IAttachmentInfo)">
            <summary>
            Adds an IAttachmentInfo to the AttachmentInfoCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.IndexOf(Newtera.Common.Attachment.IAttachmentInfo)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Insert(System.Int32,Newtera.Common.Attachment.IAttachmentInfo)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Remove(Newtera.Common.Attachment.IAttachmentInfo)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Contains(Newtera.Common.Attachment.IAttachmentInfo)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Read(System.String)">
            <summary>
            Constrauct a attachment info collection from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Read(System.IO.Stream)">
            <summary>
            Constrauct a attachment info from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            read the stream
            </exception>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Read(System.IO.TextReader)">
            <summary>
            Constrauct a attachment info from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            read the text reader
            </exception>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Write(System.String)">
            <summary>
            Write the attachment info to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            write to the file.
            </exception> 
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Write(System.IO.Stream)">
            <summary>
            Write the data view as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Write(System.IO.TextWriter)">
            <summary>
            Write the data view as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.Attachment.AttachmentException">AttachmentException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfoCollection.GetXmlDocument">
            <summary>
            Gets the xml document that represents the attachment infos
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfoCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member using attribute index
            </summary>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfoCollection.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.Attachment.AttachmentException">
            <summary> 
            The AttachmentException class is the default exception type for attachemnt
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 08 Jan 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.Core.NewteraException">
            <summary>
            Provides the base functionality for exceptions in Newtera Namespace
            </summary>
            <version>      1.0.0 2 JUL 2003
            </version>
            <author> Yong Zhang </author>
            <example>
            
            class ExceptionTestClass 
            {
            	public static void Main() 
            	{
            		try 
            		{
            			// do something;
            		}
            		catch (NewteraException e) 
            		{
            			// display localized message
            			Console.WriteLine(e.LocalizedMessage);
            		}
            		catch (Exception e) 
            		{
            			// display unlocalized error message
            			Console.WriteLine(e.Message);
            		}
            	}    
            }
            </example>
        </member>
        <member name="M:Newtera.Common.Core.NewteraException.#ctor(System.String)">
            <summary>
            Initializing a NewteraException object.
            </summary>
            <param name="reason">a description of the exception.</param>
        </member>
        <member name="M:Newtera.Common.Core.NewteraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializing a NewteraException object.
            </summary>
            <param name="reason">a description of the exception</param>
            <param name="ex">the root cause exception</param>
        </member>
        <member name="M:Newtera.Common.Core.NewteraException.GetFormatedLocalizedMessage(System.Object[])">
            <summary>
            Sets the localized error message with the arguments in the message
            replaced by provided argument values.
            </summary>
            <param name="arguments">Array of arguments. arguments[n] 
            corresponds to {n} in the resource bundle message template.
            </param>
            <returns>The formated message</returns>
            <example>
            <code>
            try
            {
            	Login(dbName, usrName, passwd);
            }
            catch (InvalidUserNameException ex)
            {
            	string localizedMsg = ex.GetFormatedLocalizedMessage(dbName, usrName);
            	Console.WriteLine(localizedMsg);
            }
            </code>
            Message before formatting:
            
            User {0} does not have an account for DB {1}
            
            Message after formatting:
            
            User David does not have an account for DB ABC
            </example>
        </member>
        <member name="P:Newtera.Common.Core.NewteraException.LocalizedMessage">
            <summary>
            Gets or sets a localized error message for the exception.
            </summary>
            <value> The localized message. The default is what returned from Message property</value>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentException.#ctor(System.String)">
            <summary> 
            Constructor of a AttachmentException without an object
            </summary>
            <param name="reason">a description of the exception </param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception</param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.Attachment.AttachmentInfo">
            <summary> 
            The base class for all xacl node classes
            </summary>
            <version> 1.0.0 07 Jan 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfo.#ctor">
            <summary>
            Initiate an instance of AttachmentInfo class
            </summary>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of AttachmentInfo class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfo.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.Attachment.AttachmentInfo.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.ID">
            <summary>
            Gets or sets the unique id of an attachment.
            </summary>
            <value>The id of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.InstanceId">
            <summary>
            Gets or sets the id of an instance to which the attachment belongs.
            </summary>
            <value>The id of an instance</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.ClassName">
            <summary>
            Gets or sets the name of instance's class.
            </summary>
            <value>The name of a class</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.Name">
            <summary>
            Gets or sets the name of an attachment.
            </summary>
            <value>The name of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.Size">
            <summary>
            Gets or sets the size of an attachment.
            </summary>
            <value>The size of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.Type">
            <summary>
            Gets or sets the type of an attachment.
            </summary>
            <value>The type of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.Description">
            <summary>
            Gets or sets the description of an attachment.
            </summary>
            <value>The description of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.CreateTime">
            <summary>
            Gets or sets the created time of an attachment.
            </summary>
            <value>A DateTime object</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.IsPublic">
            <summary>
            Gets or sets the information indicating whether the attachment is public or not.
            </summary>
            <value>True if the attachment is public, false is the private. The default is true.</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.Suffix">
            <summary>
            Gets or sets the suffix of an attachment.
            </summary>
            <value>The suffix of an attachment</value>
        </member>
        <member name="P:Newtera.Common.Attachment.AttachmentInfo.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.Attachment.NodeFactory">
            <summary>
            A singleton class that creates an instance of IAttachmentInfo based on a xml element
            </summary>
            <version>1.0.0 08 Jan 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.Attachment.NodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.Attachment.NodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.Attachment.NodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IAttachmentInfo type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IAttachmentInfo instance</returns>
        </member>
        <member name="M:Newtera.Common.Attachment.NodeFactory.ConvertTypeToString(Newtera.Common.Attachment.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.Attachment.NodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.Attachment.NodeFactory.Instance">
            <summary>
            Gets the NodeFactory instance.
            </summary>
            <returns> The NodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.Attachment.NodeType">
            <summary>
            Specify the types of nodes in attachment
            </summary>
        </member>
        <member name="F:Newtera.Common.Attachment.NodeType.Unknown">
            <summary>
            The Unknown node type
            </summary>
        </member>
        <member name="F:Newtera.Common.Attachment.NodeType.Collection">
            <summary>
            The attachment collection node
            </summary>
        </member>
        <member name="F:Newtera.Common.Attachment.NodeType.Attachment">
            <summary>
            The attachemnt node.
            </summary>
        </member>
        <member name="T:Newtera.Common.Config.AppConfig">
            <summary> 
            A class that reads/writes the AppSettings of an application's configuration file.
            </summary>
            <version> 1.0.0 30 Jan 2004 </version>
            <author> Yong Zhang </author>
            <remarks>
            Since System.Configuration provided by .net framework is read-only,
            this class provides the write ability to an application's config file.
            </remarks>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.#ctor">
            <summary>
            Initiate an instance of AppConfig
            </summary>
            <remarks>It will locate the config file automatically</remarks>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.#ctor(System.String)">
            <summary>
            Initiate an instance of AppConfig
            </summary>
            <param name="filePath">The config file path.</param>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.GetConfig(System.String)">
            <summary>
            Gets the configurations of a given section
            </summary>
            <param name="section">The section name</param>
            <returns>A ConfigKeyValueCollection instance</returns>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.GetAppSetting(System.String)">
            <summary>
            Gets value of an app setting of a given key
            </summary>
            <param name="key">The key</param>
            <returns>The value of the given key, null if the key does not exists.</returns>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.SetAppSetting(System.String,System.String)">
            <summary>
            Sets an AppSetting value of a given key
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.GetSetting(System.String,System.String)">
            <summary>
            Gets value of a given key in a given section
            </summary>
            <param name="section">The section</param>
            <param name="key">The key</param>
            <returns>The value of the given key, null if the key does not exists.</returns>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.SetSetting(System.String,System.String,System.String)">
            <summary>
            Sets a value of a given key in a given section.
            </summary>
            <param name="section">The section</param>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Newtera.Common.Config.AppConfig.Flush">
            <summary>
            Flush the changes to app settings by writing them back to
            the config file
            </summary>
        </member>
        <member name="T:Newtera.Common.Config.ConfigKeyValueCollection">
            <summary> 
            A writable key/value collection for config
            </summary>
            <version> 1.0.0 03 Dec 2005 </version>
            <author>Yong Zhang</author>
            <remarks>
            Since NameValueCollection generated by ConfigurationSettings is read only
            we provide this writable version.
            </remarks>
        </member>
        <member name="M:Newtera.Common.Config.ConfigKeyValueCollection.#ctor">
            <summary>
            Initiate an instance of ConfigKeyValueCollection
            </summary>
            <remarks>It will locate the config file automatically</remarks>
        </member>
        <member name="T:Newtera.Common.Core.LocaleInfo">
            <summary>
            A singleton class that provide localized version of key word and date/time
            formats
            </summary>
            <version>  1.0.0 14 Nov 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.Core.LocaleInfo.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.Core.LocaleInfo.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.Instance">
            <summary>
            Gets the LocaleInfo instance.
            </summary>
            <returns> The LocaleInfo instance.</returns>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.None">
            <summary>
            Gets the Localized None word
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.True">
            <summary>
            Gets the localized true word
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.False">
            <summary>
            Gets localized false word
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.DateFormat">
            <summary>
            Gets localized Date Format.
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.TimeFormat">
            <summary>
            Gets localized Time format.
            </summary>
        </member>
        <member name="P:Newtera.Common.Core.LocaleInfo.DateTimeFormat">
            <summary>
            Gets localized Data and Time format
            </summary>
        </member>
        <member name="T:Newtera.Common.Core.LocalizedMessageStore">
            <summary>
            Provides methods to retrieve a localized message base on an exception type
            </summary>
            <version>      1.0.0 02 JUL 2003
            </version>
            <author> Yong Zhang </author>
            <remarks>This class is implemented as singleton</remarks>
        </member>
        <member name="F:Newtera.Common.Core.LocalizedMessageStore.theLocalizedMessageStore">
            Singleton's private instance.
        </member>
        <member name="M:Newtera.Common.Core.LocalizedMessageStore.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.Core.LocalizedMessageStore.GetLocalizedError(System.Exception)">
            <summary>
            Using the default culture to get localized message for the given exception.
            </summary>
            <param name="ex">The exception</param>
            <returns> The localized error message.</returns>
        </member>
        <member name="M:Newtera.Common.Core.LocalizedMessageStore.GetLocalizedError(System.Exception,System.Globalization.CultureInfo)">
            <summary>
            Using a specific culture to get localized message for the given exception.
            </summary>
            <param name="ex">The exception</param>
            <param name="culture">The culture</param>
            <returns> The localized error message.</returns>
        </member>
        <member name="M:Newtera.Common.Core.LocalizedMessageStore.GetLocalizedError(System.Exception,System.Object[])">
            <summary>
            Using default culture to get localized message for the exception.
            Replaces the variables with the auguments.
            </summary>
            <param name="ex">The exception</param>
            <param name="args">The arguments</param>
            <returns> The localized error message.</returns>
        </member>
        <member name="M:Newtera.Common.Core.LocalizedMessageStore.GetLocalizedError(System.Exception,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Using a specific culture to get localized message for the exception.
            Replaces the variables with the auguments.
            </summary>
            <param name="ex">The exception</param>
            <param name="culture">The culture info</param>
            <param name="args">The arguments containing user messages.</param>
            <returns> The localized error message.</returns>
        </member>
        <member name="P:Newtera.Common.Core.LocalizedMessageStore.TheInstance">
            <summary>
            Gets the LocalizedMessageStore instance
            </summary>
            <value>The single LocalizedMessageStore instance</value>
        </member>
        <member name="T:Newtera.Common.Core.NewteraNameSpace">
            <summary>
            The NewteraNameSpace class is a centralized place where keywords belong to 
            Newtera name space are defined as constants. Application will refer to the 
            constants rather than directly to the keywords. Therefore, if any changes 
            of keywords in Newtera name space won't affect the application code.
            </summary>
            <version>      1.0.0 26 Jun 2003
            </version>
            <author>       Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.RELEASE_VERSION">
            <summary>
            The software release version, which needs to be updated for each release
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.OBJ_ID">
            <summary>
            The constant definition representing the database column name for
            internally created obj id.
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.CM_SUPER_USER_ROLE">
            <summary>
            The constant definition representing the CM super user role
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.TYPE">
            <summary>
            The constant definition representing the TYPE keyword
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.LIST_SUFFIX">
            <summary>
            The constant definition representing suffix of a List keyword
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.ATTACHMENTS">
            <summary>
            The constant definition representing attachment keyword
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.PERMISSION">
            <summary>
            The constant definition representing permission keyword
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.OBJ_ID_ATTRIBUTE">
            <summary>
            The object id xsd:attribute element's name
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.CM_ROOT_TABLE">
            <summary>
            The constant definition representing the name of root table
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.DESIGN_STUDIO_NAME">
            <summary>
            The short name for Design Studio client
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.LICENSE_KEY">
            <summary>
            LICENSE_KEY definition for Web.Config
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.NewteraNameSpace.COMPUTER_CHECKSUM">
            <summary>
            The computer checksum
            </summary>
        </member>
        <member name="M:Newtera.Common.Core.NewteraNameSpace.GetAppHomeDir">
            <summary>
            Gets the base directory where the application resides
            </summary>
            <returns>An absulute directory</returns>
        </member>
        <member name="M:Newtera.Common.Core.NewteraNameSpace.GetSystemProductID">
            <summary>
            Gets the unique Product ID of Windows OS
            </summary>
            <returns>An unique id</returns>
        </member>
        <member name="P:Newtera.Common.Core.NewteraNameSpace.ComputerCheckSum">
            <summary>
            Get an unique checksum for the current computer
            </summary>
        </member>
        <member name="T:Newtera.Common.Core.SchemaInfo">
            <summary>
            The parameters of a schema .
            </summary>
            <version> 	1.0.0	15 Jul 2003 </version>
            <author> 	Yong Zhang </author>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfo.ID">
            <summary>
            Gets or sets id of the schema
            </summary>
            <value> The id of the schema.</value>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfo.Name">
            <summary>
            Gets or sets name of the schema
            </summary>
            <value> The name of the schema.</value>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfo.Version">
            <summary>
            Gets or sets version of the schema
            </summary>
            <value> The version of the schema.</value>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfo.NameAndVersion">
            <summary>
            Gets Name and Version of the schema
            </summary>
            <value> The name and version of the schema.</value>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfo.Description">
            <summary>
            Gets or sets description of the schema
            </summary>
            <value> The id of the schema.</value>
        </member>
        <member name="T:Newtera.Common.Core.SchemaInfoCollection">
            <summary>
            An object collection class to handle SchemaInfo when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 17 Mar 2005 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.#ctor">
            <summary>
             Initializes a new instance of the SchemaInfoCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.Add(Newtera.Common.Core.SchemaInfo)">
            <summary>
            Adds an SchemaInfo to the SchemaInfoCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.AddRange(Newtera.Common.Core.SchemaInfoCollection)">
            <summary>
            Adds the elements of a SchemaInfoCollection to the end of the SchemaInfoCollection.
            </summary>
            <param name="collection">The SchemaInfoCollection whose elements should be added to the end of the SchemaInfoCollection</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.IndexOf(Newtera.Common.Core.SchemaInfo)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.Insert(System.Int32,Newtera.Common.Core.SchemaInfo)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.Remove(Newtera.Common.Core.SchemaInfo)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.RemoveNodeAt(System.Int32)">
            <summary>
            removes the a specific object at the given index from the collection
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.Contains(Newtera.Common.Core.SchemaInfo)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.Core.SchemaInfoCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Newtera.Common.Core.SchemaInfoCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.Core.XMLSchemaInstanceNameSpace">
            <summary>
            The XMLSchemaInstanceNameSpace class is a centralized place where keywords belong 
            to XML Schema instance name space are defined as constants. Application will refer 
            to the constants rather than directly to the keywords. Therefore, if any 
            changes of keywords in XML Schema name space won't affect the application 
            code.
            </summary>
            <version>  	1.0.0 29 Jul 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.Core.XMLSchemaInstanceNameSpace.TYPE">
            <summary>
            XMLSchemaInstanceNameSpace.TYPE
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.XMLSchemaInstanceNameSpace.NIL">
            <summary>
            XMLSchemaInstanceNameSpace.NIL
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.XMLSchemaInstanceNameSpace.PREFIX">
            <summary>
            XMLSchemaInstanceNameSpace.PREFIX
            </summary>
        </member>
        <member name="F:Newtera.Common.Core.XMLSchemaInstanceNameSpace.URI">
            <summary>
            XMLSchemaInstanceNameSpace.URI
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayEditElement">
            <summary>
            Represents an element for DataArrayAttribute appeared in InlinedXml clause
            for editing purpose.
            </summary>
            <version>  	1.0.0 11 Aug 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementBase">
            <summary>
            Represents a base class for all other IQueryElement subclasses.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.IQueryElement">
            <summary>
            Represents an interface for all elements in XQuery
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IQueryElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ICompositQueryElement">
            <summary>
            Represents an interface for all composit elements in XQuery,
            such as for clause, let clause, etc.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.ICompositQueryElement.Children">
            <summary>
            Gets the child elements of the element
            </summary>
            <value>A Parent element</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementBase.#ctor">
            <summary>
            Initiating an instance of QueryElementBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementBase.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementBase.EscapeChars(System.String)">
            <summary>
            Escape special chars that are contained in the edit value and disallowed
            in an xml
            </summary>
            <param name="orig">Original</param>
            <returns>Escaped string</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementBase.Children">
            <summary>
            Gets or sets the child elements of the element
            </summary>
            <value>A Parent element</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayEditElement.#ctor(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Initiating an instance of ArrayEditElement class
            </summary>
            <param name="simpleAttribute">The simple attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayEditElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayResultElement">
            <summary>
            Represents a root xml element in return clause of a XQuery.
            </summary>
            <version>  	1.0.0 11 Aug 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayResultElement.#ctor(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Initiating an instance of ArrayResultElement class
            </summary>
            <param name="arrayAttribute">The array attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ArrayResultElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.BaseClassElement">
            <summary>
            Represents a root xml element in return clause of a XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.BaseClassElement.#ctor(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Initiating an instance of BaseClassElement class
            </summary>
            <param name="baseClass">The base class of a data view</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.BaseClassElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor">
            <summary>
            Represents a DataView visitor that generates a XQuery for deleting an instance
            to database
            </summary>
            <version> 1.0.0 11 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.EditInstanceVisitorBase">
            <summary>
            Provide common utility for other editing instance related visitors
            </summary>
            <version> 1.0.0 12 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.EditInstanceVisitorBase.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiate an instance of EditInstanceVisitorBase class
            </summary>
            <param name="dataView">The data view</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.EditInstanceVisitorBase.BuildInlinedXmlClause(System.String)">
            <summary>
            Build an inlined xml clause for a delete XQuery
            </summary>
            <returns>An IQueryElement</returns>
            <param name="objId">The id of an instance to be updated</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.EditInstanceVisitorBase.BuildReturnClause(Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionType)">
            <summary>
            Build a return clause for a delete XQuery
            </summary>
            <param name="type">The type of an edit built-in function</param>
            <returns>An IQueryElement</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.IDataViewElementVisitor">
            <summary>
            Represents an interface for visitors that traverse elements in a data view model.
            </summary>
            <version> 1.0.0 28 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Visite a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Begin visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElementVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.String)">
            <summary>
            Initiate an instance of DeleteVisitor class
            </summary>
            <param name="dataView">The data view</param>
            <param name="objId">The id of an instance to be updated.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.DeleteVisitor.XQueryStatement">
            <summary>
            Gets the xquery built by the visitor
            </summary>
            <value>A XQuery for delete</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionClause">
            <summary>
            Represents a clause of edit-related builtin function calls.
            </summary>
            <version>  	1.0.0 11 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionClause.#ctor(Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionType,System.String,System.String,System.String)">
            <summary>
            Initiating an instance of EditFunctionClause class
            </summary>
            <param name="functionType">One of the EditFunctionType enum values</param>
            <param name="alias">The unique alias of a class</param>
            <param name="schemaName">The schema name</param>
            <param name="schemaVersion">The schema version</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.EditFunctionType">
            <summary>
            Specify the types of edit-related builtin functions
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ForClause">
            <summary>
            Represents a For clause element in XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ForClause.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initiating an instance of ForClause class
            </summary>
            <param name="alias">The unique alias of a class</param>
            <param name="className">The class name</param>
            <param name="schemaName">The schema name</param>
            <param name="schemaVersion">The schema version</param>
            <param name="from">Start from</param>
            <param name="to">To</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ForClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlAttribute">
            <summary>
            Represents an attribute inside an Inlined xml tag.
            </summary>
            <version>  	1.0.0 10 Mar 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlAttribute.#ctor(System.String,System.String)">
            <summary>
            Initiating an instance of InlinedXmlAttribute class
            </summary>
            <param name="name">The name of attribute</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlAttribute.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlClause">
            <summary>
            Represents a clause of edit-related builtin function calls.
            </summary>
            <version>  	1.0.0 11 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlClause.#ctor(System.String,System.String,System.String)">
            <summary>
            Initiating an instance of InlinedXmlClause class
            </summary>
            <param name="alias">The unique alias of a class</param>
            <param name="classType">The class type</param>
            <param name="rootClassType">The root class type</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlClause.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initiating an instance of InlinedXmlClause class
            </summary>
            <param name="alias">The unique alias of a class</param>
            <param name="classType">The class type</param>
            <param name="rootClassType">The root class type</param>
            <param name="objId">The id of an instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlClause.AddAttribute(Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlAttribute)">
            <summary>
            Add an attribute to the root tag of the inlined xml instance
            </summary>
            <param name="attribute">An InlinedXmlAttribute object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InlinedXmlClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor">
            <summary>
            Represents a DataView visitor that generates a XQuery for inserting an instance
            to database
            </summary>
            <version> 1.0.0 11 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiate an instance of InsertVisitor class
            </summary>
            <param name="dataView">The data view</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.InsertVisitor.XQueryStatement">
            <summary>
            Gets the xquery built by the visitor
            </summary>
            <value>A XQuery for insert</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.LetClause">
            <summary>
            Represents a For clause element in XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.LetClause.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initiating an instance of LetClause class
            </summary>
            <param name="alias">The unique alias of a referenced class</param>
            <param name="className">The refenced class name</param>
            <param name="parentClassAlias">The parent class alias</param>
            <param name="parentRelationship">The name of parent relationship attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.LetClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor">
            <summary>
            Represents a DataView visitor that prepare the data view for query
            generation. For example, determine which referenced classes will be required
            in a query. Including referenced classes that are not used in a query will
            impact query performance. 
            </summary>
            <version> 1.0.0 06 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.Boolean)">
            <summary>
            Initiate an instance of PrepareVisitor class
            </summary>
            <param name="dataView"></param>
            <param name="includePrimaryKeys">Value to indicate whether to include
            primary key values as part of search result for relationship attributes</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.PrepareVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection">
            <summary>
            An object collection class to handle IQueryElement when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 28 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.#ctor">
            <summary>
             Initializes a new instance of the QueryElementCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.Add(Newtera.Common.MetaData.DataView.IQueryElement)">
            <summary>
            Adds an IQueryElement to the DataViewElementCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.IndexOf(Newtera.Common.MetaData.DataView.IQueryElement)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.Insert(System.Int32,Newtera.Common.MetaData.DataView.IQueryElement)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.Remove(Newtera.Common.MetaData.DataView.IQueryElement)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.Contains(Newtera.Common.MetaData.DataView.IQueryElement)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.QueryElementCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipEditElement">
            <summary>
            Represents an element for DataRelationshipAttribute appeared in InlinedXml clause
            for editing purpose.
            </summary>
            <version>  	1.0.0 11 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipEditElement.#ctor(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Initiating an instance of RelationshipEditElement class
            </summary>
            <param name="relationshipAttribute">The relationship attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipEditElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement">
            <summary>
            Represents a root xml element in return clause of a XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement.#ctor(Newtera.Common.MetaData.DataView.DataRelationshipAttribute,System.Boolean)">
            <summary>
            Initiating an instance of RelationshipResultElement class
            </summary>
            <param name="relationshipAttribute">The base class of a data view</param>
            <param name="includePrimaryKeys">Value to indicate whether to include
            primary key values as part of search result for relationship attributes</param> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement.AddObjIdElement(System.Text.StringBuilder)">
            <summary>
            Add objId element as child element of a relationship element to avoid
            joining with linked classes
            </summary>
            <param name="query">query</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement.AddPrimaryKeyElements(System.Text.StringBuilder)">
            <summary>
            Add primary element(s) as child element of a relationship element. This is
            required when getting an instance for editing purpose.
            </summary>
            <param name="query">query</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.RelationshipResultElement.IsForeignKeyRequired">
            <summary>
            Gets or sets the information indicating if a foreign key column is
            created for the relationship. This is used to determine the xquery syntax
            generated for the relationship attribute. The value needs to be set by
            the result visitor.
            </summary>
            <value>True if a foreign key is required, false otherwise</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor">
            <summary>
            Represents a DataView visitor that generates a result part of a XQuery. 
            </summary>
            <version> 1.0.0 30 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.Boolean)">
            <summary>
            Initiate an instance of ResultVisitor class
            </summary>
            <param name="dataView">The data view</param>
            <param name="includePrimaryKeys">Value to indicate whether to include
            primary key values as part of search result for relationship attributes</param> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.ResultVisitor.ReturnClause">
            <summary>
            Gets the return clause built by the visitor
            </summary>
            <value>A return clause</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.ReturnClause">
            <summary>
            Represents a return clause element in XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ReturnClause.#ctor">
            <summary>
            Initiating an instance of ReturnClause class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.ReturnClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor">
            <summary>
            Represents a DataView visitor that generates a search part of a XQuery. 
            </summary>
            <version> 1.0.0 30 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiate an instance of SearchVisitor class
            </summary>
            <param name="dataView"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.SearchVisitor.XQueryStatement">
            <summary>
            Gets the XQuery statement built by the visitor
            </summary>
            <value>A XQuery statement</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleEditElement">
            <summary>
            Represents an element for DataSimpleAttribute appeared in InlinedXml clause
            for editing purpose.
            </summary>
            <version>  	1.0.0 11 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleEditElement.#ctor(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Initiating an instance of SimpleEditElement class
            </summary>
            <param name="simpleAttribute">The simple attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleEditElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleResultElement">
            <summary>
            Represents a root xml element in return clause of a XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleResultElement.#ctor(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Initiating an instance of SimpleResultElement class
            </summary>
            <param name="simpleAttribute">The attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.SimpleResultElement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor">
            <summary>
            Represents a DataView visitor that generates a XQuery for updating referenced
            obj_id(s) of an instance.
            </summary>
            <version> 1.0.0 27 Apr 2005 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Initiate an instance of UpdateReferencesVisitor class
            </summary>
            <param name="dataView">The data view</param>
            <param name="instanceData">The instance data.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateReferencesVisitor.XQueryStatement">
            <summary>
            Gets the xquery built by the visitor
            </summary>
            <value>A XQuery for update</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor">
            <summary>
            Represents a DataView visitor that generates a XQuery for updating an instance
            to database
            </summary>
            <version> 1.0.0 11 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.String)">
            <summary>
            Initiate an instance of UpdateVisitor class
            </summary>
            <param name="dataView">The data view</param>
            <param name="objId">The id of an instance to be updated.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.QueryBuilder.UpdateVisitor.XQueryStatement">
            <summary>
            Gets the xquery built by the visitor
            </summary>
            <value>A XQuery for update</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.WhereClause">
            <summary>
            Represents a Where clause element in XQuery.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.WhereClause.#ctor">
            <summary>
            Initiating an instance of WhereClause class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.WhereClause.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder">
            <summary>
            A DataViewModel is an object-representation of a specific data view on the
            </summary>
            
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiating an instance of XQueryBuilder class
            </summary>
            <param name="dataView">The DataView instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateSearchQuery">
            <summary>
            Generate an XQuery for searching based on the data view spec
            </summary>
            <returns>An XQuery</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateInstanceQuery">
            <summary>
            Generate an XQuery for searching for a particular instance of a given id.
            </summary>
            <returns>An XQuery</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateInsertQuery">
            <summary>
            Generate an XQuery for insert an instance
            </summary>
            <returns>An XQuery</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateUpdateQuery">
            <summary>
            Generate an XQuery for update an instance
            </summary>
            <returns>An XQuery</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateDeleteQuery">
            <summary>
            Generate an XQuery for deleting an instance
            </summary>
            <returns>An XQuery</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryBuilder.GenerateReferenceUpdateQuery(Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Get a query that updates the obj_id(s) of referenced instance(s) by an
            instance
            </summary>
            <param name="instanceData">The instance data</param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryStatement">
            <summary>
            Represents a XQuery statement element.
            </summary>
            <version>  	1.0.0 04 Nov 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryStatement.#ctor">
            <summary>
            Initiating an instance of XQueryStatement class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.QueryBuilder.XQueryStatement.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.ClassNameConverter">
            <summary>
            Conversion between a class name and the class caption
            </summary>
            <version>  1.0.1 05 Nov. 2004</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.ClassNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert bewtween a class name to a class caption
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.ClassNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from a class name to a class caption
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.ClassNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a class caption to a class name
            </summary>
            <param name="context"></param>
            <param name="info"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.DataViewNameConverter">
            <summary>
            Conversion between a data view name and the data view caption
            </summary>
            <version>  1.0.1 05 Nov. 2004</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.DataViewNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert bewtween a data view name to a data view caption
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.DataViewNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from a data view name to a data view caption
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.DataViewNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a data view caption to a data view name
            </summary>
            <param name="context"></param>
            <param name="info"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy">
            <summary>
            Represents a common interface for the nodes in Taxonomy name space.
            </summary>
            <version>  	1.0.0 14 Feb 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.IXaclObject">
            <summary>
            Represents a common interface for the objects to be managed with access control
            components.
            </summary>
            <version>  	1.0.0 26 Jul 2003
            </version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.IXaclObject.ToXPath">
            <summary>
            Return a xpath representation of the object
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.IXaclObject.GetChildren">
            <summary>
            Return a  of children of the object
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.IXaclObject.Parent">
            <summary>
            Return a  parent of the object
            </summary>
            <returns>The parent of the object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.GetDataView(System.String)">
            <summary>
            Gets the DataViewModel for the ITaxonomy object
            </summary>
            <param name="sectionString">Specify the sections whose attributes are included
            in the result list of the generated data view, or null to include all attributes.</param>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.MetaDataModel">
            <summary>
            Gets the meta data model that owns the ITaxonomy object
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.ClassName">
            <summary>
            Gets or sets the class name for this node
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.DataViewName">
            <summary>
            Gets or sets the data view name for this node
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.ParentNode">
            <summary>
            Gets or sets the parent node of this node
            </summary>
            <value>A IDataViewElement object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.ITaxonomy.ChildrenNodes">
            <summary>
            Gets the children nodes of this node
            </summary>
            <value>A TaxonNodeCollection</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode">
            <summary> 
            The class represent a node in a toxonomy tree
            </summary>
            <version> 1.0.0 23 Feb 2004</version>
            <author> Yong Zhang </author>
            <remarks>
            A Taxon node is allowed to add additional search
            filter to the DataViewModel inherited from its root node and it can
            also change the class name of the inherited DataViewModel except
            that the new class must be a subclass of the class of the
            TaxonomyModel; If the search filter contains search expresions that
            refer to referenced classes that do not exist in the inherited
            DataViewModel, they have to be added to the inherited DataViewModel.
            </remarks>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataViewElementBase">
            <summary>
            A base class that implements IDataViewElement interface and serves as
            the base class of other data view elements.
            </summary>
            
            <version>1.0.1 28 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.IDataViewElement">
            <summary>
            Represents a common interface for the elements in DataView name space.
            </summary>
            <version>  	1.0.0 28 Oct 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.IMetaDataElement">
            <summary>
            Represents a common interface for the elements in MetaData and its subfolder name spaces.
            </summary>
            <version> 1.0.0 16 Nov. 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="E:Newtera.Common.MetaData.IMetaDataElement.ValueChanged">
            <summary>
            Value changed event handler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.IMetaDataElement.CaptionChanged">
            <summary>
            Caption changed event handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.IMetaDataElement.Name">
            <summary>
            Gets name of the element
            </summary>
            <returns>The element name</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.IMetaDataElement.Caption">
            <summary>
            Gets or sets Caption of the element
            </summary>
            <returns>The element caption</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.IMetaDataElement.Description">
            <summary>
            Gets or sets description of the element
            </summary>
            <returns>The element description</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.IMetaDataElement.Position">
            <summary>
            Gets or sets display position of the element
            </summary>
            <returns>The display position</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElement.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElement.GetSchemaModelElement">
            <summary>
            Gets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElement.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.IDataViewElement.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.IDataViewElement.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.IDataViewElement.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.IDataViewElement.IsValueChanged">
            <summary>
            Gets or sets the information indicating whether the value of element
            is changed or not
            </summary>
            <value>true if it is changed, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.IDataViewElement.IsReadOnly">
            <summary>
            Gets or sets the information indicating whether the DataViewElement is
            readonly
            </summary>
            <value>true if it is read-only, false otherwise</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.#ctor(System.String)">
            <summary>
            Initiating an instance of DataViewElementBase class
            </summary>
            <param name="name">Name of the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.#ctor">
            <summary>
            Initiating an instance of DataViewElementBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.FireValueChangedEvent(System.Object)">
            <summary>
            Fire an event for value change
            </summary>
            <param name="value">new value</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a data view model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of a type.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetProperties">
            <summary>
            Our implementation overrides GetProperties() only and creates a
            collection of custom property descriptors of type GlobalizedPropertyDescriptor
            and returns them to the caller instead of the default ones.
            </summary>
            <returns>A collection of Property Descriptors.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="E:Newtera.Common.MetaData.DataView.DataViewElementBase.ValueChanged">
            <summary>
            Value changed event handler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.DataView.DataViewElementBase.CaptionChanged">
            <summary>
            Caption Changed event handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.Name">
            <summary>
            Gets the name of element
            </summary>
            <value>The data view name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.Caption">
            <summary>
            Gets or sets the caption of element
            </summary>
            <value>The element caption.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.Description">
            <summary>
            Gets or sets the description of element
            </summary>
            <value>The element description.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.Position">
            <summary>
            Gets or sets position of this element among its sibling.
            </summary>
            <value>A zero-based integer representing the position.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.IsValueChanged">
            <summary>
            Gets or sets the information indicating whether the value of element
            is changed or not
            </summary>
            <value>true if it is changed, false otherwise.</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementBase.IsReadOnly">
            <summary>
            Gets or sets the information indicating whether the DataViewElement is
            readonly
            </summary>
            <value>true if it is read-only, false otherwise</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.#ctor(System.String)">
            <summary>
            Initiate an instance of TaxonNode class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of TaxonNode class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.GetDataView(System.String)">
            <summary>
            Gets the DataViewModel for the ITaxonomy object
            </summary>
            <param name="sectionString">Specify the sections whose attributes are included
            in the result list of the generated data view, or null to include all attributes.</param>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.GenerateDataView(System.String)">
            <summary>
            Generate a local copy of DataViewModel based on its parent node's
            DataViewModel and local search filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ToXPath">
            <summary>
            Return a xpath representation of the Taxonomy node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.TaxonomyName">
            <summary>
            Gets the name of owner taxonomy model
            </summary>
            <value>Taxonomy name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.OwnerTaxonomy">
            <summary>
            Gets the owner taxonomy model
            </summary>
            <value>A owner TaxonomyModel</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.IsEnabled">
            <summary>
            Gets or sets information to indicate whether the node is enabled.
            </summary>
            <value>
            true if it is enabled; otherwise false. default is true.
            </value>
            <remarks>An enabled node can have an action associated with it</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.BaseUrl">
            <summary>
            Gets or sets the base url associated with the node.
            </summary>
            <value>
            a string representing a base url
            </value>
            <remarks>This value is used by web applications</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.LargeImage">
            <summary>
            Gets or sets a name of the large image for the taxon node.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.MedianImage">
            <summary>
            Gets or sets a name of the median image for the taxon node.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.SmallImage">
            <summary>
            Gets or sets a name of the small image for the taxon node.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.DetailedText">
            <summary>
            Gets or sets a detailed text of the taxon node.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.SearchFilter">
            <summary>
            Gets the search filter defined for this node
            </summary>
            <value>A Filter object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ReferencedClasses">
            <summary>
            Gets a collection of referenced classes used by the search filter
            </summary>
            <value>A ReferencedClassCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.MetaDataModel">
            <summary>
            Gets the meta data model that owns the ITaxonomy object
            </summary>
            <value>A MetaDataModel</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ClassName">
            <summary>
            Gets or sets the class name for this node
            </summary>
            <value>A class name, null if this node does not define a new class.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.DataViewName">
            <summary>
            Gets or sets the data view name for the taxon node.
            </summary>
            <value>The data view name, can be null.</value>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ParentNode">
            <summary>
            Gets or sets the parent node of this node
            </summary>
            <value>A IDataViewElement object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.ChildrenNodes">
            <summary>
            Gets the children nodes of this node
            </summary>
            <value>A TaxonNodeCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection">
            <summary>
            Represents a collection of Taxon nodes.
            </summary>
            <version>1.0.1 23 Feb 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataViewElementCollection">
            <summary>
            An object collection class to handle IDataViewElement when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 28 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.#ctor">
            <summary>
             Initializes a new instance of the DataViewElementCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataViewElementCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Add(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Adds an IDataViewElement to the DataViewElementCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.IndexOf(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Insert(System.Int32,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Remove(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Contains(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by elements of a collection
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>Null reference</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewElementCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="E:Newtera.Common.MetaData.DataView.DataViewElementCollection.ValueChanged">
            <summary>
            Value changed event habdler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.DataView.DataViewElementCollection.CaptionChanged">
            <summary>
            Caption changed event handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member using attribute index
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Item(System.String)">
            <summary>
            Implemention of Indexer member using attribute name
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.IsValueChanged">
            <summary>
            Gets or sets the information indicating whether the value of element
            is changed or not
            </summary>
            <value>true if it is changed, false otherwise.</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.IsReadOnly">
            <summary>
            Gets or sets the information indicating whether the DataViewElement is
            readonly
            </summary>
            <value>true if it is read-only, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Name">
            <summary>
            Gets the name of element
            </summary>
            <value>The collection name, default is null</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Caption">
            <summary>
            Gets or sets the caption of element
            </summary>
            <value>The element caption.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Position">
            <summary>
            Gets or sets position of this element among its sibling.
            </summary>
            <value>A zero-based integer representing the position.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewElementCollection.Description">
            <summary>
            Gets or sets the description of element
            </summary>
            <value>The element description.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection.#ctor">
            <summary>
            Initiating an instance of TaxonNodeCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of TaxonNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">
            <summary> 
            The TaxonomyException class is the default exception type for Taxonomy
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 23 Feb 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException.#ctor(System.String)">
            <summary> 
            Constructor of a TaxonomyException without an object
            </summary>
            <param name="reason">a description of the exception </param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception</param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel">
            <summary>
            A TaxonomyModel contains a taxonomy tree that
            provided a logical classification scheme.
            
            A TaxonomyModel is used in two areas: to generate queries that fetches
            data instances that satisfy the definition of taxonomy nodes, and
            to provide information for user interface creation.
            
            A TaxonomyModel can be constructed programatically or from an XML data. It can be
            saved as an XML data too.
            </summary>
            
            <version>1.0.1 12 Feb 2004</version>
            
            <author>Yong Zhang</author>
            <remarks>
            A non-leaf node in a taxonomy tree can be just a place holder to provide
            a navigation path to its subnodes. This kind of node is called dummy node.
            A dummy node does not have either class name, data view name, or search
            filter specified. Leaf nodes can not be dummy nodes.
            For a non-root node with class name or data view name defined, if its parent
            node is associated a class, the class name itself or the base class of
            the data view must be one of subclasses of the class associated with parent
            node. A node in taxonomy tree can add a search filter to the data view
            inherited from parent node or created locally to define the set of instances
            associated with the node.
            
            If a node has a class name, but not data view name, the
            default data view of the class is used. Othewise, the specified
            data view is used.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.#ctor(System.String)">
            <summary>
            Initiating an instance of TaxonomyModel class
            </summary>
            <param name="name">Name of the taxonomy</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of TaxonomyModel class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.GetDataView(System.String)">
            <summary>
            Gets the DataViewModel for the ITaxonomy object
            </summary>
            <param name="sectionString">Specify the sections whose attributes are included
            in the result list of the generated data view, or null to include all attributes.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.ToXPath">
            <summary>
            Return a xpath representation of the Taxonomy node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.FindNode(System.String)">
            <summary>
            Find a TaxonNode of a specified name
            </summary>
            <param name="name">The name</param>
            <returns>The TaxonNode found, null if it does not exist.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.GetNodeIndex(System.String)">
            <summary>
            Get the index of a node
            </summary>
            <param name="name">The node name</param>
            <returns>A dot separated index, (0.1.1)</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.Validate">
            <summary>
            Validate the taxonomy to see whether it is in a valid state.
            </summary>
            <returns>A DataViewValidateResult</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.GenerateDataView(System.String)">
            <summary>
            Get a DataViewModel for the specified data view name. If not
            specified, generate a Default DataViewModel of the class.
            </summary>
            <returns>A DataViewModel</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.FindNodeFromChildren(System.String,Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection)">
            <summary>
            A resursive function that finds a TaxonNode of the specified name from
            a collection of TaxonNode objects
            </summary>
            <param name="name">The name</param>
            <param name="childNodes">A collection of TaxonNode objects</param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.GetNodeIndexFromChildren(System.String,Newtera.Common.MetaData.DataView.Taxonomy.TaxonNodeCollection,System.Text.StringBuilder)">
            <summary>
            A resursive function that gets a node index
            </summary>
            <param name="name">The name</param>
            <param name="childNodes">A collection of TaxonNode objects</param>
            <param name="builder">A StringBuilder instance.</param>
            <returns>true if the node is found, false if not found.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.MetaDataModel">
            <summary>
            Gets the meta data model that owns the ITaxonomy object
            </summary>
            <value>A MetaDataModel</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.ClassName">
            <summary>
            Gets or sets the base class name for the taxonomy.
            </summary>
            <value>The base class name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.DataViewName">
            <summary>
            Gets the data view name for the taxonomy.
            </summary>
            <value>The data view name, can be null.</value>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.ParentNode">
            <summary>
            Gets or sets the parent node of this node
            </summary>
            <value>A IDataViewElement object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.ChildrenNodes">
            <summary>
            Gets the first level of children Taxon nodes.
            </summary>
            <value>A TaxonNodeCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection">
            <summary>
            Represents a collection of TaxonomyModel objects.
            </summary>
            <version>1.0.1 12 Feb 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.#ctor(Newtera.Common.MetaData.MetaDataModel)">
            <summary>
            Initiating an instance of TaxonomyModelCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Read(System.String)">
            <summary>
            Constrauct a TaxonomyModel collection from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Read(System.IO.Stream)">
            <summary>
            Constrauct a TaxonomyModel from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            read the stream
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Read(System.IO.TextReader)">
            <summary>
            Constrauct a TaxonomyModel from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            read the text reader
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Write(System.String)">
            <summary>
            Write the TaxonomyModel to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            write to the file.
            </exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Write(System.IO.Stream)">
            <summary>
            Write the data view as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Write(System.IO.TextWriter)">
            <summary>
            Write the data view as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyException">TaxonomyException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            Unmarshal an element representing data view collection
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.GetXmlDocument">
            <summary>
            Gets the xml document that represents the data view
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the data views changed
            </summary>
            <param name="sender">the IDataViewElement that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ToXPath">
            <summary>
            Return a xpath representation of the Taxonomy node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.GetDataView(System.String)">
            <summary>
            Return null value
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.IsAltered">
            <summary>
            Gets or sets the information indicating whether the data views has been altered
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.MetaDataModel">
            <summary>
            Gets the meta data model that owns the ITaxonomy object
            </summary>
            <value>A MetaDataModel</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ClassName">
            <summary>
            Gets the base class name for the taxonomy.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.DataViewName">
            <summary>
            Gets or sets the data view name.
            </summary>
            <value>The data view name, can be null.</value>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ParentNode">
            <summary>
            Gets or sets the parent node of this node
            </summary>
            <value>A IDataViewElement object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.ChildrenNodes">
            <summary>
            Gets the first level of children Taxon nodes.
            </summary>
            <value>A TaxonNodeCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModelCollection.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Validate.DataViewValidateResult">
            <summary>
            Keeps the result of validating an instance data.
            </summary>
            <version>  	1.0.0 16 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateResult.#ctor">
            <summary>
            Initializes a new instance of the DataViewValidateResult class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateResult.AddError(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            Add a validating error entry
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataViewValidateResult.HasError">
            <summary>
            Gets the information indicating whether there are validating
            errors.
            </summary>
            <value>true if it has errors, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataViewValidateResult.Errors">
            <summary>
            Gets the validating errors
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor">
            <summary>
            Represents a visitor that validate a data view to see if has any inconsistencies
            between the data view and schema model.
            </summary>
            <version> 1.0.0 26 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.#ctor">
            <summary>
            Initiate an instance of DataViewValidateVisitor class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.GetSource(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Gets the source string
            </summary>
            <param name="element">The data view element</param>
            <returns>A source string</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataViewValidateVisitor.ValidateResult">
            <summary>
            Gets the validate result
            </summary>
            <value>A DataViewValidateResult</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor">
            <summary>
            Represents a visitor that validate an instance data kept in result attributes
            of a data view. The validating rules are based on that provided by the
            instance's schema. 
            </summary>
            <version> 1.0.0 04 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiate an instance of InstanceDataValidateVisitor class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.GetSource(Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Gets the source string
            </summary>
            <param name="element">The data view element</param>
            <returns>A source string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.IsValidValueFormat(System.String,Newtera.Common.MetaData.Schema.DataType)">
            <summary>
            Gets information indicating whether the attribute value is valid
            for the given data type
            </summary>
            <param name="val">The attribute value</param>
            <param name="dataType">One of the DataType enum</param>
            <returns>true if the value is valid, false otherwise</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.InstanceDataValidateVisitor.ValidateResult">
            <summary>
            Gets the validate result
            </summary>
            <value>A DataViewValidateResult</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry">
            <summary>
            Represent an entry of validating error
            </summary>
            <version>  	1.0.0 16 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry.#ctor(System.String,System.String,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initializes a new instance of the DataValidateResultEntry class
            </summary>
            <param name="msg">The entry message</param>
            <param name="source">The source string</param>
            <param name="attribute">The data view element associated with the entry</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry.Message">
            <summary>
            Gets the message that describes the validating problem.
            </summary>
            <value>A string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry.Source">
            <summary>
            Gets the source of the validating problem.
            </summary>
            <value>A string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry.DataViewElement">
            <summary>
            Gets the offending dataview element
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection">
            <summary>
            An object collection class to handle DataValidateResultEntry when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 16 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.#ctor">
            <summary>
             Initializes a new instance of the DataValidateResultEntryCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.Add(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            Adds an DataValidateResultEntry to the SchemaModelElementCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.AddRange(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection)">
            <summary>
            Adds an DataValidateResultEntry to the SchemaModelElementCollection.
            </summary>
            <param name="collection">Another collection</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.IndexOf(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.Insert(System.Int32,Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.Remove(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.Contains(Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntry)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Validate.DataValidateResultEntryCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor">
            <summary>
            Represents a class that provides properties for DataRow instances in a
            DataTable. This is a supporting class for ArrayAttributeView class.
            </summary>
            <version>1.0.1 29 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.#ctor(System.String,System.Attribute[],System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Initiating an instance of ArrayDataCellPropertyDescriptor class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Gets an editor of the specified type.
            </summary>
            <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
            <returns>An instance of the requested editor type, or a null reference </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component. return an empty string if the value is null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.GetValue">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <returns>The value of a property.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value. </param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>Return false</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
            <value>Type of an InstanceData</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <value>A TypeConverter that is used to convert the Type of this property.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.IsBrowsable">
            <summary>
            Gets a value indicating whether the member is browsable
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.IsLocalizable">
            <summary>
            Gets a value indicating whether this property should be localized
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.DisplayName">
            <summary>
            Gets the display name of the property
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only
            </summary>
            <value>true if the property is read-only; otherwise, false</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataCellPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>A Type that represents the type of the property. Default is type of string</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor">
            <summary>
            Represents a class that provides properties for DataRow instances in a
            DataTable. This is a supporting class for ArrayAttributeView class.
            </summary>
            <version>1.0.1 29 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.#ctor(System.String,System.Attribute[],System.Data.DataTable,System.Int32)">
            <summary>
            Initiating an instance of ArrayDataRowPropertyDescriptor class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Gets an editor of the specified type.
            </summary>
            <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
            <returns>An instance of the requested editor type, or a null reference </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component. return an empty string if the value is null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.GetValue">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <returns>The value of a property.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value. </param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>Return false</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
            <value>Type of an InstanceData</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <value>A TypeConverter that is used to convert the Type of this property.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.IsBrowsable">
            <summary>
            Gets a value indicating whether the member is browsable
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.IsLocalizable">
            <summary>
            Gets a value indicating whether this property should be localized
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.DisplayName">
            <summary>
            Gets the display name of the property
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only
            </summary>
            <value>true if the property is read-only; otherwise, false</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataRowPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>A Type that represents the type of the property. Default is type of string</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataRowView">
            <summary>
            Represents a view for Array Data Row of an Array Attribute.
            This is mainly for rendering a sub properties of an array data row
            in an editing UI form.
            </summary>
            <version>1.0.1 29 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.#ctor(System.String,System.Data.DataTable,System.Int32)">
            <summary>
            Initiating an instance of ArrayDataRowView class
            </summary>
            <param name="rowName">The unique name of the row.</param>
            <param name="dataTable">The DataTable contains the row.</param>
            <param name="rowIndex">The index of row in the DataTable.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetPropertyDescriptors">
            <summary>
            Create a PropertyDescriptorCollection base on the data cells in the data row.
            </summary>
            <returns>a PropertyDescriptorCollection</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.ToString">
            <summary>
            Gets a string representing the object
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetConverter">
            <summary>
            Get converter of this object
            </summary>
            <returns>The converter of TypeConverter, or null </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetEvents(System.Attribute[])">
            <summary>
            Gets the events.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Gets the events
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetComponentName">
            <summary>
            Gets the component name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets property owner
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetAttributes">
            <summary>
            Gets the attributes of the objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetProperties(System.Attribute[])">
            <summary>
            Gets properties of the object
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetEditor(System.Type)">
            <summary>
            Gets the Editor of the object
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetDefaultProperty">
            <summary>
            Gets the default property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetDefaultEvent">
            <summary>
            Get default event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowView.GetClassName">
            <summary>
            Get class name of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataRowViewConverter">
            <summary>
            Conversion between a ArrayDataRowView object and string
            </summary>
            <version>  1.0.1 29 Sep. 2004</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowViewConverter.#ctor">
            <summary>
            Initiating an instance of ArrayDataRowViewConverter class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowViewConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert a ArrayDataRowView to a string type
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataRowViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from a ArrayDataRowView object to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataTableView">
            <summary>
            Represents a view for value of Array Data Table.
            This is mainly for rendering a sub properties of an array attribute
            in an editing UI form.
            </summary>
            <version>1.0.1 29 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.#ctor(System.String,Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Initiating an instance of ArrayDataTableView class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetPropertyDescriptors">
            <summary>
            Create a PropertyDescriptorCollection base on the data rows in the data table.
            </summary>
            <returns>a PropertyDescriptorCollection</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.ToString">
            <summary>
            Gets string representing the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetProperties(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableView.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ArrayDataTableView.ArrayAttributeValue">
            <summary>
            Gets or sets a DataTable instance storing array values
            </summary>
            <value>A DataTable instance.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ArrayDataTableViewConverter">
            <summary>
            Conversion between a ArrayDataTableView object and string
            </summary>
            <version>  1.0.1 29 Sep. 2004</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableViewConverter.#ctor">
            <summary>
            Initiating an instance of ArrayDataTableViewConverter class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableViewConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert a ArrayDataTableView to a string type
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ArrayDataTableViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from a ArrayDataTableView object to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.BinaryExpr">
            <summary>
            Represents a base class for all binary expressions in search filter 
            which has left and right operands.
            </summary>
            <version> 1.0.0 28 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.#ctor">
            <summary>
            Initiate an instance of BinaryExpr class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.#ctor(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initiate an instance of BinaryExpr class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiate an instance of BinaryExpr class.
            </summary>
            <param name="parent">The xml element represents the expr</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.BinaryExpr.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.BinaryExpr.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.BinaryExpr.ElementType">
            <summary>
            Gets the element type
            </summary>
            <value>One of the ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.BinaryExpr.Left">
            <summary>
            Gets the left operand of the binary expression
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.BinaryExpr.Right">
            <summary>
            Gets the right operand of the binary expression
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.BinaryExpr.Operator">
            <summary>
            Gets or sets the binary expression's operator.
            </summary>
            <value>An operator symbol</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Comma">
            <summary>
            Represents a comma used to separate the values in a InExpr.
            Only used to construct flatten search filter expression.
            </summary>
            <version>1.0.1 29 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Comma.#ctor">
            <summary>
            Initiating an instance of Comma class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Comma.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Comma.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Comma.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Comma.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Comma.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ContainsFunc">
            <summary>
            Represents a Contains function
            </summary>
            <version> 1.0.0 14 Mar 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ContainsFunc.#ctor">
            <summary>
            Initiate an instance of ContainsFunc object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ContainsFunc.#ctor(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initiate an instance of ContainsFunc object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ContainsFunc.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiate an instance of ContainsFunc class.
            </summary>
            <param name="parent">The xml element represents the expr</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ContainsFunc.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ContainsFunc.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ContainsFunc.Operator">
            <summary>
            Gets the XQuery operator.
            </summary>
            <value>An XQuery operator</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataArrayAttribute">
            <summary>
            A DataArrayAttribute instance represents an array attribute in a data view.
            It can appears in the result attribute collection.
            </summary>
            <version>1.0.1 10 Aug 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataArrayAttribute.DELIMETER">
            <summary>
            Array element delimiter definition
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataArrayAttribute.DEFAULT_VALUE">
            <summary>
            Array cell default value, 0
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.#ctor(System.String,System.String)">
            <summary>
            Initiating an instance of DataArrayAttribute class
            </summary>
            <param name="name">Name of the array attribute</param>
            <param name="ownerClassAlias">The unique alias of DataClass element that owns this attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataArrayAttribute class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.IsValueDifferent(System.String)">
            <summary>
            Gets the information indicating whether the given value is different from
            the attribute value
            </summary>
            <param name="val">The given value</param>
            <returns>true if they are different, false otherwise.</returns>
            <remarks>If the give value is null or empty string, and the attribute
            value is null or empty string, they are considered to be same</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.AddEmptyRow">
            <summary>
            Add an empty row to the array
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.GetCellValue(System.String,System.Int32,System.Int32)">
            <summary>
            Get an array cell value.
            </summary>
            <param name="arrayData">The array data string</param>
            <param name="rowIndex">Array row index</param>
            <param name="colIndex">Array col index</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.KeepCellValue(System.Int32,System.Int32,System.String)">
            <summary>
            Keep an array cell value temporarily. It will not update
            the array value. It is mainly used during importing process.
            </summary>
            <param name="rowIndex">Array row index</param>
            <param name="colIndex">Array col index</param>
            <param name="cellValue">Cell value</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.ConvertCellValuesToString">
            <summary>
            Convert the kept cell values into a delimiter separated string and
            return it.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.ParseArrayValues(System.String)">
            <summary>
            Parse a string representing array values separated by delimiter
            </summary>
            <param name="arrayDataString">An array value string</param>
            <returns>A string array contains parsed array values</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataArrayAttribute.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.OwnerClassAlias">
            <summary>
            Gets alias of class that owns this attribute
            </summary>
            <value>Owner class alias</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.HasValue">
            <summary>
            Gets the information indicating whether the attribute has an value
            </summary>
            <value>true if it has, false, otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.IsNumeric">
            <summary>
            Gets the information indicating whether the data type of array element is
            numeric, including integer, decimal, float, double, etc.
            </summary>
            <value>true if it is a numeric attribute, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.AttributeValue">
            <summary>
            Gets or sets the value of a array attribute.
            </summary>
            <value>The attribute value</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataArrayAttribute.AttributeValues">
            <summary>
            Gets the array of values of an array attribute.
            </summary>
            <value>The attribute value</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataClass">
            <summary>
            A DataClass instance represents a class in a data view. It can represent either
            a base class or a referenced class.
            </summary>
            
            <version>1.0.1 28 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.#ctor(System.String,System.String,Newtera.Common.MetaData.DataView.DataClassType)">
            <summary>
            Initiating an instance of DataClass class
            </summary>
            <param name="name">Name of the element</param>
            <param name="className">The actual name of the class</param>
            <param name="type">One of the DataClassType values</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataClass class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.ConvertDataClassTypeToString(Newtera.Common.MetaData.DataView.DataClassType)">
            <summary>
            Convert a DataClassType value to a string
            </summary>
            <param name="type">One of DataClassType value</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataClass.ConvertStringToDataClassType(System.String)">
            <summary>
            Convert a string to a DataClassType value
            </summary>
            <param name="str">A string</param>
            <returns>One of DataClassType value</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.Type">
            <summary>
            Gets the type of data class
            </summary>
            <value>One of DataClassType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.Alias">
            <summary>
            Gets the alias of the class. Tha alias is used in an XQuery
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.ClassName">
            <summary>
            Gets or sets name of the class.
            </summary>
            <value>Name of the class</value>
            <remarks>The class name can be different from the element name
            where the element name is unique, while the class name is not among
            the base class and referenced classes.</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.ParentClassAlias">
            <summary>
            Gets or sets alias of the parent class to this referenced class.
            </summary>
            <value>Alias of the parent class, null if this is a base class.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.ParentRelationshipName">
            <summary>
            Gets or sets name of the relationship attribute that establish the relation
            between the parent class and this referenced class. The relationship
            attribute is on the parent class side.
            </summary>
            <value>Name of the relationship attribute, null if this is a base class.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataClass.IsReferenced">
            <summary>
            Gets or sets the information indicating whether the referenced class is
            referenced in the search or result parts of a query
            </summary>
            <value>true if it is referenced, false otherwise. default is false.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataClassType">
            <summary>
            Specify the types of data class.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataClassType.Unknown">
            <summary>
            Unknown Data Class Type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataClassType.BaseClass">
            <summary>
            Base Class Type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataClassType.ReferencedClass">
            <summary>
            Referenced Class Type
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataRelationshipAttribute">
            <summary>
            A DataRelationshipAttribute instance represents a relationship attribute in a data view.
            It can appears in the result attribute collection.
            </summary>
            <version>1.0.1 28 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initiating an instance of DataRelationshipAttribute class
            </summary>
            <param name="name">Name of the relationship attribute</param>
            <param name="ownerClassAlias">The unique alias of DataClass element that owns this attribute</param> 
            <param name="linkedClassName">The name of the linked class</param>
            <param name="linkedClassAlias">The alias of the linked class</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataRelationshipAttribute class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.GetUniquePKName(System.String)">
            <summary>
            Gets an unique name for primary key.
            </summary>
            <param name="pkName">The name of primary key</param>
            <returns>A unique name for primary name</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.SplitPKValues(System.String)">
            <summary>
            Split values of the primary keys in a value string
            </summary>
            <param name="primaryKeyValues">Connected primary key values</param>
            <returns>The split values in a string array, could be null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.HasFunction">
            <summary>
            Gets the information indicating whether the attribute has a function associated.
            </summary>
            <value>true if it has, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.Function">
            <summary>
            Gets or sets the aggregate function for the relationship attribute.
            This allows to set function such count functions
            </summary>
            <value>The function name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.OwnerClassAlias">
            <summary>
            Gets alias of class that owns this attribute
            </summary>
            <value>Owner class alias</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.LinkedClassAlias">
            <summary>
            Gets unique alias of the linked class.
            </summary>
            <value>Linked class alias</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.LinkedClassName">
            <summary>
            Gets name of the linked class.
            </summary>
            <value>Linked class name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.PrimaryKeyFilter">
            <summary>
            Gets or sets a filter consisting of the primary keys of the linked class.
            It is used when a relationship attribute appears in the search filter,
            instead of searching on OBJ_ID, it can search on primary key value(s). 
            </summary>
            <value>A filter for primary keys</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.PrimaryKeys">
            <summary>
            Gets primary keys of the linked class of a relationship attribute
            </summary>
            <value>A DataViewElementCollection, null if there is no primary keys</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.PrimaryKeyCount">
            <summary>
            Get the count of primary keys of the linked class
            </summary>
            <value>A number of pk, default is 0</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.HasValue">
            <summary>
            Gets the information indicating whether the primary keys of relationship
            attribute has an value(s)
            </summary>
            <value>true if it has, false, otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.AttributeValue">
            <summary>
            Gets or sets the value of a relationship attribute.
            </summary>
            <value>The attribute value</value>
            <remarks>The value of RelationshipAttribute is the obj_id of an instance
            that this relationship linked to. </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataRelationshipAttribute.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataSetHelper">
            <summary>
            A helper class that provide some convinient access methods to data set
            </summary>
            <version>  1.0.1 13 Nov 2003</version>
            <author>  Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSetHelper.IsEmptyDataSet(System.Data.DataSet,System.String)">
            <summary>
            Gets the value indicating whether the data set contains data
            for a table
            </summary>
            <param name="dataSet">The data set</param>
            <param name="tableName">The table name</param>
            <returns>true if it contains no data, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSetHelper.GetCellValue(System.Data.DataSet,System.String,System.String,System.Int32)">
            <summary>
            Gets the value of a cell in data set
            </summary>
            <param name="dataSet">The DataSet</param>
            <param name="tableName">The table name</param>
            <param name="columnName">The column name</param>
            <param name="rowIndex">The row index</param>
            <returns>The value of a cell, or null if the cell doesn't exist.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSetHelper.SetCellValue(System.Data.DataSet,System.String,System.String,System.Int32,System.String)">
            <summary>
            Sets a value to a specified cell in data set
            </summary>
            <param name="dataSet">The DataSet</param>
            <param name="tableName">The table name</param>
            <param name="columnName">The column name</param>
            <param name="rowIndex">The row index</param>
            <param name="val">The value to be set.</param>
            <remarks>If the specified cell doen't exists, nothing is done.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSetHelper.GetRowCount(System.Data.DataSet,System.String)">
            <summary>
            Get count of rows of a given table in data set.
            </summary>
            <param name="dataSet">The data set</param>
            <param name="tableName">The table name</param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataSimpleAttribute">
            <summary>
            A DataSimpleAttribute instance represents a simple attribute in a data view.
            It can appears in the result attribute collection or filters.
            </summary>
            <version>1.0.1 28 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.#ctor(System.String,System.String)">
            <summary>
            Initiating an instance of DataSimpleAttribute class
            </summary>
            <param name="name">Name of the simple attribute</param>
            <param name="ownerClassAlias">The unique alias of DataClass element that owns this attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataSimpleAttribute class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.IsValueDifferent(System.String)">
            <summary>
            Gets the information indicating whether the given value is different from
            the attribute value
            </summary>
            <param name="val">The given value</param>
            <returns>true if they are different, false otherwise.</returns>
            <remarks>If the give value is null or empty string, and the attribute
            value is null or empty string, they are considered to be same</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that the data view element associates with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataSimpleAttribute.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.OwnerClassAlias">
            <summary>
            Gets alias of class that owns this attribute
            </summary>
            <value>Owner class alias</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.HasFunction">
            <summary>
            Gets the information indicating whether the attribute has a function associated.
            </summary>
            <value>true if it has, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.Function">
            <summary>
            Gets or sets the aggregate function for the simple attribute.
            This allows to set functions such avg, sum, max, min, and count functions
            </summary>
            <value>The function name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.HasValue">
            <summary>
            Gets the information indicating whether the attribute has an value
            </summary>
            <value>true if it has, false, otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.IsNumeric">
            <summary>
            Gets the information indicating whether the data type of attribute is
            numeric, including integer, decimal, float, double, etc.
            </summary>
            <value>true if it is a numeric attribute, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.IsAutoIncrement">
            <summary>
            Gets the information indicating whether value of the attribute is
            automatically incremented.
            </summary>
            <value>true if it is an auto-increment attribute, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataSimpleAttribute.AttributeValue">
            <summary>
            Gets or sets the value of a simple attribute.
            </summary>
            <value>The attribute value</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataViewException">
            <summary>
            The DataViewException class is the default exception type for DataView
            namespace.
            </summary>
            <version>  	1.0.0 28 Oct 2003</version>
            <author>  Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewException.#ctor(System.String)">
            <summary>
            Initializing a DataViewException object
            </summary>
            <param name="reason">a description of the exception</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewException.#ctor(System.String,System.Exception)">
            <summary>
            Initializing a DataViewException object
            </summary>
            
            <param name="reason">a description of the exception</param>
            <param name="ex">the root cause exception</param>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataViewModel">
            <summary>
            A DataViewModel is an object-representation of a specific data view on the
            instance data of a class. It includes a base class, a set of referenced classes,
            search filters, and a set of attributes to be shown in the view.
            
            A DataViewModel is used in two areas: to generate an XQuery to fetch the data
            from database, and to provide information for user interface creation.
            
            A DataViewModel can be constructed programatically or from an XML data. It can be
            saved as an XML data too.
            </summary>
            
            <version>1.0.1 28 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataViewModel.DEFAULT_PAGE_SIZE">
            <summary>
            The default page size
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.DataViewModel.DEFAULT_PAGE_COUNT">
            <summary>
            The default count of a page
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.#ctor(System.String,Newtera.Common.Core.SchemaInfo,Newtera.Common.MetaData.Schema.SchemaModel)">
            <summary>
            Initiating an instance of DataViewModel class
            </summary>
            <param name="name">Name of the data view</param>
            <param name="schemaInfo">The SchemaInfo object</param>
            <param name="schemaModel">The SchemaModel object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataViewModel class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.GetInstanceQuery(System.String)">
            <summary>
            Gets a query that search for a particular instance of given id.
            </summary>
            <param name="instanceId">The instance id</param>
            <returns>The instance query</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.GetReferenceUpdateQuery(Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Gets a query that update obj_id(s) of referenced instances by
            an instance.
            </summary>
            <param name="instanceData">The instance data.</param>
            <returns>The query that updates referenced obj_id(s)</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.GetInstancesQuery(System.Collections.Specialized.StringCollection)">
            <summary>
            Gets a query that search for a set of instances of a class given a
            collection of instance ids.
            </summary>
            <param name="instanceIds">A collection of instance ids</param>
            <returns>The query that retrives a set of instances</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.GetInstanceByPKQuery">
            <summary>
            Gets a query that search for a particular instance based on primary
            key(s).
            </summary>
            <returns>A search query that retrieves an instance by primary key(s),
            null if the data view model does not have primary key attribute(s), or
            the values(s) of primary key(s) do not exist.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.ValidateData">
            <summary>
            Validate an instance data kept in the result attributes based on the rules
            of the schema model.
            </summary>
            <returns>A DataViewValidateResult</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.ValidateDataView">
            <summary>
            Validate the data view to see whether it is in sync with schema model.
            </summary>
            <returns>A DataViewValidateResult</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.SetSearchValue(System.String,System.String,System.String)">
            <summary>
            Set a search value to a specified attribute
            </summary>
            <param name="classAlias">The alias of the attribute owner class.</param>
            <param name="attributeName">The name of an attribute</param>
            <param name="searchValue">A search value</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.ClearSearchExpression">
            <summary>
            Clear the search expression
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.AddSearchExpr(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.ElementType)">
            <summary>
            Add a search expression to the data view with a logical operator.
            If there exists an expression, the new expression is appended to the
            end.
            </summary>
            <param name="expr">The expression to be appended.</param>
            <param name="type">The logical operator type, either And or Or</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.RemoveLastSearchExpr">
            <summary>
            Remove the last relational expression from the search expression.
            </summary>
            <remarks>If there doesn't exist a search expression, this method does nothing.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.Clone">
            <summary>
            Create a new DataViewModel by cloning this DataViewModel
            </summary>
            <returns>A cloned DataViewModel</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.FindClass(System.String)">
            <summary>
            Find the class element in the data view given a class alias
            </summary>
            <param name="alias">The class alias</param>
            <returns>A DataClass element</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.ToXPath">
            <summary>
            Return a xpath representation of the Taxonomy node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModel.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.SchemaInfo">
            <summary>
            Gets or sets the schema info of the data view.
            </summary>
            <value>The SchemaInfo instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.SchemaModel">
            <summary>
            Gets or sets the schema model of the data view.
            </summary>
            <value>The SchemaModel instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.Container">
            <summary>
            Gets or sets the container of the data view model object
            </summary>
            <value>A DataViewModelCollection object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.BaseClass">
            <summary>
            Gets the base class of the data view.
            </summary>
            <value>The base class</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.ReferencedClasses">
            <summary>
            Gets the referenced classes
            </summary>
            <value>A collection of DataClass instances</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.ResultAttributes">
            <summary>
            Gets the referenced classes
            </summary>
            <value>A collection of DataClass instances</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.Filter">
            <summary>
            Gets filter of the DataViewModel
            </summary>
            <value>A Filter object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.FlattenedSearchFilters">
            <summary>
            Gets the flattened search filter expressions
            </summary>
            <value>An DataViewElementCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.CurrentObjId">
            <summary>
            Gets or sets the id of an instance whose values are currently being
            kept in result attributes. This is to serve the edit query building.
            </summary>
            <value>The id of an instance</value>
            <remarks> Run-time use only, no need to write to data view xml</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.PageIndex">
            <summary>
            Gets or sets the index of current page.
            </summary>
            <value>The page index</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.PageSize">
            <summary>
            Gets or sets the size of a page
            </summary>
            <value>Page size</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.SearchQuery">
            <summary>
            Gets the search XQuery of the data view
            </summary>
            <value>An XQuery for search</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.InsertQuery">
            <summary>
            Gets the insert XQuery of the data view
            </summary>
            <value>An XQuery for insert</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.UpdateQuery">
            <summary>
            Gets the update XQuery of the data view
            </summary>
            <value>An XQuery for update</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.DeleteQuery">
            <summary>
            Gets the delete XQuery of the data view
            </summary>
            <value>An XQuery for delete</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModel.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.DataViewModelCollection">
            <summary>
            Represents a collection of DataViewModel objects.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.#ctor">
            <summary>
            Initiating an instance of DataViewModelCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.GetDataViewsForClass(System.String)">
            <summary>
            Get data views for the specified base class
            </summary>
            <param name="className">The class name</param>
            <returns>A DataViewModelCollection</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Read(System.String)">
            <summary>
            Constrauct a data view model collection from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Read(System.IO.Stream)">
            <summary>
            Constrauct a data view model from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            read the stream
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Read(System.IO.TextReader)">
            <summary>
            Constrauct a data view model from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            read the text reader
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Write(System.String)">
            <summary>
            Write the data view model to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            write to the file.
            </exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Write(System.IO.Stream)">
            <summary>
            Write the data view as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Write(System.IO.TextWriter)">
            <summary>
            Write the data view as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.DataView.DataViewException">DataViewException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            Unmarshal an element representing data view collection
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.GetXmlDocument">
            <summary>
            Gets the xml document that represents the data view
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the data views changed
            </summary>
            <param name="sender">the IDataViewElement that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.ToXPath">
            <summary>
            Return a xpath representation of the Taxonomy node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.DataViewModelCollection.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.SchemaInfo">
            <summary>
            Gets or sets the schema info of the data view.
            </summary>
            <value>The SchemaInfo instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.MetaData">
            <summary>
            Gets or sets the meta data that owns the Schema
            </summary>
            <returns> A MetaDataModel object</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.SchemaModel">
            <summary>
            Gets or sets the schema model of the data view.
            </summary>
            <value>The SchemaModel instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.IsAltered">
            <summary>
            Gets or sets the information indicating whether the data views has been altered
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.DataViewModelCollection.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ElementFactory">
            <summary>
            A singleton class that creates an instance of IDataViewElement
            based on a xml element
            </summary>
            <version>  	1.0.0 28 Oct 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ElementFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ElementFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IDataViewElement type based on the xml element
            representing the element.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IDataViewElement instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ElementFactory.ConvertTypeToString(Newtera.Common.MetaData.DataView.ElementType)">
            <summary>
            Convert a ElementType value to a string
            </summary>
            <param name="type">One of ElementType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ElementFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a ElementType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of ElementType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ElementFactory.Instance">
            <summary>
            Gets the ElementFactory instance.
            </summary>
            <returns> The ElementFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ElementType">
            <summary>
            Specify the types of elements in data view model.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Unknown">
            <summary>
            Unknown element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.View">
            <summary>
            View element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Class">
            <summary>
            Class element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Filter">
            <summary>
            Filter element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.SimpleAttribute">
            <summary>
            Simple attribute element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.ArrayAttribute">
            <summary>
            Array element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.RelationshipAttribute">
            <summary>
            Relationship element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.And">
            <summary>
            And element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Or">
            <summary>
            Or element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Equals">
            <summary>
            Equals element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.NotEquals">
            <summary>
            Not Equals element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.To">
            <summary>
            To element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.LessThan">
            <summary>
            Less Than element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.GreaterThan">
            <summary>
            Greater Than element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.LessThanEquals">
            <summary>
            Less Than Equals element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.GreaterThanEquals">
            <summary>
            Greater Than Equals element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.In">
            <summary>
            In element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.NotIn">
            <summary>
            Not In element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Parameter">
            <summary>
            Parameter element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.ParenthesizedExpr">
            <summary>
            Parenthesized Expr element
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.LeftParenthesis">
            <summary>
            Left Parenthesis
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.RightParenthesis">
            <summary>
            Right Parenthesis
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.LeftEmptyOperand">
            <summary>
            Left Empty Operand
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.RightEmptyOperand">
            <summary>
            Right Empty Operand
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.RelationshipBegin">
            <summary>
            Relationship Begin
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.RelationshipEnd">
            <summary>
            Relationship End
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.ResultAttributes">
            <summary>
            Result Attributes
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.ReferencedClasses">
            <summary>
            Referenced Classes
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.DataViews">
            <summary>
            DataViews
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Comma">
            <summary>
            Comma
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Taxonomy">
            <summary>
            Taxonomy
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.Taxonomies">
            <summary>
            Taxonomies
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.TaxonNode">
            <summary>
            TaxonNode
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ElementType.TaxonNodes">
            <summary>
            TaxonNodes
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Filter">
            <summary>
            Represents a filter in query.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Filter.#ctor">
            <summary>
            Initiating an instance of Filter class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Filter.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of Filter class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Filter.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Filter.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Filter.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Filter.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Filter.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Filter.Expression">
            <summary>
            Gets or sets the internal expression of the filter
            </summary>
            <value>An IDataViewElement instance.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor">
            <summary>
            Represents a visitor that builds a flatten search filter collection. 
            </summary>
            <version> 1.0.0 04 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.#ctor(System.String,System.String)">
            <summary>
            Instantiate an instance of FindSearchParameterVisitor class
            </summary>
            <param name="classAlias">The alias of the class that owns the attribute</param>
            <param name="attributeName">The attribute name</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.FindSearchParameterVisitor.SearchParameter">
            <summary>
            Gets the Parameter object found
            </summary>
            <value>A Parameter object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor">
            <summary>
            Represents a visitor that builds a flatten search filter collection. 
            </summary>
            <version> 1.0.0 04 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.#ctor">
            <summary>
            Instantiate a FlattenSearchFiltersVisitor instance
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.FlattenSearchFiltersVisitor.FlattenedSearchFilters">
            <summary>
            Gets the flattened search filters
            </summary>
            <value>A DataViewElementCollection object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.InExpr">
            <summary>
            Represents a In expression (In/NotIn)
            </summary>
            <version> 1.0.0 14 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.InExpr.Operators">
            <summary>
            Operators of In expression
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.ConvertToElementType(System.String)">
            <summary>
            Convert an operator string to a ElementType
            </summary>
            <param name="op">An operator string</param>
            <returns>A ElementType</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.#ctor(Newtera.Common.MetaData.DataView.ElementType)">
            <summary>
            Initiate an instance of InExpr object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.#ctor(Newtera.Common.MetaData.DataView.ElementType,Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initiate an instance of InExpr object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiate an instance of InExpr class.
            </summary>
            <param name="parent">The xml element represents the expr</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InExpr.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InExpr.Operator">
            <summary>
            Gets the XQuery operator.
            </summary>
            <value>An XQuery operator</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor">
            <summary>
            Represents a class that provides properties for data of result attributes
            in a data view results.
            </summary>
            <version>1.0.1 09 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.#ctor(System.String,System.Attribute[],Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.Schema.AttributeElementBase,Newtera.Common.MetaData.DataView.InstanceData,System.Boolean)">
            <summary>
            Initiating an instance of InstanceAttributePropertyDescriptor class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Gets an editor of the specified type.
            </summary>
            <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
            <returns>An instance of the requested editor type, or a null reference </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component. return an empty string if the value is null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.GetValue">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <returns>The value of a property.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component to the default value
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value. </param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>Return false</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Category">
            <summary>
            Gets the category which the simple attribute belongs,
            </summary>
            <value>The category of the attribute, it can be null</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Section">
            <summary>
            Gets the section which the simple attribute belongs,
            </summary>
            <value>The section of the attribute, it can be null</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsRequired">
            <summary>
            Gets the information indicating whether the property value is required
            </summary>
            <value>true if it is required, false otherwise.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsUnique">
            <summary>
            Gets the information indicating whether the property value has to be unique
            </summary>
            <value>true if it is unique, false otherwise.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsMultipleLined">
            <summary>
            Gets the information indicating whether the property is multipled lined,
            </summary>
            <value>True if it is multipled line, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsForFullTextSearch">
            <summary>
            Gets the information indicating whether the property is for full-text search.
            </summary>
            <value>True if it is for full-text search, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Rows">
            <summary>
            Gets the number of rows to display of a multipled lined property
            </summary>
            <value>Number of rows</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsMultipleChoice">
            <summary>
            Gets the information indicating whether the property value is a multiple choice.
            </summary>
            <value>true if it is a multiple choice, false otherwise.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsArray">
            <summary>
            Gets the information indicating whether the property is for an array.
            </summary>
            <value>true if it is for an array, false otherwise.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsPrimaryKey">
            <summary>
            Gets or sets the information indicating whether the property is for a primary key,
            </summary>
            <value>True if it is for a primary key, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.MinLength">
            <summary>
            Gets the min length of the property,
            </summary>
            <value>An integer, default is 0</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.MaxLength">
            <summary>
            Gets the max length of the property,
            </summary>
            <value>An integer, default is 100</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.HasConstraint">
            <summary>
            Gets the information indicating whether the property has a constraint, such
            EnumConstraint, RangeConstraint, or PatternConstraint,
            </summary>
            <value>True if it has a constraint, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Constraint">
            <summary>
            Get the constraint associated with the property
            </summary>
            <value>An ConstraintElementBase object, possible types are EnumConstraint,
            RangeContraint, and PatternConstraint. null if the property doesn't have a constraint</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.DefaultValue">
            <summary>
            Get the default value of the property if it exists.
            </summary>
            <value>A string object, null if it doesn't have a default value.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsRelationship">
            <summary>
            Gets the information indicating whether the property is a relationship,
            </summary>
            <value>True if it is a relationship, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsGoodForFullTextSearch">
            <summary>
            Gets the information indicating whether the property's value is good
            for full-text search.
            </summary>
            <value>True if it is good for full-text search, false otherwise</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.DataViewElement">
            <summary>
            Gets the IDataViewElement instance associated with the property descriptor.
            </summary>
            <value>An IDataViewElement instance.</value>
            <remarks>This is a InstanceAttributePropertyDescriptor specific method</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
            <value>Type of an InstanceData</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <value>A TypeConverter that is used to convert the Type of this property.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.Description">
            <summary>
            Gets the description of the property
            </summary>
            <value>The description of an instance attribute</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.DisplayName">
            <summary>
            Gets the name that can be displayed in a UI
            </summary>
            <value>The caption of an instance attribute</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsBrowsable">
            <summary>
            Gets a value indicating whether the member is browsable
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsLocalizable">
            <summary>
            Gets a value indicating whether this property should be localized
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only
            </summary>
            <value>true if the property is read-only; otherwise, false</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceAttributePropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>A Type that represents the type of the property. Default is type of string</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.InstanceData">
            <summary>
            Represents a data of an instance of a data view.
            </summary>
            <version>1.0.1 09 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Boolean)">
            <summary>
            Initiating an instance of InstanceData class
            </summary>
            <param name="dataView">The data view</param>
            <param name="dataSet">The data set that contains instance data</param>
            <param name="copyUniqueValues">Indicate whther to copy the values for unique attributes</param>
            <remarks>If the dataset is null, then values of an instance data are all empty</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.HasPermission(Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Gets the information indicating whether the user has permission to
            perform an action on this instance data.
            </summary>
            <param name="action">One of XaclActionType values</param>
            <returns>true if the user has permission to perform the action, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetANUM">
            <summary>
            Gets the number of attachments associated with the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.IncreamentANUM">
            <summary>
            Increment attachment number of the instance by one.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.DecreamentANUM">
            <summary>
            Decrement attachment number of the instance by one.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetAttributeValue(System.String)">
            <summary>
            Gets the value of an attribute of an instance.
            </summary>
            <param name="name">The attribute name</param>
            <returns>Attribute value</returns>
            <remarks>name can be that of a primary key of a relationship. In this case,
            name consists of relationship name and primary key name in format of
            RelationshipName_PrimaryKeyName</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.SetAttributeValue(System.String,System.Object)">
            <summary>
            Sets the value of an attribute of an instance.
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value to be set</param>
            <returns>Attribute value</returns>
            <remarks>name can be that of a primary key of a relationship. In this case,
            name consists of relationship name and primary key name in format of
            RelationshipName_PrimaryKeyName</remarks>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.SetAttributeStringValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute of an instance in string type.
            </summary>
            <param name="name">The attribute name</param>
            <param name="attributeValue">The attribute value in string to be set</param>
            <remarks>name can be that of a primary key of a relationship. In this case,
            name consists of relationship name and primary key name in format of
            RelationshipName_PrimaryKeyName</remarks>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.ResetAttributeValue(System.String)">
            <summary>
            Reset the value of an attribute to its original value
            </summary>
            <param name="name">The attribute name</param>
            <remarks>name can be that of a primary key of a relationship. In this case,
            name consists of relationship name and primary key name in format of
            RelationshipName_PrimaryKeyName</remarks>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetAttributeStringValue(System.String)">
            <summary>
            Gets the value of an attribute of an instance in string type.
            </summary>
            <param name="name">The attribute name</param>
            <returns>Attribute value in string</returns>
            <remarks>name can be that of a primary key of a relationship. In this case,
            name consists of relationship name and primary key name in format of
            RelationshipName_PrimaryKeyName</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetReferencedObjID(System.String)">
            <summary>
            Gets the objId of referenced instance, given a relationship name
            </summary>
            <param name="relationshipName">The name of relationship attribute.</param>
            <returns>The objId of referenced instance, it could be null.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.SetReferencedObjID(System.String,System.String)">
            <summary>
            Sets the objId of referenced instance, given a relationship name
            </summary>
            <param name="relationshipName">The name of relationship attribute.</param>
            <param name="objId">The objId of referenced instance.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.SaveValuesToDataSet">
            <summary>
            Save the changed values in InstanceData instance to the corresponding
            row in the DataSet.
            </summary>
            <remarks>If there is no DataSet associated with the InstanceData instance,
            no operation will be performed by this call.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.CopyInstanceValues(Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Int32,System.Boolean)">
            <summary>
            Copy the values of an instance from DataSet to Instance Attributes
            </summary>
            <param name="dataView">The dataview that is copy target</param>
            <param name="dataSet">The data set that is copy source</param>
            <param name="rowIndex">The row index to the data set</param>
            <param name="copyUniqueValues">A value indicating whether to copy unique values</param>
            <remarks>If dataSet is null, it will set values of all attributes to empty string</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.CopyInstanceValue(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Int32,System.Boolean)">
            <summary>
            Copy a value of an instance attribute from DataSet to an Instance Attribute
            </summary>
            <param name="instanceAttribute">The instance attribure that store copied value</param>
            <param name="dataView">The dataview that is copy target</param>
            <param name="dataSet">The data set that is copy source</param>
            <param name="rowIndex">The row index to the data set</param> 
            <param name="copyUniqueValues">A value indicating whether to copy unique values</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetRelationshipAttributeValue(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Gets the value of a relationship attribute that combines values of
            its primary keys.
            </summary>
            <param name="relationshipAttr">The DataRelationshipAttribute instance</param>
            <returns>The value of relationship attribute</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.SaveValueToDataSet(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Int32)">
            <summary>
            Save a value of an instance attribute to the corresponding cell in the DataSet.
            </summary>
            <param name="instanceAttribute">The instance attribure that store copied value</param>
            <param name="dataView">The dataview from which to get an attribute value</param>
            <param name="dataSet">The data set to which the value is saved</param>
            <param name="rowIndex">The row index indicating the row in the data set</param> 
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.IsAttributeValueChanged(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Int32)">
            <summary>
            Gets the value indicating whether the value of an instance attribute has
            been changed or not.
            </summary>
            <param name="instanceAttribute">The instance attribure</param>
            <param name="dataView">The dataview</param>
            <param name="dataSet">The data set that contains original values</param>
            <param name="rowIndex">The row index to the data set</param> 
            <remarks>This method call set IsValueChange property of the attribute being chekced</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.GetInstanceAttribute(System.String)">
            <summary>
            Find the instance attribute of given name from the data view
            </summary>
            <param name="name">The attribute name</param>
            <returns>The IDataViewElement</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceData.IsUnique(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Gets the value indicating whether the value of a simple attribute is unique
            </summary>
            <param name="simpleAttribute">A simple attribute</param>
            <returns>true if it is unique, false otherwise.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceData.RowIndex">
            <summary>
            Gets or sets the row index for the current instance in data set
            </summary>
            <value>The row index</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceData.DataSet">
            <summary>
            Gets or sets the data set that contains data for an instance.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceData.IsChanged">
            <summary>
            Gets the value indicating whether any values of instance attributes have been
            changed comparing to original values.
            </summary>
            <value>true if there are changed value(s), false otherwise</value>
            <remarks>This method call will also set a true flag to those attributes whose
            values have been changed</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceData.ObjId">
            <summary>
            Gets or sets the obj_id of the instance.
            </summary>
            <returns>A string representing obj_id</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceData.OwnerClassName">
            <summary>
            Gets the owner class name of the instance.
            </summary>
            <returns>A string representing owner class name</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.InstanceView">
            <summary>
            Represents a view for a single class instance. This is mainly for
            rendering an instance data in an editing UI form.
            </summary>
            <version>1.0.1 09 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.#ctor(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiating an instance of InstanceView class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet)">
            <summary>
            Initiating an instance of InstanceView class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.#ctor(Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,System.Boolean)">
            <summary>
            Initiating an instance of InstanceView class
            </summary>
            <param name="dataView">The data view for the instance</param>
            <param name="dataSet">The data set contains data for the instance</param>
            <param name="copyUniqueValues">A value indicating whether to copy the unique values to the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetPropertyDescriptors">
            <summary>
            Create a PropertyDescriptorCollection base on the result attributes
            in the data view.
            </summary>
            <returns>a PropertyDescriptorCollection</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetProperties(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.InstanceView.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.DataView">
            <summary>
            Gets the data view.
            </summary>
            <value>A DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.DataSet">
            <summary>
            Gets or sets the data set that contains the instance data.
            </summary>
            <value>The DataSet</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.InstanceData">
            <summary>
            Gets the InstanceData of the instance view.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.SelectedIndex">
            <summary>
            Gets or sets the index of a selected instance in a data set.
            </summary>
            <value>Index integer value</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.ShowRelationshipAttributes">
            <summary>
            Gets or sets the value indicating whether to show relationship attributes
            in the view.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.InstanceView.IsDataChanged">
            <summary>
            Gets the value indicating whether the data of an instance has been changed.
            </summary>
            <value>true if it is changed, false otherwise.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.LeftEmptyOperand">
            <summary>
            Represents a left empty operand of a binary expression.
            Only used to construct flatten search filter expression for the purpose of
            a data view building.
            </summary>
            <version>1.0.1 21 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftEmptyOperand.#ctor">
            <summary>
            Initiating an instance of LeftEmptyOperand class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftEmptyOperand.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftEmptyOperand.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftEmptyOperand.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftEmptyOperand.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.LeftEmptyOperand.Parent">
            <summary>
            Gets or sets the parent of left operand
            </summary>
            <value>The binary expression of left operand</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.LeftEmptyOperand.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.LeftParenthesis">
            <summary>
            Represents a left parenthesis in a search filter expression.
            Only used to construct flatten search filter expression.
            </summary>
            <version>1.0.1 05 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftParenthesis.#ctor">
            <summary>
            Initiating an instance of LeftParenthesis class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftParenthesis.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftParenthesis.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftParenthesis.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LeftParenthesis.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.LeftParenthesis.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.LeftParenthesis.Parent">
            <summary>
            Gets or sets the parent expression
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.LogicalExpr">
            <summary>
            Represents a logical expression (And/Or)
            </summary>
            <version> 1.0.0 14 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.LogicalExpr.Operators">
            <summary>
            Operators of logical expressions
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LogicalExpr.ConvertToElementType(System.String)">
            <summary>
            Convert an operator string to a ElementType
            </summary>
            <param name="op">An operator string</param>
            <returns>A ElementType</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LogicalExpr.#ctor(Newtera.Common.MetaData.DataView.ElementType,Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initiate an instance of LogicalExpr object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LogicalExpr.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiate an instance of LogicalExpr class.
            </summary>
            <param name="parent">The xml element represents the expr</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LogicalExpr.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.LogicalExpr.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.LogicalExpr.Operator">
            <summary>
            Gets the XQuery operator.
            </summary>
            <value>An XQuery operator</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.MultipleChoiceValueConverter">
            <summary>
            Conversion between an array of enum values and string
            </summary>
            <version>  1.0.1 07 Jul. 2004</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.MultipleChoiceValueConverter.#ctor(System.Type)">
            <summary>
            Initiating an instance of MultipleChoiceValueConverter class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.MultipleChoiceValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert an array of enum values to a string type
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.MultipleChoiceValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from an array of enum object to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.Parameter">
            <summary>
            Represents a parameter appeared in search filters.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.#ctor(System.String,System.String,Newtera.Common.MetaData.Schema.DataType)">
            <summary>
            Initiating an instance of Parameter class
            </summary>
            <param name="name">Name of an attribute that parameter is associated with</param>
            <param name="ownerClassAlias">The unique alias of DataClass element that owns the attribute</param>
            <param name="dataType">Parameter's data type. One of DataType values</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of Parameter class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.GetSchemaModelElement">
            <summary>
            Gets or sets the schema model element that a parameter is associated with.
            </summary>
            <value>The SchemaModelElement.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.Clone">
            <summary>
            Clone a paramter with a empty value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.Parameter.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Parameter.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Parameter.ClassAlias">
            <summary>
            Gets an alias of the class that owns this parameter
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Parameter.ParameterValue">
            <summary>
            Gets or sets the value of Parameter
            </summary>
            <value>A value string.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.Parameter.DataType">
            <summary>
            Gets the data type of a parameter
            </summary>
            <value>One of DataType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ParameterCollection">
            <summary>
            Represents a collection of parameters in "in" or "not in" expressions.
            </summary>
            <version>1.0.1 29 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParameterCollection.#ctor">
            <summary>
            Initiating an instance of ParameterCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParameterCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ParameterCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParameterCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParameterCollection.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ParameterCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ParenthesizedExpr">
            <summary>
            Represents a parenthesized expression appeared in search filters.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.ParenthesizedExpr.Operators">
            <summary>
            Definitions of parenthesied expressions
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.ConvertToElementType(System.String)">
            <summary>
            Convert an operator string to a ElementType
            </summary>
            <param name="op">An operator string</param>
            <returns>A ElementType</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.#ctor">
            <summary>
            Initiating an instance of ParenthesizedExpr class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ParenthesizedExpr class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.AddSearchExpr(Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.ElementType)">
            <summary>
            Add a search expression to the expression inside a parenthesis with a logical operator.
            If there exists an expression, the new expression is appended to the end.
            </summary>
            <param name="expr">The expression to be appended.</param>
            <param name="type">The logical operator type, either And or Or</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.RemoveLastSearchExpr">
            <summary>
            Remove the last relational expression from the search expression.
            </summary>
            <remarks>If there doesn't exist a search expression, this method does nothing.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ParenthesizedExpr.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ParenthesizedExpr.DataView">
            <summary>
            Gets or sets the DataViewModel that owns this element
            </summary>
            <value>DataViewModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ParenthesizedExpr.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ParenthesizedExpr.Expression">
            <summary>
            Gets or sets the internal expression
            </summary>
            <value>An IDataViewElement instance.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor">
            <summary>
            Represents a visitor that builds a primary key collection. 
            </summary>
            <version> 1.0.0 09 Nov 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.#ctor">
            <summary>
            Instantiate an instance of PrimaryKeysVisitor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.PrimaryKeysVisitor.PrimaryKeys">
            <summary>
            Gets the primary key collection.
            </summary>
            <value>A DataViewElementCollection object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ReferencedClassCollection">
            <summary>
            Represents a collection of referenced class.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ReferencedClassCollection.#ctor">
            <summary>
            Initiating an instance of ReferencedClassCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ReferencedClassCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ReferencedClassCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ReferencedClassCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ReferencedClassCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RelationalExpr">
            <summary>
            Represents a logical expressions
            </summary>
            <version> 1.0.0 14 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.DataView.RelationalExpr.Operators">
            <summary>
            Operator of relational expression
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.ConvertToElementType(System.String)">
            <summary>
            Convert an operator string to a ElementType
            </summary>
            <param name="op">An operator string</param>
            <returns>A ElementType</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.#ctor(Newtera.Common.MetaData.DataView.ElementType)">
            <summary>
            Initiate an instance of RelationalExpr object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.#ctor(Newtera.Common.MetaData.DataView.ElementType,Newtera.Common.MetaData.DataView.IDataViewElement,Newtera.Common.MetaData.DataView.IDataViewElement)">
            <summary>
            Initiate an instance of RelationalExpr object.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiate an instance of RelationalExpr class.
            </summary>
            <param name="parent">The xml element represents the expr</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.ToXQuery">
            <summary>
            Gets the XQuery representation of the element.
            </summary>
            <returns>A XQuery segmentation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationalExpr.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RelationalExpr.Operator">
            <summary>
            Gets the XQuery operator.
            </summary>
            <value>An XQuery operator</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RelationshipBegin">
            <summary>
            Represents a beginning of a relationship attribute in a search filter expression.
            Only used to construct flatten search filter expression.
            </summary>
            <version>1.0.1 05 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipBegin.#ctor(System.String)">
            <summary>
            Initiating an instance of RelationshipBegin class
            </summary>
            <param name="name">The name of relationship attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipBegin.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipBegin.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipBegin.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RelationshipBegin.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RelationshipBegin.LinkedClassAlias">
            <summary>
            Gets or sets the alias of the linked class of the relationship attribute
            </summary>
            <value>The name of linked class</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RelationshipEnd">
            <summary>
            Represents an end of a relationship attribute in a search filter expression.
            Only used to construct flatten search filter expression.
            </summary>
            <version>1.0.1 05 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipEnd.#ctor">
            <summary>
            Initiating an instance of RelationshipEnd class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipEnd.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipEnd.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipEnd.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RelationshipEnd.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView">
            <summary>
            Represents a view for primary keys of a relationship attribute.
            This is mainly for rendering a sub properties of a relationship attribute
            in an editing UI form.
            </summary>
            <version>1.0.1 11 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.#ctor(Newtera.Common.MetaData.DataView.DataRelationshipAttribute,Newtera.Common.MetaData.Schema.RelationshipAttributeElement,Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Initiating an instance of RelationshipPrimaryKeyView class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetPropertyDescriptors">
            <summary>
            Create a PropertyDescriptorCollection base on the result attributes
            in the data view.
            </summary>
            <returns>a PropertyDescriptorCollection</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.ToString">
            <summary>
            Convert to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetProperties(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor specification.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyView.RelationshipAttribute">
            <summary>
            Gets the relationship attribute that provides data for this view.
            </summary>
            <value>The DataSet</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter">
            <summary>
            Conversion between a RelationshipPrimaryKeyView object and string
            </summary>
            <version>  1.0.1 10 Nov. 2003</version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.#ctor(Newtera.Common.MetaData.DataView.DataRelationshipAttribute,Newtera.Common.MetaData.Schema.RelationshipAttributeElement,Newtera.Common.MetaData.DataView.InstanceData)">
            <summary>
            Initiating an instance of RelationshipPrimaryKeyViewConverter class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> 
            Let clients know it can convert a RelationshipPrimaryKeyView to a string type
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert from a RelationshipPrimaryKeyView object to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from string to a RelationshipPrimaryKeyView
            </summary>
            <param name="context"></param>
            <param name="info"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Tricks to allow changing values of child properties trigger the update
            on value of the parent property
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Retrun an instance of RelationshipPrimaryKeyView
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RelationshipPrimaryKeyViewConverter.SetPrimaryKeyValues(Newtera.Common.MetaData.DataView.InstanceData,System.String)">
            <summary>
            Parse the string containing primary key values separated by char
            and set the new values to the instance data
            </summary>
            <param name="instanceData">The instance data</param>
            <param name="primaryKeyValues">The primary key values</param>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.ResultAttributeCollection">
            <summary>
            Represents a collection of Result Attributes.
            </summary>
            <version>1.0.1 29 Oct 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ResultAttributeCollection.#ctor">
            <summary>
            Initiating an instance of ResultAttributeCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ResultAttributeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ResultAttributeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.ResultAttributeCollection.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.ResultAttributeCollection.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RightEmptyOperand">
            <summary>
            Represents a left empty operand of a binary expression.
            Only used to construct flatten search filter expression for the purpose of
            a data view building.
            </summary>
            <version>1.0.1 21 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightEmptyOperand.#ctor">
            <summary>
            Initiating an instance of RightEmptyOperand class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightEmptyOperand.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightEmptyOperand.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightEmptyOperand.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightEmptyOperand.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RightEmptyOperand.Parent">
            <summary>
            Gets or sets the parent of right operand
            </summary>
            <value>The binary expression of right operand</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RightEmptyOperand.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataView.RightParenthesis">
            <summary>
            Represents a left parenthesis in a search filter expression.
            Only used to construct flatten search filter expression.
            </summary>
            <version>1.0.1 05 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightParenthesis.#ctor">
            <summary>
            Initiating an instance of RightParenthesis class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightParenthesis.Accept(Newtera.Common.MetaData.DataView.IDataViewElementVisitor)">
            <summary>
            Accept a visitor of IDataViewElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor">A visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightParenthesis.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightParenthesis.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.DataView.RightParenthesis.ToString">
            <summary>
            Text representation of the element
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RightParenthesis.ElementType">
            <summary>
            Gets the type of element
            </summary>
            <value>One of ElementType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.DataView.RightParenthesis.Parent">
            <summary>
            Gets or sets the parent expression
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.FileSuffix">
            <summary> 
            The base class for all xacl node classes
            </summary>
            <version> 1.0.0 14 Jan 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.IFileTypeNode">
            <summary>
            Represents a common interface for the file type info.
            </summary>
            <version>  	1.0.0 14 Jan 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.IFileTypeNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.IFileTypeNode.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.IFileTypeNode.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileSuffix.#ctor">
            <summary>
            Initiate an instance of FileSuffix class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileSuffix.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of FileSuffix class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileSuffix.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileSuffix.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileSuffix.Suffix">
            <summary>
            Gets or sets the suffix string.
            </summary>
            <value>The suffix string</value>
            <example>doc, gif, and xml, etc.</example>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileSuffix.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.FileTypeException">
            <summary> 
            The FileTypeException class is the default exception type for FileType
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 14 Jan 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeException.#ctor(System.String)">
            <summary> 
            Constructor of a FileTypeException without an object
            </summary>
            <param name="reason">a description of the exception </param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception</param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.FileTypeInfo">
            <summary> 
            The base class for all xacl node classes
            </summary>
            <version> 1.0.0 14 Jan 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfo.#ctor">
            <summary>
            Initiate an instance of FileTypeInfo class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of FileTypeInfo class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfo.Init">
            <summary>
            Initialize the instance
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfo.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfo.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.Type">
            <summary>
            Gets or sets the type string.
            </summary>
            <value>The type string</value>
            <example>image/gif, image/jpeg, etc.</example>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.Description">
            <summary>
            Gets or sets the type description.
            </summary>
            <value>The type description</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.Suffixes">
            <summary>
            Gets or sets the file suffixes for the type.
            </summary>
            <value>A FileTypeNodeCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.Application">
            <summary>
            Gets or sets the application that consumes the type.
            </summary>
            <value>The application name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.SmallIconPath">
            <summary>
            Gets or sets a path of small icon image file.
            </summary>
            <value>A String object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.LargeIconPath">
            <summary>
            Gets or sets a path of large icon image file.
            </summary>
            <value>A String object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.SmallIconStream">
            <summary>
            Gets or sets a stream to read an image of the small icon.
            </summary>
            <value>A Stream object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.LargeIconStream">
            <summary>
            Gets or sets a stream to read an image of the large icon.
            </summary>
            <value>A Stream object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.ImageIndex">
            <summary>
            Gets or set an index that indicates the position of the icon in a
            image list.
            </summary>
            <value>An Integer representing an index</value>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfo.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.FileTypeInfoCollection">
            <summary>
            An object collection class to handle FileTypeInfo when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 14 Jan 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.FileTypeNodeCollection">
            <summary>
            An object collection class to handle IFileTypeNode when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 14 Jan 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.#ctor">
            <summary>
             Initializes a new instance of the FileTypeNodeCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of FileTypeNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Add(Newtera.Common.MetaData.FileType.IFileTypeNode)">
            <summary>
            Adds an IFileTypeNode to the FileTypeNodeCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.IndexOf(Newtera.Common.MetaData.FileType.IFileTypeNode)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Insert(System.Int32,Newtera.Common.MetaData.FileType.IFileTypeNode)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Remove(Newtera.Common.MetaData.FileType.IFileTypeNode)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Contains(Newtera.Common.MetaData.FileType.IFileTypeNode)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member using attribute index
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeNodeCollection.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.#ctor">
            <summary>
             Initializes a new instance of the FileTypeInfoCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of FileTypeInfoCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Read(System.String)">
            <summary>
            Constrauct a attachment info collection from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Read(System.IO.Stream)">
            <summary>
            Constrauct a attachment info from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            read the stream
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Read(System.IO.TextReader)">
            <summary>
            Constrauct a attachment info from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            read the text reader
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Write(System.String)">
            <summary>
            Write the attachment info to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            write to the file.
            </exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Write(System.IO.Stream)">
            <summary>
            Write the data view as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.Write(System.IO.TextWriter)">
            <summary>
            Write the data view as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.FileType.FileTypeException">FileTypeException is thrown when it fails to
            write to the stream.
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.GetXmlDocument">
            <summary>
            Gets the xml document that represents the attachment infos
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.FileTypeInfoCollection.NodeType">
            <summary>
            Gets the type of Node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.NodeFactory">
            <summary>
            A singleton class that creates an instance of IFileTypeNode based on a xml element
            </summary>
            <version>1.0.0 14 Jan 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.NodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.NodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IFileTypeNode type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IFileTypeNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.NodeFactory.ConvertTypeToString(Newtera.Common.MetaData.FileType.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.FileType.NodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.FileType.NodeFactory.Instance">
            <summary>
            Gets the NodeFactory instance.
            </summary>
            <returns> The NodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.FileType.NodeType">
            <summary>
            Specify the types of nodes in FileType package
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeType.Unknown">
            <summary>
            Unknown node type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeType.Collection">
            <summary>
            Collection type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeType.TypeCollection">
            <summary>
            Type collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeType.FileType">
            <summary>
            File Type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.FileType.NodeType.Suffix">
            <summary>
            Suffix
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator">
            <summary>
            A singleton class that generate code stub for a transformer.
            </summary>
            <version>1.0.0 22 Nov 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.theGenerator">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.Generate(System.String,Newtera.Common.MetaData.Mappings.NodeType)">
            <summary>
            Generate code graph using System.CodeDom type.
            </summary>
            <param name="className">The class name of transformer.</param>
            <param name="nodeType">One of NodeTypeEnum values</param>
            <returns>A CodeCompileUnit instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.CompileFromSource(Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage,System.String,System.String)">
            <summary>
            Compile a script of a language type
            </summary>
            <param name="language">One of the ScriptLanguage enum values</param>
            <param name="script">The script</param>
            <param name="libPath">The lib path where to find refrenced assemblies</param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.GetProvider(Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage)">
            <summary>
            Gets the provider for the selected language
            </summary>
            <returns>CodeDomProvider instance</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Generator.CodeStubGenerator.Instance">
            <summary>
            Gets the CodeStubGenerator instance.
            </summary>
            <returns> The CodeStubGenerator instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage">
            <summary>
            Specify types of language for transform script
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage.CSharp">
            <summary>
            C# language
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage.VBScript">
            <summary>
            Visual Basic script
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Generator.ScriptLanguage.JScript">
            <summary>
            Microsoft JScript
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ClassScript">
            <summary>
            The class represents script definitions for a specific class.
            A ClassScript object contains a collection of InstanceScript instances.
            </summary>
            <version>  1.0.0 23 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeBase">
            <summary> 
            The base class for all node in Scripts package
            </summary>
            <version> 1.0.0 23 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.IScriptNode">
            <summary>
            Represents a common interface for the nodes in Scripts package.
            </summary>
            <version> 1.0.0 23 Sep 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.IScriptNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.IScriptNode.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.IScriptNode.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeBase.#ctor">
            <summary>
            Initiate an instance of ScriptNodeBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeBase.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeBase.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.#ctor(System.String)">
            <summary>
            Initiate an instance of a ClassScript class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ClassScript class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.Marshal(System.Xml.XmlElement)">
            <summary>
            write ClassScript instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.IsAllInstancesSucceeded">
            <summary>
            Gets the information indicating whether all the instances have been
            imported successfully.
            </summary>
            <returns>true if they all succeeded, false, if any of them didn't</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.IsSucceeded">
            <summary>
            Gets or sets the information indicating whether the execution of
            importing instances in this class is succeeded?
            </summary>
            <value>true if succeeded, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.ClassName">
            <summary>
            Gets name of the class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.InstanceScripts">
            <summary>
            Gets or sets the collection of the attribute mappings contained in a ClassScript
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ClassScript.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ClassScriptCollection">
            <summary>
            Represents a collection of ClassScript instances.
            </summary>
            <version>1.0.0 23 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection">
            <summary>
            An object collection class to handle IScriptNode when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 23 Sep 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.#ctor">
            <summary>
             Initializes a new instance of the ScriptNodeCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ScriptNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Add(Newtera.Common.MetaData.Mappings.Scripts.IScriptNode)">
            <summary>
            Adds an IScriptNode to the ScriptNodeCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.AddRange(Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection)">
            <summary>
            Adds the elements of a ScriptNodeCollection to the end of the ScriptNodeCollection.
            </summary>
            <param name="collection">The ScriptNodeCollection whose elements should be added to the end of the ScriptNodeCollection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.IndexOf(Newtera.Common.MetaData.Mappings.Scripts.IScriptNode)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Insert(System.Int32,Newtera.Common.MetaData.Mappings.Scripts.IScriptNode)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Remove(Newtera.Common.MetaData.Mappings.Scripts.IScriptNode)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Contains(Newtera.Common.MetaData.Mappings.Scripts.IScriptNode)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScriptCollection.#ctor">
            <summary>
            Initiating an instance of ClassScriptCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ClassScriptCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ClassScriptCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ClassScriptCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript">
            <summary>
            The class represents an insert, update and search query for an instance,
            it also stores script execution status.
            </summary>
            <version>  1.0.0 23 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.OBJ_ID">
            <summary>
            Constant definition for OBJ_ID
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.#ctor">
            <summary>
            Initiate an instance of a InstanceScript class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of InstanceScript class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.Marshal(System.Xml.XmlElement)">
            <summary>
            write InstanceScript instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.SearchQuery">
            <summary>
            Gets or sets the search query that retrieve an instance
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.InsertQuery">
            <summary>
            Gets or sets the insert query that inserts an instance
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.UpdateQuery">
            <summary>
            Gets or sets the update query that updates an instance
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.Message">
            <summary>
            Gets or sets the message of execution
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.IsSucceeded">
            <summary>
            Gets or sets the information indicating whether the execution of
            the script is succeeded?
            </summary>
            <value>true if succeeded, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScript.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.InstanceScriptCollection">
            <summary>
            Represents a collection of InstanceScript instances.
            </summary>
            <version>1.0.0 23 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScriptCollection.#ctor">
            <summary>
            Initiating an instance of InstanceScriptCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.InstanceScriptCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of InstanceScriptCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.InstanceScriptCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.NodeType">
            <summary>
            Specify the types of nodes in Scripts package.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.Unknown">
            <summary>
            Unknown node type
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.ScriptManager">
            <summary>
            Script manager
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.ClassScript">
            <summary>
            Class Script
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.ClassScriptCollection">
            <summary>
            Class Script Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.InstanceScript">
            <summary>
            InstanceScript
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.InstanceScriptCollection">
            <summary>
            Instance Script Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.NodeType.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">
            <summary> 
            The ScriptException class is the default exception type for Scripts
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 23 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptException.#ctor(System.String)">
            <summary> Constructor of a ScriptException without an object
            
            </summary>
            <param name="reason">a description of the exception 
            
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception
            </param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager">
            <summary>
            This is the top level class that manages a classScript of executable scripts for
            an import job. It also provides methods to allow easy accesses, addition, and 
            deletion of mapping packages.
            </summary>
            <version> 1.0.0 23 Sep 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.#ctor">
            <summary>
            Initiate an instance of ScriptManager class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.IsClassScriptExist(System.String)">
            <summary>
            Gets the information indicating whether a ClassScript of the given name has
            existed.
            </summary>
            <param name="name">The ClassScript name</param>
            <returns>true if it exists, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.AddClassScript(Newtera.Common.MetaData.Mappings.Scripts.ClassScript)">
            <summary>
            Add a ClassScript to the collection
            </summary>
            <param name="classScript">The ClassScript to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.RemoveClassScript(Newtera.Common.MetaData.Mappings.Scripts.ClassScript)">
            <summary>
            Remove a ClassScript from the collection.
            </summary>
            <param name="classScript">The classScript instance to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Read(System.String)">
            <summary>
            Read import scripts from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Read(System.IO.Stream)">
            <summary>
            Read scripts from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            read the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Read(System.IO.TextReader)">
            <summary>
            Read scripts from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            read the text reader</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Write(System.String)">
            <summary>
            Write scripts to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            write to the file.</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Write(System.IO.Stream)">
            <summary>
            Write mappings as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Write(System.IO.TextWriter)">
            <summary>
            Write scripts as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptException">ScriptException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create scripts from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.Marshal(System.Xml.XmlElement)">
            <summary>
            write scripts to an xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.GetXmlDocument">
            <summary>
            Gets the xml document that represents an xacl policy
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.IsAllClassesSucceeded">
            <summary>
            Gets the information indicating whether all the classes have been
            imported successfully.
            </summary>
            <returns>true if they all succeeded, false, if any of them didn't</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.IsSucceeded">
            <summary>
            Gets or sets the information indicating whether the execution of
            all scripts are succeeded?
            </summary>
            <value>true if succeeded, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.ClassScripts">
            <summary>
            Gets the collection of the ClassScript instances
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptManager.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory">
            <summary>
            A singleton class that creates an instance of IScriptNode based on a xml element
            </summary>
            <version>1.0.0 23 Sep 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IScriptNode type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IScriptNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.ConvertTypeToString(Newtera.Common.MetaData.Mappings.Scripts.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Scripts.ScriptNodeFactory.Instance">
            <summary>
            Gets the ScriptNodeFactory instance.
            </summary>
            <returns> The ScriptNodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellGetter">
            <summary> 
            The class for getting a value to a SimpleAttribute
            </summary>
            <version> 1.0.0 20 Jan 2005</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.AttributeGetterBase">
            <summary> 
            The base class for all attribute getters.
            </summary>
            <version> 1.0.0 20 Jan 2005</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.IAttributeGetter">
            <summary>
            Represents a interface for a getter that gets a string value
            from a source attribute.
            </summary>
            <version> 1.0.0 20 Jan 2005</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.IAttributeGetter.GetValue">
            <summary>
            Get a value from a source attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.IAttributeGetter.Type">
            <summary>
            Gets the type of getter
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeGetterBase.#ctor(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Initiate an instance of AttributeGetterBase class
            </summary>
            <param name="srcDataRow">The source DataRow</param>
            <param name="srcDataView">The DataViewModel for source class</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeGetterBase.GetValue">
            <summary>
            Get a value from an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.AttributeGetterBase.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellGetter.#ctor(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.String,System.Int32,System.Int32)">
            <summary>
            Initiate an instance of ArrayDataCellGetter class
            </summary>
            <param name="srcDataRow">The source DataRow</param>
            <param name="srcDataView">The DataViewModel for source class</param>
            <param name="srcAttributeName"> The source attribute name</param>
            <param name="cellRow">The array cell row index</param>
            <param name="cellCol">The array cell col index</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellGetter.GetValue">
            <summary>
            Get a value from an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellGetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellSetter">
            <summary> 
            The class for setting a value to a cell of an ArrayAttribute.
            </summary>
            <version> 1.0.0 17 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterBase">
            <summary> 
            The base class for all attribute setters.
            </summary>
            <version> 1.0.0 17 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter">
            <summary>
            Represents a interface for a setter that sets a string value
            to a destination attribute.
            </summary>
            <version> 1.0.0 16 Nov 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter.AssignValue">
            <summary>
            Assign a value to an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterBase.#ctor(System.String,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32)">
            <summary>
            Initiate an instance of AttributeSetterBase class
            </summary>
            <param name="srcValue">The value from source</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param> 
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterBase.AssignValue">
            <summary>
            Assign a value to an attribute.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterBase.ConvertDataType(Newtera.Common.MetaData.DataView.IDataViewElement,System.String)">
            <summary>
            Make necessary data type conversion from original value
            </summary>
            <param name="element">The destination IDataViewElement</param>
            <param name="original">Original value</param>
            <returns>The converted value</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterBase.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellSetter.#ctor(System.String,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initiate an instance of ArrayDataCellSetter class
            </summary>
            <param name="srcValue">The value from source</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="dstAttributeName"> The destination array attribute name</param>
            <param name="cellRow">The array cell row index</param>
            <param name="cellCol">The array cell col index</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellSetter.AssignValue">
            <summary>
            Assign a value to an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.ArrayDataCellSetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection">
            <summary>
            An object collection class to handle IAttributeSetter when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 03 Sep 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.#ctor">
            <summary>
             Initializes a new instance of the AttributeSetterCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.Add(Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter)">
            <summary>
            Adds an IAttributeSetter to the AttributeSetterCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.AddRange(Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection)">
            <summary>
            Adds the elements of a AttributeSetterCollection to the end of the AttributeSetterCollection.
            </summary>
            <param name="collection">The AttributeSetterCollection whose elements should be added to the end of the AttributeSetterCollection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.IndexOf(Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.Insert(System.Int32,Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.Remove(Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.RemoveNodeAt(System.Int32)">
            <summary>
            removes the a specific object at the given index from the collection
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.Contains(Newtera.Common.MetaData.Mappings.Transform.IAttributeSetter)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.AttributeSetterCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor">
            <summary>
            Build an empty DataTable instance to reflect the structure of a destination class.
            </summary>
            <version> 1.0.0 24 Sep 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.#ctor(Newtera.Common.MetaData.Mappings.ClassMapping,System.Data.DataSet)">
            <summary>
            Instantiate an instance of BuildDataSetVisitor class
            </summary>
            <param name="classMapping">The ClassMapping instance used by the visitor</param>
            <param name="dstDataSet">Destination data set</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitDataView(Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Viste a data view element.
            </summary>
            <param name="element">A DataViewModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitDataClass(Newtera.Common.MetaData.DataView.DataClass)">
            <summary>
            Viste a data class element.
            </summary>
            <param name="element">A DataClass instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitFilter(Newtera.Common.MetaData.DataView.Filter)">
            <summary>
            Viste a filter element.
            </summary>
            <param name="element">A Filter instance</param>
            <returns>false to stop visiting filters</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitSimpleAttribute(Newtera.Common.MetaData.DataView.DataSimpleAttribute)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A DataSimpleAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitArrayAttribute(Newtera.Common.MetaData.DataView.DataArrayAttribute)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A DataArrayAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitRelationshipAttribute(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A DataRelationshipAttribute instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitResultAttributes(Newtera.Common.MetaData.DataView.ResultAttributeCollection)">
            <summary>
            Viste a result attribute Collection.
            </summary>
            <param name="element">A ResultAttributeCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitReferencedClasses(Newtera.Common.MetaData.DataView.ReferencedClassCollection)">
            <summary>
            Viste a referenced class Collection.
            </summary>
            <param name="element">A ReferencedClassCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitBinaryExpr(Newtera.Common.MetaData.DataView.BinaryExpr)">
            <summary>
            Viste a binary expression.
            </summary>
            <param name="element">A BinaryExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitLeftParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a left parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitRelationshipBegin(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            Start visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitRelationshipEnd(Newtera.Common.MetaData.DataView.DataRelationshipAttribute)">
            <summary>
            End visite a DataRelationshipAttribute.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitRightParenthesis(Newtera.Common.MetaData.DataView.ParenthesizedExpr)">
            <summary>
            Viste a right parenthesis.
            </summary>
            <param name="element">A ParenthesizedExpr instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitParameter(Newtera.Common.MetaData.DataView.Parameter)">
            <summary>
            Viste a search parameter.
            </summary>
            <param name="element">A Parameter instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitParametersBegin(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            Visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitParametersEnd(Newtera.Common.MetaData.DataView.ParameterCollection)">
            <summary>
            End visite a collection of parameters.
            </summary>
            <param name="element">A ParameterCollection instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitTaxonomyModel(Newtera.Common.MetaData.DataView.Taxonomy.TaxonomyModel)">
            <summary>
            Visit a TaxonomyModel.
            </summary>
            <param name="element">A TaxonomyModel instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.BuildDataSetVisitor.VisitTaxonNode(Newtera.Common.MetaData.DataView.Taxonomy.TaxonNode)">
            <summary>
            Visit a TaxonNode.
            </summary>
            <param name="element">A TaxonNode instance</param>
            <returns>true to contibute visiting nested elements, false to stop</returns>		
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.GetterFactory">
            <summary>
            A singleton class that creates an instance of IAttributeGetter
            </summary>
            <version>1.0.0 20 Jan 2005 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.GetterFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.GetterFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.GetterFactory.Create(Newtera.Common.MetaData.Mappings.Transform.GetterType,System.Data.DataRow,System.String,Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Creates an instance of IAttributeGetter type
            </summary>
            <param name="type">One of GetterType enum</param>
            <param name="dataRow">The DataRow instance</param>
            <param name="attributeName">The attribute name</param>
            <param name="dataView">The DataViewModel instance</param>
            <returns>A IAttributeGetter instance</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.GetterFactory.Instance">
            <summary>
            Gets the GetterFactory instance.
            </summary>
            <returns> The GetterFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.GetterType">
            <summary>
            Specify the types of attribute setters.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.GetterType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.GetterType.SimpleAttributeGetter">
            <summary>
            SimpleAttributeGetter
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.GetterType.ArrayDataCellGetter">
            <summary>
            ArrayDataCellGetter
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.GetterType.PrimaryKeyGetter">
            <summary>
            PrimaryKeyGetter
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.ITransformer">
            <summary>
            Represents a interface for a transformer that transform
            data from source to destination
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ITransformer.Transform(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Transform a collection of source values to a collection of destination
            values.
            </summary>
            <param name="srcValues">A collection of name/value pairs representing source values.</param>
            <param name="dstValues">A collection of name/value pairs that contains transformed destination values.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.ITransformer.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.ManyToManyTransformer">
            <summary> 
            The base class for all transformers
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.TransformerBase">
            <summary> 
            The base class for all transformers
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.#ctor">
            <summary>
            Initiate an instance of TransformerBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.OneToOneTransform(System.String)">
            <summary>
            An overloaded method for one-to-one transformation
            </summary>
            <param name="srcValue">A source value</param>
            <returns>A transformed destination value</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.ManyToOneTransform(System.Collections.Specialized.NameValueCollection)">
            <summary>
            An overloaded method for many-to-one transformation
            </summary>
            <param name="srcValues">A collection of name/value pairs representing source values</param>
            <returns>A transformed destination value</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.OneToManyTransform(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            An overloaded method for one-to-many transformation
            </summary>
            <param name="srcValue">A source value</param>
            <param name="dstValues">A collection of destination name/value pairs to store transformed values</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.ManyToManyTransform(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            An overloaded method for many-to-many transformation
            </summary>
            <param name="srcValues">A collection of source values</param>
            <param name="dstValues">A collection of destination name/value pairs to store transformed values</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.Transform(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Transform a collection of source values to a collection of destination
            values.
            </summary>
            <param name="srcValues">A collection of name/value pairs representing source values.</param>
            <param name="dstValues">A collection of name/value pairs that contains transformed destination values.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.TransformerBase.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ManyToManyTransformer.#ctor">
            <summary>
            Initiate an instance of ManyToManyTransformer class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.ManyToManyTransformer.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.ManyToOneTransformer">
            <summary> 
            The base class for all transformers
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.ManyToOneTransformer.#ctor">
            <summary>
            Initiate an instance of ManyToOneTransformer class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.ManyToOneTransformer.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.OneToManyTransformer">
            <summary> 
            The base class for all transformers
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.OneToManyTransformer.#ctor">
            <summary>
            Initiate an instance of OneToManyTransformer class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.OneToManyTransformer.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.OneToOneTransformer">
            <summary> 
            The base class for all transformers
            </summary>
            <version> 1.0.0 22 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.OneToOneTransformer.#ctor">
            <summary>
            Initiate an instance of OneToOneTransformer class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.OneToOneTransformer.TransformType">
            <summary>
            Gets the type of transformer.
            </summary>
            <value>One of the NodeType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeyGetter">
            <summary> 
            The class for getting a value to a SimpleAttribute
            </summary>
            <version> 1.0.0 20 Jan 2005</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeyGetter.#ctor(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.String,System.String)">
            <summary>
            Initiate an instance of PrimaryKeyGetter class
            </summary>
            <param name="srcDataRow">The source DataRow</param>
            <param name="srcDataView">The DataViewModel for source class</param>
            <param name="srcAttributeName"> The source attribute name</param>
            <param name="relationshipName">The name of the relationship that owns the primary key</param>		
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeyGetter.GetValue">
            <summary>
            Get a value from an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeyGetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeySetter">
            <summary> 
            The transformer setting a value to a cell of an ArrayAttribute.
            </summary>
            <version> 1.0.0 17 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeySetter.#ctor(System.String,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.String,System.String)">
            <summary>
            Initiate an instance of PrimaryKeySetter class
            </summary>
            <param name="srcValue">The value from source</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="dstAttributeName"> The destination array attribute name</param>
            <param name="relationshipName">The name of the relationship that owns the primary key</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeySetter.AssignValue">
            <summary>
            Assign a value to an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.PrimaryKeySetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.SetterType">
            <summary>
            Specify the types of attribute setters.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.SetterType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.SetterType.SimpleAttributeSetter">
            <summary>
            SimpleAttributeSetter
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.SetterType.ArrayDataCellSetter">
            <summary>
            ArrayDataCellSetter
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.SetterType.PrimaryKeySetter">
            <summary>
            PrimaryKeySetter
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeGetter">
            <summary> 
            The class for getting a value to a SimpleAttribute
            </summary>
            <version> 1.0.0 20 Jan 2005</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeGetter.#ctor(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.String)">
            <summary>
            Initiate an instance of SimpleAttributeGetter class
            </summary>
            <param name="srcDataRow">The source DataRow</param>
            <param name="srcDataView">The DataViewModel for source class</param>
            <param name="srcAttributeName"> The source attribute name</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeGetter.GetValue">
            <summary>
            Get a value from an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeGetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeSetter">
            <summary> 
            The class for setting a value to a SimpleAttribute
            </summary>
            <version> 1.0.0 17 Nov 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeSetter.#ctor(System.String,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.String)">
            <summary>
            Initiate an instance of SimpleAttributeSetter class
            </summary>
            <param name="srcValue">The value from source</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="dstAttributeName"> The destination attribute name</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeSetter.AssignValue">
            <summary>
            Assign a value to an attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Transform.SimpleAttributeSetter.Type">
            <summary>
            Gets the type of setter
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Transform.TransformCardinal">
            <summary>
            Specify the types of transform cardinal types.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.TransformCardinal.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.TransformCardinal.OneToOne">
            <summary>
            Transform one source row to one destination row
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.TransformCardinal.ManyToOne">
            <summary>
            Transform many source row to one destination row
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.Transform.TransformCardinal.AllToOne">
            <summary>
            Transform all source row to one destination row
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping">
            <summary>
            The class represents mapping definition of a source attribute and
            an array data cell of a destination array attribute.
            </summary>
            <version>1.0.0 31 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.AttributeMapping">
            <summary>
            The class represents mapping definition between a single source and
            a single destination attribute.
            </summary>
            <version>1.0.0 02 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingNodeBase">
            <summary> 
            The base class for all node in mapping package
            </summary>
            <version> 1.0.0 03 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.IMappingNode">
            <summary>
            Represents a common interface for the nodes in Mappings package.
            </summary>
            <version> 1.0.0 02 Sep 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.IMappingNode.Copy">
            <summary>
            Make a copy of the IMappingNode instance
            </summary>
            <returns>A copy of IMappingNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.IMappingNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.IMappingNode.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.IMappingNode.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.#ctor">
            <summary>
            Initiate an instance of MappingNodeBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.Copy">
            <summary>
            Make a copy of the IMappingNode instance
            </summary>
            <returns>A copy of IMappingNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.FireValueChangedEvent(System.Object)">
            <summary>
            Fire an event for value change
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of a type.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetProperties">
            <summary>
            Our implementation overrides GetProperties() only and creates a
            collection of custom property descriptors of type GlobalizedPropertyDescriptor
            and returns them to the caller instead of the default ones.
            </summary>
            <returns>A collection of Property Descriptors.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="E:Newtera.Common.MetaData.Mappings.MappingNodeBase.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.Mappings.MappingNodeBase.CaptionChanged">
            <summary>
            Caption Changed event handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.Transformer">
            <summary>
            Gets or sets the transformer associated with the mapping node
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.Name">
            <summary>
            Gets the name of item
            </summary>
            <value>The mapping item name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.Caption">
            <summary>
            Gets or sets the caption of item
            </summary>
            <value>The item caption.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.Description">
            <summary>
            Gets or sets the description of element
            </summary>
            <value>The element description.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.Position">
            <summary>
            Gets or sets position of this element among its sibling.
            </summary>
            <value>A zero-based integer representing the position.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeBase.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ITransformable">
            <summary>
            Represents a interface for the nodes in Mappings package that can transform
            a data row from source to destination.
            </summary>
            <version> 1.0.0 16 Nov 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ITransformable.DoTransform(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.Reflection.Assembly)">
            <summary>
            Perform transformation and return a collection of IAttributeSetter instances that set a source
            value to destination attribute.
            </summary>
            <param name="srcDataRow">The DataRow from source</param>
            <param name="srcDataView">The DataViewModel for the source class.</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of destination row.</param>
            <param name="assembly">The assembly contains transformer classes</param>
            <returns>A AttributeSetterCollection instance.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ITransformable.ScriptEnabled">
            <summary>
            Gets or sets the information indicating whether the script is enabled
            for transformation.
            </summary>
            <value>true if it is enabled, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ITransformable.ScriptLanguage">
            <summary>
            Gets or sets type of the script language
            </summary>
            <value>One of ScriptLanguage enum values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ITransformable.ClassType">
            <summary>
            Gets or sets class type of the script
            </summary>
            <value>Class type string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ITransformable.Script">
            <summary>
            Gets or sets a script of transformation.
            </summary>
            <value> The string representing transform script.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMapping.#ctor(System.String,System.String)">
            <summary>
            Initiate an instance of AttributeMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of AttributeMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an AttributeMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write AttributeMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMapping.DoTransform(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.Reflection.Assembly)">
            <summary>
            Perform transformation and return a collection of IAttributeSetter instances that set a source
            value to destination attribute.
            </summary>
            <param name="srcDataRow">The DataRow from source</param>
            <param name="srcDataView">The DataViewModel for source class, can be null.</param>		
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="assembly">The assembly contains transformer classes</param>
            <returns>A AttributeSetterCollection instance.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.SourceAttributeName">
            <summary>
            Gets  or sets name of the source attribute associated with a AttributeMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.DestinationAttributeName">
            <summary>
            Gets or sets name of the destination attribute associated with a AttributeMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.GetterType">
            <summary>
            Gets or sets getter type of the source attribute associated with a AttributeMapping
            </summary>
            <value>One of the GetterType enum</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.ScriptEnabled">
            <summary>
            Gets or sets the information indicating whether the script is enabled
            for transformation.
            </summary>
            <value>true if it is enabled, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.ScriptLanguage">
            <summary>
            Gets or sets type of the script language
            </summary>
            <value>One of ScriptLanguage enum values. Default is CSharp</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.ClassType">
            <summary>
            Gets or sets class type of the script
            </summary>
            <value>Class type string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMapping.Script">
            <summary>
            Gets or sets a script of transforming attribute value.
            </summary>
            <value> The transform expression.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.#ctor(System.String,System.String)">
            <summary>
            Initiate an instance of ArrayDataCellMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ArrayDataCellMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an ArrayDataCellMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write ArrayDataCellMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.DoTransform(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.Reflection.Assembly)">
            <summary>
            Perform transformation and return a collection of IAttributeSetter instances that set a source
            value to destination attribute.
            </summary>
            <param name="srcDataRow">The DataRow from source</param>
            <param name="srcDataView">The DataViewModel for source class, can be null.</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="assembly">The assembly contains transformer classes</param>
            <returns>An AttributeSetterCollection instance.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.GetIndex">
            <summary>
            Parse the row and column index which is part of the destination attribute
            name.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.ArrayAttributeName">
            <summary>
            Gets name of the array attribute associated with a ArrayDataCellMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.RowIndex">
            <summary>
            Gets the row index of the array data cell
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.ColIndex">
            <summary>
            Gets the column index of the array data cell
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ArrayDataCellMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.AttributeMappingCollection">
            <summary>
            Represents a collection of AttributeMapping instances.
            </summary>
            <version>1.0.0 02 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingNodeCollection">
            <summary>
            An object collection class to handle IMappingNode when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 03 Sep 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.#ctor">
            <summary>
             Initializes a new instance of the MappingNodeCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of MappingNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Add(Newtera.Common.MetaData.Mappings.IMappingNode)">
            <summary>
            Adds an IMappingNode to the MappingNodeCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.AddRange(Newtera.Common.MetaData.Mappings.MappingNodeCollection)">
            <summary>
            Adds the elements of a MappingNodeCollection to the end of the MappingNodeCollection.
            </summary>
            <param name="collection">The MappingNodeCollection whose elements should be added to the end of the MappingNodeCollection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.IndexOf(Newtera.Common.MetaData.Mappings.IMappingNode)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Insert(System.Int32,Newtera.Common.MetaData.Mappings.IMappingNode)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Remove(Newtera.Common.MetaData.Mappings.IMappingNode)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.RemoveNodeAt(System.Int32)">
            <summary>
            removes the a specific object at the given index from the collection
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Contains(Newtera.Common.MetaData.Mappings.IMappingNode)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Copy">
            <summary>
            Make a copy of the IMappingNode instance
            </summary>
            <returns>A copy of IMappingNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:Newtera.Common.MetaData.Mappings.MappingNodeCollection.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.Mappings.MappingNodeCollection.CaptionChanged">
            <summary>
            Caption changed event handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.IsAltered">
            <summary>
            Gets or sets the information indicating whether the collection
            has been altered.
            </summary>
            <value>true if it has been altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Name">
            <summary>
            Gets the name of element
            </summary>
            <value>The collection name, default is null</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Caption">
            <summary>
            Gets or sets the caption of element
            </summary>
            <value>The element caption.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Description">
            <summary>
            Gets or sets the description of element
            </summary>
            <value>The element description.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.Position">
            <summary>
            Gets or sets the display position of element
            </summary>
            <value>The display position.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMappingCollection.#ctor">
            <summary>
            Initiating an instance of AttributeMappingCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.AttributeMappingCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of AttributeMappingCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.AttributeMappingCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ClassMapping">
            <summary>
            The class represents mapping definition of two classes between source and
            destination. A ClassMapping object contains defintions of attribute mappings
            between a source class and a destination class, and/or default values
            for some of destination attributes.
            </summary>
            <version>  1.0.0 03 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.#ctor(System.String,System.String)">
            <summary>
            Initiate an instance of a ClassMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ClassMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.Clear">
            <summary>
            Clear the attribute mappings and default values.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.Transform(System.Data.DataSet,System.Data.DataSet,System.Reflection.Assembly)">
            <summary>
            Transform data from source format to destination format according to
            the class mappings.
            </summary>
            <param name="sourceDataSet">The DataSet for the source data</param>
            <param name="dstDataSet">The DataSet containing the transformed data.</param>
            <param name="assembly">An assembly containing transformer classes.</param>
            <remarks>The method will write the transformed data into
            the corresponding DataTable instance(s) in destinationDataSet.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.Select(System.Data.DataSet,System.Data.DataSet,System.Reflection.Assembly)">
            <summary>
            Select data from source instances and copy them to an destination instance
            according to the class mappings.
            </summary>
            <param name="sourceDataSet">The DataSet for the source data</param>
            <param name="dstDataSet">The DataSet containing the transformed data.</param>
            <param name="assembly">An assembly containing transformer classes.</param>
            <remarks>This method is used by Selector. It will create an new row to
            destination DataTable only once to store the selected data from multiple
            instances in the source DataSet for a certain class.
            For simple attribute in destination row, the value is override by each
            iteration; for array attribute in destination row, a new row is added
            to the array value by each iteration.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.GetDefaultValue(System.String)">
            <summary>
            Gets a DefaultValue instance for a given attribute name.
            </summary>
            <param name="dstAttributeName">The given attribute name</param>
            <returns>A DefaultValue instance, null if no DefaultValue instance with the given name.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.IsDefaultValueExist(System.String)">
            <summary>
            Gets the information indicating whether a DefaultValue instance for a given
            attribute name has already existed.
            </summary>
            <param name="dstAttributeName">The given attribute name</param>
            <returns>true if the default value has existed, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write ClassMapping instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.UnsetTransformers">
            <summary>
            Clear the transformer cached in the mappings in the previouse action
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.AppendScripts(System.Text.StringBuilder)">
            <summary>
            Append the transform scripts defined in the class mapping to the given
            StringBuilder
            </summary>
            <param name="builder">The StringBuilder instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.TransformRow(System.Data.DataRow,System.Data.DataSet,System.Int32,System.Reflection.Assembly)">
            <summary>
            Transform one source row to one destination row using the transformations
            defined in Attribute Mapping list.
            </summary>
            <param name="srcDataRow">The DataRow instance</param>
            <param name="dstDataSet">The destination DataSet instance</param>
            <param name="rowIndex">The zero-based row index</param>
            <param name="assembly">An assembly containing transformer classes.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.MergeRow(System.Data.DataRow,System.Data.DataSet,System.Int32,System.Reflection.Assembly)">
            <summary>
            Transform and merge the source row to the single destination row using
            the transformations defined in Attribute Mapping list.
            </summary>
            <param name="srcDataRow">The DataRow instance</param>
            <param name="dstDataSet">The destination DataSet instance</param>
            <param name="rowIndex">The zero-based row index</param>
            <param name="assembly">An assembly containing transformer classes.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.SelectRow(System.Data.DataRow,System.Data.DataSet,System.Reflection.Assembly)">
            <summary>
            Perform the data selection defined in Attribute Mapping list
            using a data row from the source DataSet.
            </summary>
            <param name="srcDataRow">The DataRow instance</param>
            <param name="dstDataSet">The destination DataSet instance</param>
            <param name="assembly">An assembly containing transformer classes.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.CreateEmptyRow(System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel)">
            <summary>
            Create an empty row in corresponding destination DataTable to store the
            transformed data. For each relationship in the destination DataViewModel
            we also need to create a new DataRow in a related DataTable to store
            primary key values.
            </summary>
            <param name="dstDataSet">The destination DataSet instance</param>
            <param name="dstDataView">The destination DataViewModel instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMapping.SetDefaultValues(Newtera.Common.MetaData.Mappings.DefaultValueCollection,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32)">
            <summary>
            Set a default values to a destination attributes in destination data row
            </summary>
            <param name="defaultValues">The DefaultValueCollection instance</param>
            <param name="dstDataSet">The destination DataSet instance</param>
            <param name="dstDataView">The destination DataViewModel instance</param>
            <param name="rowIndex">The current row index</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.IsChecked">
            <summary>
            Gets or sets the information indicating whether the class mapping is checked or not
            </summary>
            <value>The default is false</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.SourceClassName">
            <summary>
            Gets or sets name of the source class associated with a ClassMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.DestinationClassName">
            <summary>
            Gets name of the destination class associated with a ClassMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.SourceDataView">
            <summary>
            Gets or sets the default DataView instance for the source class
            </summary>
            <value>A DataViewModel instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.DestinationDataView">
            <summary>
            Gets or sets the default DataView instance for the destination class
            </summary>
            <value>A DataViewModel instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.AttributeMappings">
            <summary>
            Gets or sets the collection of the attribute mappings contained in a ClassMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.DefaultValues">
            <summary>
            Gets or sets the collection of DefaultValue instances
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.TransformCardinalType">
            <summary>
            gets or sets the transform cardinal type
            </summary>
            <value>One of the TransformCardinal enum values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ClassMappingCollection">
            <summary>
            Represents a collection of ClassMapping instances.
            </summary>
            <version>1.0.0 03 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMappingCollection.#ctor">
            <summary>
            Initiating an instance of ClassMappingCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ClassMappingCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ClassMappingCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ClassMappingCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.DataSourceType">
            <summary>
            Specify the types of data sources supported by Mappings package.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.DataSourceType.Unknown">
            <summary>
            Unknown data source
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.DataSourceType.Text">
            <summary>
            Text format
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.DataSourceType.Excel">
            <summary>
            Excel format
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.DataSourceType.Xml">
            <summary>
            Xml format
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.DefaultValue">
            <summary>
            The class represents a default value of a destination attribute.
            </summary>
            <version>1.0.0 28 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValue.#ctor(System.String,System.String)">
            <summary>
            Initiate an instance of DefaultValue class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValue.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DefaultValue class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValue.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an DefaultValue from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValue.Marshal(System.Xml.XmlElement)">
            <summary>
            write DefaultValue to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.DefaultValue.DestinationAttributeName">
            <summary>
            Gets name of the destination attribute associated with a DefaultValue
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.DefaultValue.Value">
            <summary>
            Gets or sets default value of destination attribute.
            </summary>
            <value> The default value</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.DefaultValue.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.DefaultValueCollection">
            <summary>
            Represents a collection of DefaultValue instances.
            </summary>
            <version>1.0.0 28 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValueCollection.#ctor">
            <summary>
            Initiating an instance of DefaultValueCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.DefaultValueCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DefaultValueCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.DefaultValueCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.InputOutputAttribute">
            <summary>
            The class represents a single source attribute or a destination attribute
            that is an input or output of MultiAttributeMapping instance.
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.InputOutputAttribute.#ctor(System.String)">
            <summary>
            Initiate an instance of InputOutputAttribute class.
            </summary>
            <param name="attributeName">Input or output attribute name.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.InputOutputAttribute.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of InputOutputAttribute class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.InputOutputAttribute.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an InputOutputAttribute from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.InputOutputAttribute.Marshal(System.Xml.XmlElement)">
            <summary>
            write InputOutputAttribute to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.InputOutputAttribute.GetIndex">
            <summary>
            Parse the row and column index which is part of the destination attribute
            name.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.AttributeName">
            <summary>
            Gets name of the destination attribute associated with a InputOutputAttribute
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.AttributeValue">
            <summary>
            Gets value of the destination attribute associated with a InputOutputAttribute
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.SetterType">
            <summary>
            Gets or sets the type of attribute setter.
            </summary>
            <value>One of SetterType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.GetterType">
            <summary>
            Gets or sets the type of attribute getter.
            </summary>
            <value>One of GetterType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.RowIndex">
            <summary>
            Gets the row index of the array data cell
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.ColIndex">
            <summary>
            Gets the column index of the array data cell
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.RelationshipAttributeName">
            <summary>
            Gets name of the relationship attribute associated with a PrimaryKeyMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.InputOutputAttribute.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ManyToManyMapping">
            <summary>
            The class represents a mapping between many source attributes and
            many destination attributes
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase">
            <summary>
            The class represents mapping definition between multiple source attributes
            and multiple destination attributes
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.#ctor">
            <summary>
            Initiate an instance of MultiAttributeMappingBase class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of MultiAttributeMappingBase class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.Transform(System.String)">
            <summary>
            Transform a string to another string instance
            </summary>
            <param name="srcData">The source string</param>
            <returns>The transformed string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an MultiAttributeMappingBase from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.Marshal(System.Xml.XmlElement)">
            <summary>
            write MultiAttributeMappingBase to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.DoTransform(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.Reflection.Assembly)">
            <summary>
            Perform transformation and return a collection of IAttributeSetter instances that set a source
            value to destination attribute.
            </summary>
            <param name="srcDataRow">The DataRow from source</param>
            <param name="srcDataView">The DataViewModel for source class.</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="assembly">The assembly contains transformer classes</param>
            <returns>A AttributeSetterCollection instance.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.GetArrayAttributeName(System.String)">
            <summary>
            Gets name of the array attribute from an array cell name
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.X">
            <summary>
            Gets or sets the x coordinate of top-left corner of rectangle representing
            the mapping.
            </summary>
            <value>The X </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.Y">
            <summary>
            Gets or sets the y coordinate of top-left corner of rectangle representing
            the mapping.
            </summary>
            <value>The y </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.InputAttributes">
            <summary>
            Gets a collection of input attributes
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.OutputAttributes">
            <summary>
            Gets a collection of output attributes
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.ScriptEnabled">
            <summary>
            Gets or sets the information indicating whether the script is enabled
            for transformation.
            </summary>
            <value>true if it is enabled, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.ScriptLanguage">
            <summary>
            Gets or sets type of the script language
            </summary>
            <value>One of ScriptLanguage enum values. Default is CSharp</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.ClassType">
            <summary>
            Gets or sets class type of the script
            </summary>
            <value>Class type string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MultiAttributeMappingBase.Script">
            <summary>
            Gets or sets a script of transforming attribute value.
            </summary>
            <value> The transform expression.</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToManyMapping.#ctor">
            <summary>
            Initiate an instance of ManyToManyMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToManyMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ManyToManyMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToManyMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an ManyToManyMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToManyMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write ManyToManyMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ManyToManyMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.ManyToOneMapping">
            <summary>
            The class represents a mapping between many source attributes and
            many destination attributes
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToOneMapping.#ctor">
            <summary>
            Initiate an instance of ManyToOneMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToOneMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of ManyToOneMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToOneMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an ManyToOneMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.ManyToOneMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write ManyToOneMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.ManyToOneMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingException">
            <summary> 
            The MappingException class is the default exception type for Mappings
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 02 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingException.#ctor(System.String)">
            <summary> Constructor of a MappingException without an object
            
            </summary>
            <param name="reason">a description of the exception 
            
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception
            </param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingManager">
            <summary>
            This is the top level class that manages all Mapping packages for a
            schema. It also provides methods to allow easy accesses, addition, and 
            deletion of mapping packages.
            </summary>
            <version> 1.0.0 03 Sep 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.#ctor">
            <summary>
            Initiate an instance of MappingManager class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.GetMappingPackage(System.String)">
            <summary>
            Gets a mapping packages of given name
            </summary>
            <param name="name">The package name</param>
            <returns>A MappingPackage instance, null if not found.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.IsPackageExist(System.String)">
            <summary>
            Gets the information indicating whether a package of the given name has
            existed.
            </summary>
            <param name="name">The package name</param>
            <returns>true if it exists, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.GetMappingPackages(Newtera.Common.MetaData.Mappings.DataSourceType)">
            <summary>
            Gets mapping packages for a source data type
            </summary>
            <param name="type">One of the DataSourceType enum values</param>
            <returns>A collection of MappingPackage objects, it can be an empty collection.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.AddMappingPackage(Newtera.Common.MetaData.Mappings.MappingPackage)">
            <summary>
            Add a mapping package to the collection
            </summary>
            <param name="package">The MappingPackage to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.RemoveMappingPackage(Newtera.Common.MetaData.Mappings.MappingPackage)">
            <summary>
            Remove a mapping package from the collection.
            </summary>
            <param name="package">The package instance to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Read(System.String)">
            <summary>
            Read mappings from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Read(System.IO.Stream)">
            <summary>
            Read mappings from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Read(System.IO.TextReader)">
            <summary>
            Read mappings from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the text reader</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Write(System.String)">
            <summary>
            Write mappings to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the file.</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Write(System.IO.Stream)">
            <summary>
            Write mappings as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Write(System.IO.TextWriter)">
            <summary>
            Write mappings as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create mappings from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.Marshal(System.Xml.XmlElement)">
            <summary>
            write mappings to an xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.GetXmlDocument">
            <summary>
            Gets the xml document that represents an mappings
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingManager.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the mappings changed
            </summary>
            <param name="sender">the IXaclNode that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingManager.IsAltered">
            <summary>
            Gets or sets the information indicating whether rule information has been
            altered.
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingManager.IsEmpty">
            <summary>
            Gets the information indicating whether it is an empty rule set
            </summary>
            <value>true if it is an empty rule set, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingManager.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingNodeFactory">
            <summary>
            A singleton class that creates an instance of IMappingNode based on a xml element
            </summary>
            <version>1.0.0 02 Sep 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.MappingNodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IMappingNode type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IMappingNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeFactory.ConvertTypeToString(Newtera.Common.MetaData.Mappings.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingNodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingNodeFactory.Instance">
            <summary>
            Gets the MappingNodeFactory instance.
            </summary>
            <returns> The MappingNodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingPackage">
            <summary>
            The class represents mapping package of between a source and
            destination. A mapping package contains one or more ClassMapping objects
            and parsing information for the source data.
            </summary>
            <version>  1.0.0 04 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.#ctor(Newtera.Common.MetaData.Mappings.DataSourceType)">
            <summary>
            Initiate an instance of a MappingPackage class.
            </summary>
            <param name="dataSourceType">One of DataSourceType enum</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of MappingPackage class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.GetDefaultConverterTypeName(Newtera.Common.MetaData.Mappings.DataSourceType)">
            <summary>
            Gets the default converter type name based on the data source type
            </summary>
            <param name="dataSourceType">One of the DataSourceType values</param>
            <returns>A string representing a type name of default converter.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.Transform(System.Data.DataSet,System.String)">
            <summary>
            Transform data from source format to destination format according to
            the class mappings.
            </summary>
            <param name="sourceDataSet">The DataSet for the source data</param>
            <param name="libPath">The directory where to place the compiled assembly for transform script.</param>
            <returns>The DataSet for destination data.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.AddClassMapping(System.String,System.String)">
            <summary>
            Add a ClassMapping instance to the MappingPackage's class mapping collection
            if the mapping does not exist, otherwise, modify the existing ClassMapping instance
            A ClassMapping instance is identified by the source name.
            </summary>
            <param name="sourceName">The source name</param>
            <param name="destinationName">The destination name</param>
            <returns>The ClassMapping instance added or located.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.FindClassMappingBySrcName(System.String)">
            <summary>
            Gets the first ClassMapping instance whose source class name equals
            to the given one.
            </summary>
            <param name="srcName">The source class name</param>
            <returns>The matched ClassMapping instance or null if not matched.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.Marshal(System.Xml.XmlElement)">
            <summary>
            write MappingPackage instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackage.CompileScripts(System.String)">
            <summary>
            Compile the transform scripts defined in this package into an assembly
            and place the assembly in a given path
            </summary>
            <param name="libPath">The path where to place the assembly</param>
            <returns>The compiled assembly</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.ConverterTypeName">
            <summary>
            Gets or sets the converter type name
            </summary>
            <value>A converter type name consists of converter class name and assembly name.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.DataSourceType">
            <summary>
            Gets or sets the type of data source
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.TextFormat">
            <summary>
            Gets the TextFormat instance
            </summary>
            <remarks>Valid when the data source type is Text</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.ClassMappings">
            <summary>
            Gets the ClassMapping instances contained in a MappingPackage
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.CheckedClassMappings">
            <summary>
            Gets the checked ClassMapping instances contained in a MappingPackage
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackage.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.MappingPackageCollection">
            <summary>
            Represents a collection of MappingPackage instances.
            </summary>
            <version>1.0.0 04 Sep 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackageCollection.#ctor">
            <summary>
            Initiating an instance of MappingPackageCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.MappingPackageCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of MappingPackageCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.MappingPackageCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.NodeType">
            <summary>
            Specify the types of nodes in Mappings package.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.MappingManager">
            <summary>
            MappingManager
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.MappingPackage">
            <summary>
            MappingPackage
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.MappingPackageCollection">
            <summary>
            MappingPackageCollection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.ClassMapping">
            <summary>
            ClassMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.AttributeMapping">
            <summary>
            AttributeMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.ClassMappingCollection">
            <summary>
            ClassMappingCollection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.AttributeMappingCollection">
            <summary>
            AttributeMappingCollection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.TextFormat">
            <summary>
            TextFormat
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.DefaultValueCollection">
            <summary>
            DefaultValueCollection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.ArrayDataCellMapping">
            <summary>
            ArrayDataCellMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.PrimaryKeyMapping">
            <summary>
            Primary key mapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.InputOutputAttribute">
            <summary>
            Input or output attribute definition
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.OneToManyMapping">
            <summary>
            OneToManyMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.ManyToOneMapping">
            <summary>
            ManyToOneMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.ManyToManyMapping">
            <summary>
            ManyToManyMapping
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.TransformScript">
            <summary>
            Transform script
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.Selector">
            <summary>
            Selector
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.SelectorCollection">
            <summary>
            Selector Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Mappings.NodeType.SelectorManager">
            <summary>
            SelectorManager
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.OneToManyMapping">
            <summary>
            The class represents a mapping between a single source attribute and
            many destination attributes
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.OneToManyMapping.#ctor">
            <summary>
            Initiate an instance of OneToManyMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.OneToManyMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of OneToManyMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.OneToManyMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an OneToManyMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.OneToManyMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write OneToManyMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.OneToManyMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping">
            <summary>
            The class represents mapping definition of a source attribute and
            an primary key of a relationship attribute.
            </summary>
            <version>1.0.0 17 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.#ctor(System.String,System.String)">
            <summary>
            Initiate an instance of PrimaryKeyMapping class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of PrimaryKeyMapping class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an PrimaryKeyMapping from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.Marshal(System.Xml.XmlElement)">
            <summary>
            write PrimaryKeyMapping to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.DoTransform(System.Data.DataRow,Newtera.Common.MetaData.DataView.DataViewModel,System.Data.DataSet,Newtera.Common.MetaData.DataView.DataViewModel,System.Int32,System.Reflection.Assembly)">
            <summary>
            Perform transformation and return a collection of IAttributeSetter instances that set a source
            value to destination attribute.
            </summary>
            <param name="srcDataRow">The DataRow from source</param>
            <param name="srcDataView">The DataViewModel for source class. Can be null</param>
            <param name="dstDataSet">The destination DataSet</param>
            <param name="dstDataView">The DataViewModel for destination class</param>
            <param name="rowIndex">The row index of current transformed row.</param>
            <param name="assembly">The assembly contains transformer classes</param>
            <returns>A AttributeSetterCollection instance.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.RelationshipAttributeName">
            <summary>
            Gets name of the relationship attribute associated with a PrimaryKeyMapping
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.PrimaryKeyMapping.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.Selector">
            <summary>
            The class represents selector that selects values from multiple sources
            instances and copy them to a single destination instance. it is used for
            creating a new instance of a class from existing instances of different
            classes. A Selector contains one or more ClassMapping objects.
            </summary>
            <version>  1.0.0 09 Jan 2005</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.#ctor(System.String)">
            <summary>
            Initiate an instance of a Selector class.
            </summary>
            <param name="name">The unique name of selector.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of Selector class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.Clear">
            <summary>
            Clear the selector
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.Select(System.Data.DataSet)">
            <summary>
            Select data from source DataSet and copy it to an instance in a destination
            DataSet according to the selection definitions.
            </summary>
            <param name="sourceDataSet">The DataSet representing the source data</param>
            <returns>The DataSet representing for destination data.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.AddClassMapping(System.String,System.String)">
            <summary>
            Add a ClassMapping instance to the Selector's class mapping collection
            if the mapping does not exist, otherwise, modify the existing ClassMapping instance
            A ClassMapping instance is identified by the source name.
            </summary>
            <param name="sourceName">The source name</param>
            <param name="destinationName">The destination name</param>
            <returns>The ClassMapping instance added or located.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.FindClassMappingBySrcName(System.String)">
            <summary>
            Gets the first ClassMapping instance whose source class name equals
            to the given one.
            </summary>
            <param name="srcName">The source class name</param>
            <returns>The matched ClassMapping instance or null if not matched.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.Marshal(System.Xml.XmlElement)">
            <summary>
            write Selector instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.ToXPath">
            <summary>
            Return a xpath representation of the Selector node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.Selector.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Selector.DestinationClassName">
            <summary>
            Gets or sets the name of destination class of this selector
            </summary>
            <value>The string for destination class name.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Selector.ClassMappings">
            <summary>
            Gets the ClassMapping instances contained in a Selector
            </summary>
            <value> A collection of ClassMapping instances.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Selector.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Selector.SelectorManager">
            <summary>
            Gets or sets the SelectorManager that manages this Selector.
            </summary>
            <value>A SelectorManager instance.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.Selector.Parent">
            <summary>
            Return a  parent of the Taxonomy node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.SelectorCollection">
            <summary>
            Represents a collection of Selector instances.
            </summary>
            <version>1.0.0 09 Jan 2005</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorCollection.#ctor">
            <summary>
            Initiating an instance of SelectorCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of SelectorCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.SelectorManager">
            <summary>
            This is the top level class that manages all Selectors for a
            schema. It also provides methods to allow easy accesses, addition, and 
            deletion of Selectors.
            </summary>
            <version> 1.0.0 09 Jan 2005 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.#ctor">
            <summary>
            Initiate an instance of SelectorManager class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.GetSelector(System.String)">
            <summary>
            Gets a selector of given name
            </summary>
            <param name="name">The selector name</param>
            <returns>A Selector instance, null if not found.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.GetSelectors(System.String)">
            <summary>
            Gets a collection selectors for a given destination class.
            </summary>
            <param name="dstClassName">The destination class name.</param>
            <returns>A SelectorCollection instance.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.IsSelectorExist(System.String)">
            <summary>
            Gets the information indicating whether a selector of the given name has
            existed.
            </summary>
            <param name="name">The selector name</param>
            <returns>true if it exists, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.AddSelector(Newtera.Common.MetaData.Mappings.Selector)">
            <summary>
            Add a selector to the collection
            </summary>
            <param name="selector">The Selector to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.RemoveSelector(Newtera.Common.MetaData.Mappings.Selector)">
            <summary>
            Remove a selector from the collection.
            </summary>
            <param name="selector">The selector instance to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Read(System.String)">
            <summary>
            Read selectors from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Read(System.IO.Stream)">
            <summary>
            Read selectors from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Read(System.IO.TextReader)">
            <summary>
            Read selectors from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            read the text reader</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Write(System.String)">
            <summary>
            Write selectors to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the file.</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Write(System.IO.Stream)">
            <summary>
            Write selectors as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Write(System.IO.TextWriter)">
            <summary>
            Write selectors as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Mappings.MappingException">MappingException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create selectors from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.Marshal(System.Xml.XmlElement)">
            <summary>
            write selectors to an xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.GetXmlDocument">
            <summary>
            Gets the xml document that represents an selectors
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the selectors changed
            </summary>
            <param name="sender">the IXaclNode that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.ToXPath">
            <summary>
            Return a xpath representation of the SelectorManager node
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.SelectorManager.GetChildren">
            <summary>
            Return a  of children of the Taxonomy node
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.IsAltered">
            <summary>
            Gets or sets the information indicating whether selector has been
            altered.
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.IsEmpty">
            <summary>
            Gets the information indicating whether it is an empty selector collection
            </summary>
            <value>true if it is an empty selector collection, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.Selectors">
            <summary>
            Gets a collection of Selector instances held by the manager
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.MetaData">
            <summary>
            Gets or sets the meta data that owns the SelectorManager
            </summary>
            <returns> A MetaDataModel object</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.SelectorManager.Parent">
            <summary>
            Return a  parent of the SelectorManager node
            </summary>
            <returns>The parent of the Taxonomy node</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.TextFormat">
            <summary>
            The class represents the text format definition or text converter definition
            for a text file.
            </summary>
            <version>1.0.0 04 Sep 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TextFormat.#ctor">
            <summary>
            Initiate an instance of TextFormat class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TextFormat.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of TextFormat class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TextFormat.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an TextFormat from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TextFormat.Marshal(System.Xml.XmlElement)">
            <summary>
            write TextFormat to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TextFormat.RowDelimiter">
            <summary>
            Gets or sets row delimiter.
            </summary>
            <value> A string represents row delimiter.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TextFormat.IsFirstRowColumns">
            <summary>
            Gets or sets the information indicating whether the first row of a text
            file has column names.
            </summary>
            <value> true if the first row has columns, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TextFormat.ColumnDelimiter">
            <summary>
            Gets or sets column delimiter.
            </summary>
            <value> A string represents column delimiter. </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TextFormat.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Mappings.TransformScript">
            <summary>
            The class represents a transform script written in C#, VB script, or
            Java#
            </summary>
            <version>1.0.0 15 Nov 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TransformScript.#ctor">
            <summary>
            Initiate an instance of TransformScript class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TransformScript.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of TransformScript class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TransformScript.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an TransformScript from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Mappings.TransformScript.Marshal(System.Xml.XmlElement)">
            <summary>
            write TransformScript to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TransformScript.Enabled">
            <summary>
            Gets or sets the information indicating whether the script is enabled
            for transformation.
            </summary>
            <value>true if it is enabled, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TransformScript.ScriptLanguage">
            <summary>
            Gets or sets type of the script language
            </summary>
            <value>One of ScriptLanguage enum values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TransformScript.ClassType">
            <summary>
            Gets or sets class type of the script
            </summary>
            <value>Class type string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TransformScript.Script">
            <summary>
            Gets the script string
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Mappings.TransformScript.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Principal.CustomPrincipal">
            <summary>
            The sole purpose of CustomPrincipal is to replace the default security
            principal and service access control and PrincipalPermission classes.
            </summary>
            <version>1.0.0 31 Nov 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.CustomPrincipal.Attach(Newtera.Common.MetaData.Principal.IUserManager)">
            <summary>
            Attach a CustomPrincipal as a current principal. It gets the principal
            identity from HttpContext if the client is an ASP.NET application.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.CustomPrincipal.Attach(Newtera.Common.MetaData.Principal.IUserManager,System.String)">
            <summary>
            Attach a CustomPrincipal as a current principal. This method is called
            by a client to attach a CustomPrincipal of a given user name to
            the current thread.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.CustomPrincipal.#ctor(System.Security.Principal.IIdentity,Newtera.Common.MetaData.Principal.IUserManager)">
            <summary>
            Initiating an instance of CustomPrincipal class
            </summary>
            <remarks>The constructor is private so that no one can
            new a CustomPrincipal instance, except the Attach method.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.CustomPrincipal.IsInRole(System.String)">
            <summary>
            Gets the information indicating whether the principal is in the
            given role.
            </summary>
            <param name="role">The role</param>
            <returns>true if the principal is in given role, false otherwise.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.Identity">
            <summary>
            Gets the Identity of the principal
            </summary>
            <value>IIdentity object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.Roles">
            <summary>
            Gets or sets roles which associated this principal.
            </summary>
            <value> a collection of roles that the principal is in.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.CurrentInstance">
            <summary>
            Gets or sets the current xml instance being processed for the user.
            </summary>
            <value> current instance</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.CurrentDocument">
            <summary>
            Get or sets the current xml document being processed for the user.
            </summary>
            <value> current document </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.NeedCurrentDocumentStatus">
            <summary> 
            Gets or sets the information indicating whether the current documnet
            being processed for the user need cached here.
            </summary>
            <value> true if it is needed, false otherwise, default is false.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Principal.CustomPrincipal.CurrentConnection">
            <summary>
            Gets or sets the current db connection being used by the user.
            </summary>
            <value> connection object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Principal.IUserManager">
            <summary>
            Represents an interface for authenticating an user or getting the current
            user information. This interface will have different implementation on
            the window client side and server side.
            </summary>
            <version>  	1.0.0 31 Nov. 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.IUserManager.Authenticate(System.String,System.String)">
            <summary>
            Authenticate an user with given name and password
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The user password</param>
            <returns>true if user is authenticated, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.IUserManager.GetRoles(System.String)">
            <summary>
            Gets roles that an user of the given name is in, including subroles.
            </summary>
            <param name="userName">The user's name</param>
            <returns>An array of user's roles</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.IUserManager.GetAllRoles">
            <summary>
            Gets all roles defined for the schema
            </summary>
            <returns>An array of roles for the schema</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Principal.IUserManager.GetAllUsers">
            <summary>
            Gets all users defined for the schema
            </summary>
            <returns>An array of users for the schema</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.IRuleNode">
            <summary>
            Represents a common interface for the nodes in Rules package.
            </summary>
            <version> 1.0.0 12 Jun 2004</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.IRuleNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.IRuleNode.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="E:Newtera.Common.MetaData.Rules.IRuleNode.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.IRuleNode.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.NodeFactory">
            <summary>
            A singleton class that creates an instance of IRuleNode based on a xml element
            </summary>
            <version>1.0.0 17 Jun 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.NodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.NodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IRuleNode type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IRuleNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.NodeFactory.ConvertTypeToString(Newtera.Common.MetaData.Rules.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.NodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.NodeFactory.Instance">
            <summary>
            Gets the NodeFactory instance.
            </summary>
            <returns> The NodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.NodeType">
            <summary>
            Specify the types of nodes in Rules package.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.RuleManager">
            <summary>
            RuleManager
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.RuleSet">
            <summary>
            RuleSet
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.RuleDef">
            <summary>
            RuleDef
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.RuleSetCollection">
            <summary>
            RuleSetCollection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Rules.NodeType.RuleCollection">
            <summary>
            RuleCollection
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleCollection">
            <summary>
            Represents a collection of RuleDef instances.
            </summary>
            <version>1.0.0 16 Jun 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleNodeCollection">
            <summary>
            An object collection class to handle IRuleNode when collections are
            returned from method calls.
            </summary>
            <version> 1.0.0 16 Jun 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.#ctor">
            <summary>
             Initializes a new instance of the RuleNodeCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of RuleNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Add(Newtera.Common.MetaData.Rules.IRuleNode)">
            <summary>
            Adds an IRuleNode to the RuleNodeCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.AddRange(Newtera.Common.MetaData.Rules.RuleNodeCollection)">
            <summary>
            Adds the elements of a RuleNodeCollection to the end of the RuleNodeCollection.
            </summary>
            <param name="collection">The RuleNodeCollection whose elements should be added to the end of the RuleNodeCollection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.IndexOf(Newtera.Common.MetaData.Rules.IRuleNode)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Insert(System.Int32,Newtera.Common.MetaData.Rules.IRuleNode)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Remove(Newtera.Common.MetaData.Rules.IRuleNode)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Contains(Newtera.Common.MetaData.Rules.IRuleNode)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:Newtera.Common.MetaData.Rules.RuleNodeCollection.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleNodeCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleNodeCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleCollection.#ctor">
            <summary>
            Initiating an instance of RuleCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of RuleCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleDef">
            <summary>
            The class represents definition of a data validating rule for a certain class.
            </summary>
            <version>1.0.0 16 Jun 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleNodeBase">
            <summary> 
            The base class for all node in Rules package
            </summary>
            <version> 1.0.0 12 Jun 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeBase.#ctor">
            <summary>
            Initiate an instance of RuleNodeBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeBase.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeBase.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleNodeBase.FireValueChangedEvent(System.Object)">
            <summary>
            Fire an event for value change
            </summary>
            <param name="value"></param>
        </member>
        <member name="E:Newtera.Common.MetaData.Rules.RuleNodeBase.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleNodeBase.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleDef.#ctor">
            <summary>
            Initiate an instance of RuleDef class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleDef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of RuleDef class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleDef.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an RuleDef from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleDef.Marshal(System.Xml.XmlElement)">
            <summary>
            write RuleDef to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleDef.ClassName">
            <summary>
            Gets or sets name of the class that this rule is associated with.
            </summary>
            <value> The unique class name.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleDef.Expression">
            <summary>
            Gets or sets expression of the rule.
            </summary>
            <value> The rule expression.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleDef.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleException">
            <summary> 
            The RuleException class is the default exception type for Rules
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 16 Jun 2004</version>
            <author>  		Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleException.#ctor(System.String)">
            <summary> Constructor of a RuleException without an object
            
            </summary>
            <param name="reason">a description of the exception 
            
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception
            </param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleManager">
            <summary>
            This is the top level class that manages data validating rules associated with
            all classes in a schema and provides methods to allow easy accesses, addition, and 
            deletion of the rules.
            </summary>
            <version> 1.0.0 12 June 2004 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.#ctor">
            <summary>
            Initiate an instance of RuleManager class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.GetRules(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Gets the rules, including the inherited ones, for a class
            </summary>
            <param name="classElement">The class element</param>
            <returns>A collection of Rules</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.GetLocalRules(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Gets the rules (not including the inherited ones) for a class.
            </summary>
            <param name="classElement">The class element</param>
            <returns>A collection of Rules</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.IsRuleExist(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Rules.RuleDef)">
            <summary>
            Gets the information indicating whether a rule has already existed for a
            class or for its parent classes.
            </summary>
            <param name="classElement">The class element</param>
            <param name="rule">The rule</param>
            <returns>true if it exists, false otherwise.</returns>
            <remarks>we will simply compare rule expressions. If the experssion is
            the same, then we regard the rules are the same.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.IsLocalRuleExist(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Rules.RuleDef)">
            <summary>
            Gets the information indicating whether a local rule has already existed for a
            class or for its parent classes.
            </summary>
            <param name="classElement">The class element</param>
            <param name="rule">The rule</param>
            <returns>true if it exists, false otherwise.</returns>
            <remarks>
            we will simply compare rule expressions. If the experssion is
            the same, then we regard the rules are the same.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.AddRule(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Rules.RuleDef)">
            <summary>
            Add a rule for a class
            </summary>
            <param name="classElement">The class Element</param>
            <param name="rule">The RuleDef</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.RemoveRule(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Rules.RuleDef)">
            <summary>
            Remove a rule from a class.
            </summary>
            <param name="classElement">The class element</param>
            <param name="rule">The RuleDef to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Read(System.String)">
            <summary>
            Read rules from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Read(System.IO.Stream)">
            <summary>
            Read rules from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            read the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Read(System.IO.TextReader)">
            <summary>
            Read rules from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            read the text reader</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Write(System.String)">
            <summary>
            Write rules to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            write to the file.</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Write(System.IO.Stream)">
            <summary>
            Write rules as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Write(System.IO.TextWriter)">
            <summary>
            Write rules as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Rules.RuleException">RuleException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create rules from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.Marshal(System.Xml.XmlElement)">
            <summary>
            write rules to an xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.GetXmlDocument">
            <summary>
            Gets the xml document that represents an xacl policy
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleManager.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the xacl policy changed
            </summary>
            <param name="sender">the IXaclNode that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleManager.IsAltered">
            <summary>
            Gets or sets the information indicating whether rule information has been
            altered.
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleManager.IsEmpty">
            <summary>
            Gets the information indicating whether it is an empty rule set
            </summary>
            <value>true if it is an empty rule set, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleManager.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleSet">
            <summary>
            Represent a set of rules that are associated with a certain class.
            </summary>
            <version>  1.0.0 16 Jun 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSet.#ctor(System.String)">
            <summary>
            Initiate an instance of a RuleSet class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSet.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of RuleSet class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSet.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create Ruleset instance from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSet.Marshal(System.Xml.XmlElement)">
            <summary>
            write RuleSet instance to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleSet.ClassName">
            <summary>
            Gets name of the class associated with a RuleSet
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleSet.Rules">
            <summary>
            Gets the rules contained in a RuleSet
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleSet.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Rules.RuleSetCollection">
            <summary>
            Represents a collection of RuleSet instances.
            </summary>
            <version>1.0.0 16 Jun 2004</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSetCollection.#ctor">
            <summary>
            Initiating an instance of RuleSetCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Rules.RuleSetCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of RuleSetCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Rules.RuleSetCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor">
            <summary>
            Traverse a schema model and validate each element to check if it confirms
            to some schema model integrity rules.
            </summary>
            <version> 1.0.0 23 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor">
            <summary>
            Represents an interface for visitors that traverse elements in a schema model.
            </summary>
            <version> 1.0.0 17 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitClassElement(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Viste a class element.
            </summary>
            <param name="element">A ClassElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitSimpleAttributeElement(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A SimpleAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitRelationshipAttributeElement(Newtera.Common.MetaData.Schema.RelationshipAttributeElement)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A RelationshipAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitArrayAttributeElement(Newtera.Common.MetaData.Schema.ArrayAttributeElement)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">An ArrayAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitSchemaInfoElement(Newtera.Common.MetaData.Schema.SchemaInfoElement)">
            <summary>
            Viste a schema info element.
            </summary>
            <param name="element">A SchemaInfoElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitEnumElement(Newtera.Common.MetaData.Schema.EnumElement)">
            <summary>
            Viste an enum constraint element.
            </summary>
            <param name="element">A EnumElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitRangeElement(Newtera.Common.MetaData.Schema.RangeElement)">
            <summary>
            Viste a range constraint element.
            </summary>
            <param name="element">A RangeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitPatternElement(Newtera.Common.MetaData.Schema.PatternElement)">
            <summary>
            Viste a pattern constraint element.
            </summary>
            <param name="element">A PatternElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor.VisitListElement(Newtera.Common.MetaData.Schema.ListElement)">
            <summary>
            Viste a list constraint element.
            </summary>
            <param name="element">A ListElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.#ctor(Newtera.Common.MetaData.Schema.SchemaModel)">
            <summary>
            Instantiate an instance of SchemaModelValidateVisitor class
            </summary>
            <param name="schemaModel">The schema model being validated.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.GetMessage(System.String)">
            <summary>
            Get a localized error message for the given message id
            </summary>
            <param name="msgId">The message id</param>
            <returns>The localized error message</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitClassElement(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Viste a class element.
            </summary>
            <param name="element">A ClassElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitSimpleAttributeElement(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Viste a simple attribute element.
            </summary>
            <param name="element">A SimpleAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitRelationshipAttributeElement(Newtera.Common.MetaData.Schema.RelationshipAttributeElement)">
            <summary>
            Viste a relationship attribute element.
            </summary>
            <param name="element">A RelationshipAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitArrayAttributeElement(Newtera.Common.MetaData.Schema.ArrayAttributeElement)">
            <summary>
            Viste an array attribute element.
            </summary>
            <param name="element">A ArrayAttributeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitSchemaInfoElement(Newtera.Common.MetaData.Schema.SchemaInfoElement)">
            <summary>
            Viste a schema info element.
            </summary>
            <param name="element">A SchemaInfoElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitEnumElement(Newtera.Common.MetaData.Schema.EnumElement)">
            <summary>
            Viste an enum constraint element.
            </summary>
            <param name="element">A EnumElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitRangeElement(Newtera.Common.MetaData.Schema.RangeElement)">
            <summary>
            Viste a range constraint element.
            </summary>
            <param name="element">A RangeElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitPatternElement(Newtera.Common.MetaData.Schema.PatternElement)">
            <summary>
            Viste a pattern constraint element.
            </summary>
            <param name="element">A PatternElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.VisitListElement(Newtera.Common.MetaData.Schema.ListElement)">
            <summary>
            Viste a list constraint element.
            </summary>
            <param name="element">A ListElement instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.GetSource(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Gets the source string
            </summary>
            <param name="element">The schema model element</param>
            <returns>A source string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.IsNumericType(Newtera.Common.MetaData.Schema.DataType)">
            <summary>
            Gets the information indicating whether the given type is one of
            the numeric type
            </summary>
            <param name="type">The data type</param>
            <returns>true if it is a numeric type, false otherwise.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.SchemaModelValidateVisitor.ValidateResult">
            <summary>
            Gets the validate result.
            </summary>
            <value>The validate result in ValidateResult object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.Validate.ValidateResult">
            <summary>
            Keeps the result of validating a schema model.
            </summary>
            <version>  	1.0.0 23 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResult.#ctor">
            <summary>
            Initializes a new instance of the ValidateResult class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResult.AddError(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            Add a validating error entry
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResult.AddWarning(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            Add a validating warning entry
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResult.AddDoubt(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            Add a validating warning doubt
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.HasError">
            <summary>
            Gets the information indicating whether there are validating
            errors.
            </summary>
            <value>true if it has errors, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.HasWarning">
            <summary>
            Gets the information indicating whether there are validating
            warnings.
            </summary>
            <value>true if it has waring, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.HasDoubt">
            <summary>
            Gets the information indicating whether there are validating
            doubts that need to be verified.
            </summary>
            <value>true if it has doubts, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.Errors">
            <summary>
            Gets the validating errors
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.Warnings">
            <summary>
            Gets the validating warnings
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.Doubts">
            <summary>
            Gets the validating doubts
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResult.AllEntries">
            <summary>
            Gets the all entries
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry">
            <summary>
            Represent an entry of validating error or warning.
            </summary>
            <version>  	1.0.0 23 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry.#ctor(System.String,System.String,Newtera.Common.MetaData.Schema.Validate.EntryType,Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Initializes a new instance of the ValidateResultEntry class
            </summary>
            <param name="msg">The entry message</param>
            <param name="source">The source string</param>
            <param name="type">The type of entry</param>
            <param name="element">The schema model element associated with the entry</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry.Message">
            <summary>
            Gets the message that describes the validating problem.
            </summary>
            <value>A string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry.Source">
            <summary>
            Gets the source of the validating problem.
            </summary>
            <value>A string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry.Type">
            <summary>
            Gets or sets the type of entry
            </summary>
            <value>One of the EntryType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry.SchemaModelElement">
            <summary>
            Gets the schema model element that causes the problem.
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.Validate.EntryType">
            <summary>
            Specify the types of validating result entry.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.Validate.EntryType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.Validate.EntryType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.Validate.EntryType.EmptyClass">
            <summary>
            EmptyClass, the owner class has to be empty
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection">
            <summary>
            An object collection class to handle ValidateResultEntry when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 23 Oct 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.#ctor">
            <summary>
             Initializes a new instance of the ValidateResultEntryCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.Add(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            Adds an ValidateResultEntry to the SchemaModelElementCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.AddRange(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection)">
            <summary>
            Adds an ValidateResultEntry to the SchemaModelElementCollection.
            </summary>
            <param name="collection">Another collection</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.IndexOf(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.Insert(System.Int32,Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.Remove(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.Contains(Newtera.Common.MetaData.Schema.Validate.ValidateResultEntry)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.Validate.ValidateResultEntryCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ArrayAttributeElement">
            <summary>
            ArrayAttributeElement represents an attribute that store values for one or two
            dimentional array.
            </summary>
            <example>
            <!--Xml Schema representation:
            <xsd:element name="coordinates" type="xsd:string" psd:dimension="2" psd:elementType="int" psd:id="0"/>
            -->
            </example>
            <version>1.0.1 10 Aug 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.AttributeElementBase">
            <summary>
            Provides the base functionality for creating an Attribute Element
            
            </summary>
            <version> 1.0.1 26 Jun 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaModelElement">
            <summary>
            Provides the base functionality for creating Schema Model Element
            </summary>
            <version>  1.0.1 26 Jun 2003</version>
            <author>  Yong Zhang</author>
            <remarks>
            SchemaModelElement implements ICustomTypeDescriptor so that it can
            return the property descriptors with localized display name 
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetNewteraAttributeValue(System.Xml.Schema.XmlSchemaAnnotated,System.String)">
            <summary>
            Return the value of an attribute of Newtera Namespace. If the attribute
            does not exist, return null.
            </summary>
            <param name="xmlSchemaNode">schema node</param>
            <param name="attributeName">the name of attribute</param>
            <returns> Value of the attribute</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.#ctor(System.String)">
            <summary> Initializes a new instance of the SchemaModelElement class.
            </summary>
            <param name="name">The name of Schema model element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary> Initializes a new instance of the SchemaModelElement class.
            </summary>
            <param name="element">The XmlSchemaAnnotated element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns> String representation of element</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetChildren">
            <summary>
            Return a  of children of the SchemaModelElement
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create a Xml Schema Element that represents the Schema Model element.
            The method must be override by the subclass.
            </summary>
            <param name="name">The name of element</param>
            <returns>The created XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself and
            let its children to accept the visitor next.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetNewteraAttributeValue(System.String)">
            <summary>
            Return the value of an attribute of Newtera Namespace. If the attribute
            does not exist, return null.
            </summary>
            <param name="attributeName">the name of attribute</param>
            <returns> Value of the attribute</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.SetNewteraAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute of Newtera Namespace. If attribute does not
            exist, create an attribute for the given value.
            </summary>
            <param name="attributeName">the name of attribute</param>
            <param name="attributeValue">the value of attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.SetUnhandledAttributes">
            <summary>
            Create an array of XmlAttributes for Newtera domain attribute and set it
            as unhandled attribute to the xml schema element.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.Clear">
            <summary>
            Clear the element for a fresh start.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a schema model element
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.FireValueChangedEvent(System.Object)">
            <summary>
            Fire an event for value change
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetClassName">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetAttributes">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetComponentName">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetConverter">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetDefaultEvent">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetDefaultProperty">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetEditor(System.Type)">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetEvents(System.Attribute[])">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetEvents">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of a type.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetProperties">
            <summary>
            Our implementation overrides GetProperties() only and creates a
            collection of custom property descriptors of type GlobalizedPropertyDescriptor
            and returns them to the caller instead of the default ones.
            </summary>
            <returns>A collection of Property Descriptors.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElement.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Refer to ICustomTypeDescriptor specification
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="E:Newtera.Common.MetaData.Schema.SchemaModelElement.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="E:Newtera.Common.MetaData.Schema.SchemaModelElement.CaptionChanged">
            <summary>
            Caption changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.Name">
            <summary> Gets or sets name of the element.
            </summary>
            <value> The name of the element</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.ID">
            <summary> Gets or sets id of the element.
            </summary>
            <value> The id of the element</value>
            
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.Description">
            <summary> Gets or sets description of a Schema Model Element.
            
            </summary>
            <value> The description of the element</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.Caption">
            <summary>
            Gets or sets the caption for the element
            </summary>
            <value> The caption of the element. If not set, returns the Name value.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.Position">
            <summary>
            Gets or sets position of this element among its sibling.
            </summary>
            <value>A zero-based integer representing the position.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.SchemaModel">
            <summary>
            Gets or sets the schema model that the class belongs to.
            </summary>
            <value> The SchemaModel object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.XmlSchemaElement">
            <summary>
            Gets the XmlSchemaElement
            </summary>
            <value>The XmlSchemaAnnotated object</value> 
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.Parent">
            <summary>
            Return a  parent of the SchemaModelElement
            </summary>
            <returns>The parent of the SchemaModelElement</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElement.ElementName">
            <summary>
            Return the name of the element to be overrided by derived classes
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.AttributeElementBase.#ctor(System.String)">
            <summary>
            Initializing AttributeElementBase object
            </summary>
            <param name="name">Name of attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.AttributeElementBase.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing AttributeElementBase object
            </summary>
            <param name="xmlSchemaElement">The xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.AttributeElementBase.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.AttributeElementBase.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.AttributeElementBase.IsBrowsable">
            <summary>
            Gets or sets the information indicating whether the attribute is browsable.
            </summary>
            <value>true if it is browsable, false otherwise, default is true</value>
            <remarks>If browsable is false, it won't appear as result field of a data view,
            but it still can be used as a search field</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.AttributeElementBase.OwnerClass">
            <summary>
            Gets or sets the owner class of the attribute.
            </summary>
            <value>The owner class of the attribute.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.AttributeElementBase.ColumnName">
            <summary>
            Gets or sets the DB column name of attribute.
            </summary>
            <value>The database column name for the attribute</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.AttributeElementBase.DataType">
            <summary>
            Gets or sets data type of the attribute.
            </summary>
            <value>DataType.Integer</value>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ArrayAttributeElement.MAX_COLUMN_LENGTH">
            <summary>
            The maximum length of a Normal size array.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.#ctor(System.String)">
            <summary>
            Initializing ArrayAttributeElement object.
            </summary>
            <param name="name">Name of the attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing ArrayAttributeElement object.
            </summary>
            <param name="xmlSchemaElement">The xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.GetChildren">
            <summary>
            Return a  of children of the SchemaModelElement
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.GetColumnTitle(System.Int32)">
            <summary>
            Gets the column title of the given index.
            </summary>
            <param name="colIndex">Column index</param>
            <returns>A column Title</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Model element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
            <remarks>
            Example of simple attributes in xml schema
            
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <remarks>
            Notice that we write physical value of a member to xml schema.
            For example, _isUnique member holds a physical value, but IsUnique
            property holds logical value. Logical value may be different from
            physical value. When an attribute is a primary key, even _isUnique
            member holds a physical value of false, IsUnique property will return
            true. Therefore, make sure that only physical values get written to
            xml schema. The same is true when reading value from a xml schema in
            Unmarshal process.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ConvertToCollection(System.String)">
            <summary>
            Convert a comma separated column title string into a StringCollection object
            </summary>
            <param name="colTitles">A comma separated column title string</param>
            <returns>A StringCollection object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ConvertToString(System.Collections.Specialized.StringCollection)">
            <summary>
            Convert a StringCollection object into a comma separated column title string.
            </summary>
            <param name="columnTitles">A StringCollection object</param>
            <returns>A comma separated column title string</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.IsRequired">
            <summary>
            Gets or sets information indicating whether the attribute is required.
            </summary>
            <value> return true if attribute is required, false otherwise. The default is false.</value>
            
            <remarks>
            Using the XML schema's attribute minOccurs to determine whether this 
            attribute is required. If minOccurs="1" means this attribute is 
            required.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Dimension">
            <summary>
            Gets or sets the dimension of the array.
            </summary>
            <value>1 or 2 only</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ElementDataType">
            <summary>
            Gets or sets data type of the array elements.
            </summary>
            <value>The one of the DataType enum values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ColumnCount">
            <summary>
            Gets or sets the number of columns in an array.
            </summary>
            <value>an integer</value>
            <remarks>One column for one-dimension array</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ColumnTitles">
            <summary>
            Gets or sets the column titles of an array.
            </summary>
            <value>A StringCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ArraySize">
            <summary>
            Gets or sets type of array size.
            </summary>
            <value>The one of the ArraySizeType enum values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.DataType">
            <summary>
            Gets or sets data type of the attribute.
            </summary>
            <value>The data type for array attribute is String</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ColumnLength">
            <summary>
            Gets column length of the attribute.
            </summary>
            <value>The maximum column length</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Section">
            <summary>
            Gets or sets section of the attribute.
            </summary>
            <value>
            A string of section name.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Category">
            <summary>
            Gets or sets section of the attribute.
            </summary>
            <value>
            A string of section name.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.DefaultValue">
            <summary>
            Gets default value for array element
            </summary>
            <value>
            A default value string.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.Parent">
            <summary>
            Return a  parent of the SchemaModelElement
            </summary>
            <returns>The parent of the SchemaModelElement</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ArrayAttributeElement.ElementName">
            <summary>
            Return the name of the ArrayAttributeElement
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ArraySizeType">
            <summary>
            Specify the size of an array as indication to the database builder to
            pick appropriate type of storage for storing the array value.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ArraySizeType.NormalSize">
            <summary>
            The array size is less than 4000 characters, including array element
            delimiters. Declare an array of normal size is more efficient in terms
            of database retrieval and updates
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ArraySizeType.OverSize">
            <summary>
            The array size is over 4000 characters, including array element
            delimiters. Declare an array of over size could make query slower.
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.AttributeUsage">
            <summary>
            Describes the usages of an attribute, including simple and array attributes.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.AttributeUsage.None">
            <summary>
            The attribute is not used for search or result
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.AttributeUsage.Result">
            <summary>
            The attribute is used as a result attribute
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.AttributeUsage.Search">
            <summary>
            The attribute is used as a search attribute
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.AttributeUsage.Both">
            <summary>
            The attribute is used as both a search and result attribute
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.CaseStyle">
            <summary>
            Describes the options for attribute case sensitivity
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.CaseStyle.Upper">
            <summary>
            Upper
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.CaseStyle.Lower">
            <summary>
            Lower
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.CaseStyle.CaseSensitive">
            <summary>
            CaseSensitive
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.CaseStyle.CaseInsensitive">
            <summary>
            CaseInsensitive
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ClassElement">
            <summary>
            The ClassElement represents a class in a schema model
            </summary>
            <example>
            </example>
            
            <version>      1.0.1 26 Jun 2003
            </version>
            <author>       Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.#ctor(System.String)">
            <summary>
            Initializing a ClassElement object
            </summary>
            <param name="name">the name of the class</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a ClassElement object
            </summary>
            <param name="xmlSchemaElement">
            the xml schema element that represents the class
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself and
            have the subclasses and attributes to accept the visitor next.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddSubclass(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Add a class as a subclass.
            </summary>
            <param name="subclass">The subclass object</param>
            <returns> The ClassElement object created for the subclass.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveSubclass(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Remove a subclass.
            </summary>
            <param name="subclass">the ClassElement object to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddSimpleAttribute(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Adds a simple attribute to the class.
            </summary>
            <param name="attribute">The SimpleAttributeElement object to be added
            </param>
            <returns> Added SimpleAttributeElement object.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddPrimaryKey(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Adds a primary key to the primary key collection
            </summary>
            <param name="attribute">The SimpleAttrinuteElement instance as a primary key
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindSimpleAttribute(System.String)">
            <summary>
            Get the SimpleAttributeElement by name
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The SimpleAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindInheritedSimpleAttribute(System.String)">
            <summary>
            Get the SimpleAttributeElement by name. This method will search
            up the hieararchy if fails to find it at local class element
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The SimpleAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveSimpleAttribute(System.String)">
            <summary>
            Remove a simple attribute from the class.
            </summary>
            <param name="name">the name of attribute to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveSimpleAttribute(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Remove a simple attribute from the class.
            </summary>
            <param name="attribute">the SimpleAttributeElement object to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemovePrimaryKey(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Removes a primary key from the primary key collection
            </summary>
            <param name="attribute">The SimpleAttrinuteElement instance to be removed from the collection.
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddRelationshipAttribute(Newtera.Common.MetaData.Schema.RelationshipAttributeElement)">
            <summary>
            Add a relationship attribute to the class.
            </summary>
            <param name="attribute">The RelationshipAttributeElement object to be added
            </param>
            <returns> Added RelationshipAttributeElement object.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindRelationshipAttribute(System.String)">
            <summary>
            Get the RelationshipAttributeElement by name
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The RelationshipAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindInheritedRelationshipAttribute(System.String)">
            <summary>
            Get the RelationshipAttributeElement by name. This method will search
            up the hieararchy if fails to find it at local class element
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The RelationshipAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveRelationshipAttribute(System.String)">
            <summary>
            Remove a relationship attribute from the class.
            </summary>
            <param name="name">the name of attribute to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveRelationshipAttribute(Newtera.Common.MetaData.Schema.RelationshipAttributeElement)">
            <summary>
            Remove a relationship attribute from the class.
            </summary>
            <param name="attribute">the RelationshipAttributeElement object to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddArrayAttribute(Newtera.Common.MetaData.Schema.ArrayAttributeElement)">
            <summary>
            Adds an array attribute to the class.
            </summary>
            <param name="attribute">The ArrayAttributeElement object to be added
            </param>
            <returns> Added ArrayAttributeElement object.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindArrayAttribute(System.String)">
            <summary>
            Get the ArrayAttributeElement by name
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The ArrayAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindInheritedArrayAttribute(System.String)">
            <summary>
            Get the ArrayAttributeElement by name. This method will search
            up the hieararchy if fails to find it at local class element
            </summary>
            <param name="name">the name of attribute</param>
            <returns>The ArrayAttributeElement object</returns>
            <remarks>The attribute name is case-insensitive</remarks> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveArrayAttribute(System.String)">
            <summary>
            Remove an array attribute from the class.
            </summary>
            <param name="name">the name of attribute to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveArrayAttribute(Newtera.Common.MetaData.Schema.ArrayAttributeElement)">
            <summary>
            Remove an array attribute from the class.
            </summary>
            <param name="attribute">the ArrayAttributeElement object to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.FindAttribute(System.String,Newtera.Common.MetaData.Schema.SearchDirection)">
            <summary>
            Find the attribute, including simple and relationship, from
            this class, its parent, and its subclasses.
            </summary>
            <param name="name">The name of attribute</param>
            <param name="direction">The search direction</param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.RemoveSubclasses">
            <summary>
            Remove the subclasses of the class from the schema
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.GetLeafClasses">
            <summary>
            Get all leaf classes of the class. If the class itself is a leaf class,
            return it self as the single element in the collection
            </summary>
            <returns>A SchemaModelElementCollection of leaf class</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.GetChildren">
            <summary>
            Return a  of children of the SchemaModelElement
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Model element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <remarks>
            <!--The example show xml schema for a root class "Product" and a subclass
            "Furniture"
            
            <xsd:complexType name="Product" psd:displayName="Product" psd:order="0" psd:id="1453">
            <xsd:sequence>
            	<xsd:element name="Name" type="xsd:string" minOccurs="1" maxOccurs="1" psd:displayName="Name" psd:order="0" psd:key="true" psd:id="8459" psd:fullText="true" psd:datastore="column" />
            	<xsd:element name="Supplier" type="xsd:string" minOccurs="1" maxOccurs="1" psd:displayName="Supplier" psd:order="1" psd:id="8460" psd:key="true" />
            	<xsd:element name="Price" type="xsd:float" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="价格" psd:order="2" psd:id="8461" />
            	<xsd:element name="Description" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="Description" psd:order="3" psd:multiLine="true" psd:fullText="true" psd:id="8462" psd:datastore="column">
            		<xsd:simpleType>
            			<xsd:restriction base="xsd:string">
            				<xsd:maxLength value="1000" />
            			 </xsd:restriction>
            		</xsd:simpleType>
            	</xsd:element>
            </xsd:sequence>
            <xsd:attribute name="lineitems" psd:refType="oneToMany" type="xsd:IDREFS" psd:refClass="LineItem" psd:displayName="lineitems" psd:order="4" psd:refAttr="product" psd:joinManager="true" psd:ownership="looseReferenced" minOccurs="0" maxOccurs="1" psd:id="8463" />
            <xsd:attribute name="obj_id" type="xsd:ID" />
            </xsd:complexType>
            
            <xsd:complexType name="Furniture" psd:displayName="Furniture" psd:id="1454">
            <xsd:complexContent>
            	<xsd:extension base="Product">
            	<xsd:sequence>
            		<xsd:element name="Weight" type="xsd:float" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="Weight" psd:order="0" psd:id="8464" />
            		<xsd:element name="Material" type="xsd:string" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="Material" psd:order="1" psd:id="8465" />
            	</xsd:sequence>
            	</xsd:extension>
            </xsd:complexContent>
            </xsd:complexType>
            -->
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.InitBlock">
            <summary>
            Instantiate the members
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.Reset">
            <summary>
            Reset the class element
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.SetParentChildren(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Set the parent and children relationship.
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.SetSimpleAttributsAndPrimaryKeys(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Set the simple attribute and primary key list.
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.SetRelationshipAttributes(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Set the relationship attribute list.
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.SetArrayAttributs(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Set the array attribute list.
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.WriteSimpleAttributesAndPrimaryKeys(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Write the simple attributes to the xml schema
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.WriteRelationshipAttributes(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Write the relationship attributes to the xml schema
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.WriteArrayAttributes(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Write the array attributes to the xml schema
            </summary>
            <param name="complexType">The xml schema complexType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddObjIdAttribute(System.Xml.Schema.XmlSchemaComplexType)">
            <summary>
            Add the built-in attribute "obj_id" to the complexType element.
            </summary>
            <param name="complexType">xml schema element</param>
            <remarks>
            <!--<xsd:attribute name="obj_id" type="xsd:ID"/></xsd:attribute>-->
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ClassElement.AddLeafClasses(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Schema.SchemaModelElementCollection)">
            <summary>
            Add leaf classes to the collection recursively
            </summary>
            <param name="parent">The parent class</param>
            <param name="leafClasses">The leaf class collection object.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.Subclasses">
            <summary>
            Gets all direct subclasses of the class.
            </summary>
            <value>A SchemaModelElementCollection contains ClassElement objects for direct subclasses.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.ParentClass">
            <summary>
            Gets the parent class of the class.
            </summary>
            <value> The parent class</value>
            <remarks>
            The parent class can not be changed.
            It is provided as a parameter to the constructor.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.IsLeaf">
            <summary>
            Gets the information that indicates whether the class is leaf class
            </summary>
            <value>
            true if class is leaf, otherwise false. The default value is true.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.IsRoot">
            <summary>
            Gets the information that indicates whether the class is root class
            </summary>
            <value>
            true if class is root, otherwise false. The default value is true.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.RootClass">
            <summary>
            Gets root class of this class
            </summary>
            
            <value> The root class of the class. If the class is a root class,
            it return itself</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.SimpleAttributes">
            <summary>
            Gets simple attributes of the class.
            </summary>
            <value>A SchemaModelElementCollection contains SimpleAttributeElement objects. </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.RelationshipAttributes">
            <summary>
            Gets relationship attributes of the class.
            </summary>
            <value>A SchemaModelElementCollection contains RelationshipAttributeElement objects.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.ArrayAttributes">
            <summary>
            Gets array attributes of the class.
            </summary>
            <value>A SchemaModelElementCollection contains ArrayAttributeElement objects. </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.PrimaryKeys">
            <summary>
            Gets or sets the primary keys of the class.
            </summary>
            <value>A SchemaModelElementCollection conatins SimpleAttributeElement objects for primary keys</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.LargeImage">
            <summary>
            Gets or sets a name of the large class image.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.MedianImage">
            <summary>
            Gets or sets a name of the median class image.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.SmallImage">
            <summary>
            Gets or sets a name of the small class image.
            </summary>
            <value>An image name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.DetailedText">
            <summary>
            Gets or sets a detailed text of the class.
            </summary>
            <value>A detailed text</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
            <value>DB Table Name</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.Parent">
            <summary>
            Return a  parent of the SchemaModelElement
            </summary>
            <returns>The parent of the SchemaModelElement</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ClassElement.ElementName">
            <summary>
            Return the name of the ClassElement
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SearchDirection">
            <summary>
            Specifies the options used by FindAttribute method
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.SearchDirection.TwoWay">
            <summary>
            TwoWay
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.SearchDirection.Upward">
            <summary>
            Upward
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.SearchDirection.Downward">
            <summary>
            Downward
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ConstraintElementBase">
            <summary>
            Provides the base functionality for creating a constraint Element
            
            </summary>
            <version> 1.0.1 26 Jun 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.#ctor(System.String)">
            <summary>
            Initializing ConstraintElementBase object
            </summary>
            <param name="name">Name of attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing ConstraintElementBase object
            </summary>
            <param name="xmlSchemaElement">The xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.IsValueValid(System.String)">
            <summary>
            Gets the information indicating whether the given value is valid
            based on the constraint.
            </summary>
            <param name="value">The given value</param>
            <returns>true if it is valid, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.ChangeEnumTypeName">
            <summary>
            Change the enum type name
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Model element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintElementBase.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ConstraintElementBase.DataType">
            <summary>
            Gets or sets the data type of the constraint.
            </summary>
            <value>One of DataType enum values. default is String</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ConstraintElementBase.ErrorMessage">
            <summary>
            Gets or sets the data type of the constraint.
            </summary>
            <value>One of DataType enum values. default is String</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ConstraintElementBase.EnumTypeName">
            <summary>
            Gets a name for creating an enum type of this constraint
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ConstraintElementBase.ElementName">
            <summary>
            Return the name of the Element
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ConstraintType">
            <summary>
            Describes the types for constraint
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ConstraintType.Enumeration">
            <summary>
            Enumeration
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ConstraintType.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ConstraintType.Range">
            <summary>
            Range
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.ConstraintType.List">
            <summary>
            List
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DataType">
            <summary>
            Describes the types of data for attribute values
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.BigInteger">
            <summary>
            BigInteger
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.DataType.Text">
            <summary>
            Text for string more than 2000 characters
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DataTypeConverter">
            <summary>
            Converts data type from string to enum value or from enum value to string
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DataTypeConverter.ConvertToTypeEnum(System.String)">
            <summary>
            Convert a type from a string to its corresponding enum type
            </summary>
            <param name="typeStr">the type string</param>
            <returns>
            One of the DataType values.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DataTypeConverter.ConvertToTypeString(Newtera.Common.MetaData.Schema.DataType)">
            <summary>
            Convert a type from an enum value to a string
            </summary>
            <param name="typeEnum">an enum type</param>
            <returns>
            a string representtaion.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DataTypeConverter.ConvertToSystemType(Newtera.Common.MetaData.Schema.DataType)">
            <summary>
            Convert a DataType enum to .Net system Type object
            </summary>
            <param name="typeEnum">an enum type</param>
            <returns>
            A Type object.
            </returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.EnumElement">
            <summary>
            The EnumElement represents an enumeration constraint. 
            </summary>
            <version>  	1.0.1 26 Jun 2003
            </version>
            <author>  		Yong Zhang
            </author>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.EnumElement.SEPARATOR">
            <summary>
            Constant definition for enum value SEPARATOR
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.isEnum(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Get info if the xmlSchemaElemet represents an enumeration constraint
            </summary>
            <param name="xmlSchemaElement">the XmlSchemaAnnotated object
            </param>
            <returns>
            return true if the element represents an enumeration constraint, 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.#ctor(System.String)">
            <summary>
            Initializing an EnumElement object
            </summary>
            <param name="name">Name of element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing an EnumElement object
            </summary>
            <param name="xmlSchemaElement">The XmlSchemaAnnotated object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.AddValue(System.String)">
            <summary>
            Add an enumeration value.
            </summary>
            <param name="value">a value in string
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.RemoveValue(System.String)">
            <summary>
            Remove an enumeration value.
            </summary>
            <param name="value">The enumeration value to be removed
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.IsValueValid(System.String)">
            <summary>
            Gets the information indicating whether the given value is valid
            based on the constraint.
            </summary>
            <param name="value">The given value</param>
            <returns>true if it is valid, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.ConvertToString(System.Int32)">
            <summary>
            Convert an integer whose bits representing multiple enum values to a "|" separated string.
            </summary>
            <param name="val">An integer whose bits representing multiple enum values.</param>
            <returns>a "|" separated enum value string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.ConvertToInteger(System.String)">
            <summary>
            Convert a "|" separated enum value string to an integer whose bits representing multiple enum values.
            </summary>
            <param name="val">a "|" separated enum value string</param>
            <returns>An integer whose bits representing multiple enum values.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.GetStringArray(System.String)">
            <summary>
            convert a string of "|' separated enum values into an array of strings.
            </summary>
            <param name="val">a string of "|" separated enum values</param>
            <returns>An array of strings</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <!--
            Enum in xml schema:
            
            <xsd:simpleType name="countryType">
            <xsd:restriction base="xsd:string">
            <xsd:maxLength value="2"/>
            <xsd:enumeration value="CN"/>
            <xsd:enumeration value="UK"/>
            <xsd:enumeration value="US"/>
            <xsd:enumeration value="FR"/>
            </xsd:restriction>
            </xsd:simpleType>
            -->
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.EnumElement.Contains(System.String,System.String[])">
            <summary>
            Gets the information indicating whether a string exists in an array of strings.
            </summary>
            <param name="val">The given string</param>
            <param name="values">An array of strings</param>
            <returns>true if it exists, false otherwise.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.EnumElement.Values">
            <summary>
            Gets or sets the enumeration values.
            </summary>
            <value>
            An collection of strings of enumeration values
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.EnumElement.IsMultipleSelection">
            <summary>
            Gets or sets the information indicating whether it allows
            multiple selection of enum values.
            </summary>
            <value>
            True if it is multiple selection, false for single selection. Default is false.
            </value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.IListHandler">
            <summary>
            Represents an interface for hanlder that retrieve a list of values used
            by a ListElement.
            </summary>
            <version> 1.0.0 05 Apr 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.IListHandler.GetValues(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Get a list of string values
            </summary>
            <param name="context">The SchemaModelElement object constraint by the list values</param>
            <returns>A collection of string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.IListHandler.IsValueValid(System.String,Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Gets information indicating whether a given value is valid
            </summary>
            <param name="val">The given value</param>
            <param name="context">The SchemaModelElement object constraint by the list values</param>
            <returns>true if the value is valid, false, otherwise.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ListElement">
            <summary>
            The ListElement represents a list of values obtained from a customized
            handler. 
            </summary>
            <version>  	1.0.1 05 Apr 2004
            </version>
            <author>  		Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.isList(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Get info if the xmlSchemaElemet represents a List constraint
            </summary>
            <param name="xmlSchemaElement">the XmlSchemaAnnotated object
            </param>
            <returns>
            return true if the element represents a List constraint, 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.#ctor(System.String)">
            <summary>
            Initializing an ListElement object
            </summary>
            <param name="name">Name of element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing an ListElement object
            </summary>
            <param name="xmlSchemaElement">The XmlSchemaAnnotated object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.IsValueValid(System.String)">
            <summary>
            Gets the information indicating whether the given value is valid
            based on the constraint.
            </summary>
            <param name="value">The given value</param>
            <returns>true if it is valid, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <!--
            List constraint expressed in xml schema:
            
            <xsd:simpleType name="PartNumber">
            <xsd:restriction base="xsd:string">
            <xsd:maxLength value="2"/>
            <xsd:enumeration value="DynamicValues"/>
            </xsd:restriction>
            </xsd:simpleType>
            -->
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ListElement.CreateHandler">
            <summary>
            Create a list handler described by the handler name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ListElement.Context">
            <summary>
            Gets or sets the context for the handler.
            </summary>
            <value>
            The SchemaModelElement that is constrainted by the List
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ListElement.Values">
            <summary>
            Gets the list values.
            </summary>
            <value>
            An collection of strings of list values
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.ListElement.ListHandlerName">
            <summary>
            Gets or sets the handler that retrieves a list of values dynamically.
            </summary>
            <value>
            A fully-qualified handler class name, including namespace and class name.
            for example, Newtera.Common.MetaData.DataView.GetDataViewNamesHandler
            </value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.PatternElement">
            <summary>
            The PatternElement represents a range constraint.
            </summary>
            <version>  	1.0.0 26 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.isPattern(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Get info if the xmlSchemaElemet represents a pattern constraint
            </summary>
            <param name="xmlSchemaElement">the XmlSchemaAnnotated object
            </param>
            <returns>
            return true if the element represents a patern constraint, 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.#ctor(System.String)">
            <summary>
            Initializing a PatternElement object
            </summary>
            <param name="name">Name of element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a PatternElement object
            </summary>
            <param name="xmlSchemaElement">The XmlSchemaAnnotated object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.IsValueValid(System.String)">
            <summary>
            Gets the information indicating whether the given value is valid
            based on the constraint.
            </summary>
            <param name="value">The given value</param>
            <returns>true if it is valid, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.PatternElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <!--
            The sample XML code for a Pattern.
            
            <code>
            <xsd:simpleType name="partNum">
            <xsd:restriction base="xsd:string">
            <xsd:maxLength value="6"/>
            <xsd:pattern value="\d{3}-[A-Z]{2}"/>
            </xsd:restriction>
            </xsd:simpleType>
            </code>
            -->
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.PatternElement.PatternValue">
            <summary>
            Gets or sets the pattern value.
            </summary>
            <value>Value of the pattern, empty if not set</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.PatternElement.DataType">
            <summary>
            Gets or sets the data type of the constraint.
            </summary>
            <value>Alwayse String</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.RangeElement">
            <summary>
            The PatternElement represents a range constraint. 
            </summary>
            <version>  	1.0.1 26 Jun 2003
            </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.isRange(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Get info if the xmlSchemaElemet represents a range constraint
            </summary>
            <param name="xmlSchemaElement">the XmlSchemaAnnotated object
            </param>
            <returns>
            return true if the element represents a range constraint, 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.#ctor(System.String)">
            <summary>
            Initializing a RangeElement object
            </summary>
            <param name="name">Name of element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a RangeElement object
            </summary>
            <param name="xmlSchemaElement">The XmlSchemaAnnotated object</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.IsValueValid(System.String)">
            <summary>
            Gets the information indicating whether the given value is valid
            based on the constraint.
            </summary>
            <param name="value">The given value</param>
            <returns>true if it is valid, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RangeElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <!--
            The sample XML code for a Range:
            
            <xsd:simpleType name="quantity">
            <xsd:restriction base="xsd:integer">
            <xsd:maxInclusive value="10"/>
            <xsd:maxInclusive value="100"/>
            </xsd:restriction>
            </xsd:simpleType>
            -->
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RangeElement.MinValue">
            <summary>
            Gets or sets the min value.
            </summary>
            <value>Min value of the range, 0 if not set</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RangeElement.MaxValue">
            <summary>
            Gets or sets the max value.
            </summary>
            <value>Max value of the range, 0 if not set</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RangeElement.DataType">
            <summary>
            Gets or sets the data type of the constraint.
            </summary>
            <value>One of DataType enum values. default is Integer</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.RelationshipAttributeElement">
            <summary>
            RelationshipAttributeElement represents a relationship attribute in class.
            </summary>
            
            <remarks>
            A Relationship attribute is saved in a xml schema as an attribute of the complexType
            with type either IDREF or IDREFS, depending on the type of relationship.
            For one-to-one and one-to-many relationship, an element is also created on one
            side of classes.
            </remarks>
            
            <version>  	1.0.1 26 Jun 2003
            </version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.#ctor(System.String)">
            <summary>
            Initializing a RelationshipAttributeElement object
            </summary>
            <param name="name">The name of relationship attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a RelationshipAttributeElement object
            </summary>
            <param name="xmlSchemaElement">The xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.GetChildren">
            <summary>
            Return a  of children of the SchemaModelElement
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Model element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <!--
            The example of relationship between "Orders" and "Customer" in xml schema
            <xsd:complexType name="Order" psd:displayName="Order" psd:order="2" psd:id="1458">
            <xsd:sequence>
            	<xsd:element name="Number" type="OrderNumber" minOccurs="1" maxOccurs="1" psd:displayName="Number" psd:order="0" psd:key="true" psd:id="8474" />
            	<xsd:element name="OrderDate" type="xsd:date" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="OrderDate" psd:order="1" psd:id="8475" />
            	<xsd:element name="TotalPrice" type="xsd:double" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="TotalPrice" psd:order="2" psd:id="8476" />
            	<xsd:element name="customer" minOccurs="0" psd:keyref="true" maxOccurs="1">
            		<xsd:complexType>
            		<xsd:sequence>
            			<xsd:element name="FirstName" psd:type="string" type="xsd:string" />
            			<xsd:element name="LastName" psd:type="string" type="xsd:string" />
            		</xsd:sequence>
            		</xsd:complexType>
            	</xsd:element>
            </xsd:sequence>
            <xsd:attribute name="customer" psd:refType="manyToOne" type="xsd:IDREF" psd:refClass="Customer" psd:displayName="customer" psd:order="4" psd:refAttr="orders" psd:ownership="looseReferenced" psd:id="8478" />
            <xsd:attribute name="obj_id" type="xsd:ID" />
            </xsd:complexType>
            
            <xsd:complexType name="Customer" psd:displayName="Customer" psd:order="3" psd:id="1459">
            <xsd:sequence>
            	<xsd:element name="FisrtName" type="xsd:string" minOccurs="1" maxOccurs="1" psd:displayName="Name" psd:order="0" psd:key="true" psd:id="8479" />
            	<xsd:element name="LastName" type="xsd:string" minOccurs="1" maxOccurs="1" psd:displayName="Name" psd:order="0" psd:key="true" psd:id="8479" />
            	<xsd:element name="Address" type="xsd:string" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="Address" psd:order="1" psd:id="8480" />
            	<xsd:element name="City" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="City" psd:order="2" psd:id="8481"/>
            	<xsd:element name="State" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="State" psd:order="3" psd:id="8482"/>
            </xsd:sequence>
            <xsd:attribute name="orders" psd:refType="oneToMany" type="xsd:IDREFS" psd:refClass="Order" psd:displayName="orders" psd:order="4" psd:refAttr="customer" psd:joinManager="true" psd:ownership="looseReferenced" minOccurs="0" maxOccurs="1" psd:id="8483" />
            <xsd:attribute name="obj_id" type="xsd:ID" />
            </xsd:complexType>
            
            <xsd:element name="Demo" psd:version="1.0" psd:mappingMethod="vertical" psd:id="261">
            <xsd:complexType>
            	<xsd:all>
            		<xsd:element name="OrderList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="Order" type="Order" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            		</xsd:element>
            		<xsd:element name="CustomerList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="Customer" type="Customer" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            		</xsd:element>
            	</xsd:all>
            </xsd:complexType>
            <xsd:key name="CustomerPK" psd:className="Customer" psd:allClasses="Customer,Corporate,Personal">
            	<xsd:selector xpath="CustomerList/Customer" />
            	<xsd:field xpath="FirstName" psd:type="string" />
            	<xsd:field xpath="LastName" psd:type="string" />			
            </xsd:key>
            <xsd:keyref name="OrdercustomerCustomerFK" refer="CustomerPK" psd:className="Order" psd:refClass="Customer" psd:refRootClass="Customer" psd:allClasses="Order">
            	<xsd:selector xpath="OrderList/Order" />
            	<xsd:field xpath="customer/FirstName" psd:type="string" psd:refRootClass="Customer" psd:refAttr="Name" />
            	<xsd:field xpath="customer/LastName" psd:type="string" psd:refRootClass="Customer" psd:refAttr="Name" />
            </xsd:keyref>
            </xsd:element>
            -->
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ConvertToRelationshipTypeEnum(System.String)">
            <summary>
            Convert a string to one of RelationshipType values.
            </summary>
            <param name="typeStr">The string</param>
            <returns>One of RelationshipType values</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ConvertToRelationshipTypeString(Newtera.Common.MetaData.Schema.RelationshipType)">
            <summary>
            Convert one of RelationshipType values to its string representation.
            </summary>
            <param name="type">one of RelationshipType values</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ConvertToRelationshipOwnershipEnum(System.String)">
            <summary>
            Convert a string to one of RelationshipOwnership values.
            </summary>
            <param name="str">The string</param>
            <returns>One of RelationshipOwnership values</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ConvertToRelationshipOwnershipString(Newtera.Common.MetaData.Schema.RelationshipOwnership)">
            <summary>
            Convert one of RelationshipOwnership values to its string representation.
            </summary>
            <param name="ownership">one of RelationshipOwnership values</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.WriteForeignKey">
            <summary>
            Create an element of complexType as a foreign key
            and a keyref in the schema body.
            (see example of customer relationship in Order class)
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.LinkedClassName">
            <summary>
            Gets or sets the name of class referenced by the relationship
            </summary>
            <value>
            The name of reference class
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.LinkedClass">
            <summary>
            Gets the class element linked by the relationship
            </summary>
            <value>
            The linked class element.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.IsNullable">
            <summary>
            Gets or sets information indicating whether the attribute is nullable
            </summary>
            <value>
            true if it is nullable, false otherwise. Default is true
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.IsRequired">
            <summary>
            Gets or sets information indicating whether the attribute is required
            </summary>
            <value>
            true if it is required, false otherwise. Default is false
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Ownership">
            <summary>
            Gets or sets the ownership.
            </summary>
            <value>
            One of the RelationshipOwnership value. Default is owned
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.IsJoinManager">
            <summary>
            Gets or sets the information indicating whether the owner class of
            relationship attribute is a join manager.
            </summary>
            <value>
            true if it is a join manager, false, otherwise.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Type">
            <summary>
            Gets or sets the relationship type
            </summary>
            <value>
            One of RelationshipType Enumeration values, default is one-to-one
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.BackwardRelationshipName">
            <summary>
            Gets or sets the name of backward relationship in the linked class.
            </summary>
            <value>
            backward relationship
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.BackwardRelationship">
            <summary>
            The backward relationship attribute defined in the referenced class.
            </summary>
            <value>a relationship attribute</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.IsForeignKeyRequired">
            <summary>
            Gets the information indicating whether a foreign key is required for the
            relationship
            </summary>
            <value>
            True if a foreign key is required, false otherwise.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.IsJoinTableRequired">
            <summary>
            Gets the information indicating whether a join table is required for the
            relationship
            </summary>
            <value>
            True if a join table is required, false otherwise.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.Parent">
            <summary>
            Return a  parent of the SchemaModelElement
            </summary>
            <returns>The parent of the SchemaModelElement</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.ElementName">
            <summary>
            Return the name of the RelationshipAttributeElement
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.RelationshipAttributeElement.DataType">
            <summary>
            Gets or sets data type of the attribute.
            </summary>
            <value>DataType.String</value>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.RelationshipOwnership">
            <summary>
            Describes the options for relationship ownership
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipOwnership.LooselyReferenced">
            <summary>
            LooselyReferenced, does not cause cascade deletion
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipOwnership.Owned">
            <summary>
            Owned, cause cascade deletion
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipOwnership.TightlyReferenced">
            <summary>
            TightlyReferenced, prevent from being deleted
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.RelationshipType">
            <summary>
            Describes the types for relationship
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipType.OneToOne">
            <summary>
            OneToOne
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipType.OneToMany">
            <summary>
            OneToMany
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipType.ManyToOne">
            <summary>
            ManyToOne
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.Schema.RelationshipType.ManyToMany">
            <summary>
            ManyToMany
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaInfoElement">
            <summary>
            The SchemaInfoElement represents information about a 
            schema.
            </summary>
            <version>  1.0.1 26 Jun 2003</version>
            <author>  Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.#ctor(System.String)">
            <summary>
            Initializing a SchemaInfoElement
            </summary>
            <param name="name">The name of schema</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a SchemaInfoElement
            </summary>
            <param name="xmlSchemaElement">xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Info element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaInfoElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaInfoElement.Version">
            <summary>
            Gets or sets version of schema.
            </summary>
            <value>
            The version of schema
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaInfoElement.ElementName">
            <summary>
            Return the name of the RangeElement
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaModel">
            <summary>
            A SchemaModel represents a particular Object-relational schema that simplies
            the modelling of business problems in certain areas.
            
            You can create a SchemaModel in two ways. One is to create it from scratch using
            the SchemaModel API. The SchemaModel provides a set of classes and methods to
            allow creation, deletion, and modification of a schema model that consists of some
            logical entities, such as Class, SimpleAttribute, RelationshipAttribute
            Constraints. Then the SchemaModel can be saved as XML Schema. Alternatively,
            a SchemaModel can be generated from a saved XML Schema, be modified, and be
            saved as XML Schema again.
            </summary>
            
            <version>1.0.1 25 May 2003</version>
            <author>Yong Zhang</author>
            
            <remarks> Microsoft's SOM (Schema Object Model) as internal representation of 
            XML schema is used for internal structuring.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.#ctor">
            <summary>
            Initiating a SchemaModel object
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.#ctor(Newtera.Common.Core.SchemaInfo)">
            <summary>
            Initiating a SchemaModel object
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to traverse its
            elements.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Read(System.String)">
            <summary>
            Read an XML Schema into the model from a file.
            </summary>
            
            <param name="fileName">the name of the XML Schema file</param>
            
            <exception cref="T:Newtera.Common.MetaData.Schema.SchemaModelException"> SchemaModelException is thrown when it fails to
            read the XML Schema file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Read(System.IO.Stream)">
            <summary>
            Read an XML Schema into the model from a Stream.
            </summary>
            
            <param name="stream">
            The stream object from which to read a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Schema.SchemaModelException"> SchemaModelException is thrown when it fails to read
            the XML Schema file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Read(System.IO.TextReader)">
            <summary>
            Read an XML Schema into the model from a TextReader.
            </summary>
            
            <param name="reader">
            The text reader object from which to read a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Schema.SchemaModelException"> SchemaModelException is thrown when it fails to read
            the XML Schema file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Write(System.String)">
            <summary>
            Write the schema as a XML Schema to a file.
            </summary>
            <param name="fileName">The output file name.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Write(System.IO.Stream)">
            <summary>
            Write the schema as a XML Schema to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML schema
            </param>
            
            <exception cref="T:Newtera.Common.MetaData.Schema.SchemaModelException"> SchemaModelException is thrown when it fails to write
            the XML Schema file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Write(System.IO.TextWriter)">
            <summary>
            Write the schema as a XML Schema to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.Schema.SchemaModelException"> SchemaModelException is thrown when it fails to write
            the XML Schema file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Validate">
            <summary>
            Validate the schema model to see if it confirm to schema model integrity
            rules.
            </summary>
            <returns>The result in ValidateResult object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.FindClass(System.String)">
            <summary>
            Find a class by name.</summary>
            <param name="name">The class name</param>
            
            <returns> Return ClassElement object. If the class of given name don't exist
            return null</returns>
            <remarks>the class name is case-insensitive.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.GetClassEnumerator">
            <summary>
            Gets an enumerator for all classes
            </summary>
            <returns>the enumerator</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.FindClassById(System.String)">
            <summary>
            Find a class by id.</summary>
            <param name="classId">The class id</param>
            <returns> Return ClassElement object. If the class of given id don't exist
            return null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.GetClassIndex(System.String)">
            <summary>
            Get the index of a class representing its position in the class tree
            </summary>
            <param name="className">The class name</param>
            <returns>A dot separated index, (for example, 0.1.1)</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddToClassTable(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Add a class to a hashtable with the class name as key
            </summary>
            <param name="classElement">The class to be added</param>
            <remarks>the class name is case-insensitive.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveFromClassTable(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Remove a class from a hashtable with the class name as key
            </summary>
            <param name="classElement">The class to be removed</param>
            <remarks>the class name is case-insensitive.</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddToClassIdTable(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Add a class to a hashtable with the class id as key
            </summary>
            <param name="classElement">The class element to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveFromClassIdTable(System.String)">
            <summary>
            Remove a class from a hashtable with the class id as key
            </summary>
            <param name="classId">The id of class to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.FindConstraint(System.String)">
            <summary>
            Find a constraint by name.</summary>
            <param name="name">The constraint name</param>
            
            <returns> Return ConstraintElementBase object. If the constraint of given name don't exist
            return null</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddToConstraintTable(Newtera.Common.MetaData.Schema.ConstraintElementBase)">
            <summary>
            Add a constraint to a hashtable with the constraint name as key
            </summary>
            <param name="constraintElement">The constraint to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveFromConstraintTable(Newtera.Common.MetaData.Schema.ConstraintElementBase)">
            <summary>
            Remove a constraint from a hashtable with the constraint name as key
            </summary>
            <param name="constraintElement">The constraint to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.CreateClass(System.String)">
            <summary>
            Create a ClassElement
            </summary>
            <param name="name">The name of ClassElement to be created
            </param>
            <returns> The created ClassElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.DuplicateClassNameException">The exception is thrown if a class of the same
            name has already existed</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddRootClass(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary> Add a root class to the schema model
            </summary>
            <param name="classElement">The ClassElement to be added
            </param>
            <returns> The ClassElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.DuplicateClassNameException">The exception is thrown if a class of the same
            name has already existed</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveRootClass(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary> Remove a root class.
            </summary>
            <param name="classElement">the class to be removed
            </param>
            <returns>The ClassElement object removed</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddEnumConstraint(Newtera.Common.MetaData.Schema.EnumElement)">
            <summary> Add an Enumeration Constraint.</summary>
            <param name="enumElement">The supplied EnumElement.
            </param>
            <returns>The EnumElement object added
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveEnumConstraint(System.String)">
            <summary>
            Remove an enumeration constraint from the model.
            </summary>
            <param name="name">The name of enumeration constraint to be removed
            </param>
            <returns>The removed EnumElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.ConstraintUsedException">An exception is thrown if the
            constraint is being referenced</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveEnumConstraint(Newtera.Common.MetaData.Schema.EnumElement)">
            <summary>
            Remove an enumeration constraint from the model.
            </summary>
            <param name="enumElement">The enumElement to be removed
            </param>
            <returns>The removed EnumElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.ConstraintUsedException">An exception is thrown if the
            constraint is being referenced</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddRangeConstraint(Newtera.Common.MetaData.Schema.RangeElement)">
            <summary> Add a Range Constraint.</summary>
            <param name="rangeElement">The supplied RangeElement.
            </param>
            <returns>The RangeElement object added
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveRangeConstraint(System.String)">
            <summary>
            Remove a range constraint from the schema model.
            </summary>
            <param name="name">The name of range constraint to be removed
            </param>
            <returns>The removed RangeElement object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveRangeConstraint(Newtera.Common.MetaData.Schema.RangeElement)">
            <summary>
            Remove a range constraint from the schema model.
            </summary>
            <param name="rangeElement">The rangeElement to be removed
            </param>
            <returns>The removed RangeElement object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddPatternConstraint(Newtera.Common.MetaData.Schema.PatternElement)">
            <summary> Add a pattern Constraint.</summary>
            <param name="patternElement">The supplied PatternElement.
            </param>
            <returns>The PatternElement object added
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemovePatternConstraint(System.String)">
            <summary>
            Remove a pattern constraint from the schema model.
            </summary>
            <param name="name">The name of pattern constraint to be removed
            </param>
            <returns>The removed PatternElement object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemovePatternConstraint(Newtera.Common.MetaData.Schema.PatternElement)">
            <summary>
            Remove a pattern constraint from the schema model.
            </summary>
            <param name="patternElement">The patternElement to be removed
            </param>
            <returns>The removed PatternElement object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.AddListConstraint(Newtera.Common.MetaData.Schema.ListElement)">
            <summary> Add a List Constraint.</summary>
            <param name="listElement">The supplied ListElement.
            </param>
            <returns>The ListElement object added
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveListConstraint(System.String)">
            <summary>
            Remove an list constraint from the model.
            </summary>
            <param name="name">The name of list constraint to be removed
            </param>
            <returns>The removed ListElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.ConstraintUsedException">An exception is thrown if the
            constraint is being referenced</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.RemoveListConstraint(Newtera.Common.MetaData.Schema.ListElement)">
            <summary>
            Remove an list constraint from the model.
            </summary>
            <param name="listElement">The listElement to be removed
            </param>
            <returns>The removed ListElement object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.ConstraintUsedException">An exception is thrown if the
            constraint is being referenced</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.CreateConstraint(System.String,Newtera.Common.MetaData.Schema.ConstraintType)">
            <summary>
            Create a constraint element.
            </summary>
            <param name="name">The name of constraint to be created</param>
            <param name="type">The one of ConstraintType values</param>
            <returns> The created constraint object</returns>
            <exception cref="T:Newtera.Common.MetaData.Schema.DuplicateConstraintNameException">The exception is thrown if a constraint of the same
            name has already existed</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.IsConstraintReferenced(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Gets the information whether the constraint is referred by any attributes
            </summary>
            <param name="constraint">The 
            </param>
            <returns> true if it is used by at least one attribute.
            
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.GetXmlSchema">
            <summary>
            Gets the xml schema that represents the schema model
            </summary>
            <returns>A XmlSchema instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Unmarshal(System.Xml.Schema.XmlSchema)">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
            <param name="xmlSchema">The xml schema model</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Marshal(System.Xml.Schema.XmlSchema)">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <param name="xmlSchema">The xml schema model</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.Reset">
            <summary>
            The reset the model to the begining
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.WriteClasses(System.Xml.Schema.XmlSchema,Newtera.Common.MetaData.Schema.SchemaModelElementCollection)">
            <summary>
            Write class objects to xml schema
            </summary>
            <param name="xmlSchema">The xml schema</param>
            <param name="classList">The list of class objects</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the schema model changed
            </summary>
            <param name="sender">the IMetaDataElement that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.GetClassIndexFromChildren(System.String,Newtera.Common.MetaData.Schema.SchemaModelElementCollection,System.Text.StringBuilder)">
            <summary>
            A resursive function that gets index for a class
            </summary>
            <param name="name">The class name</param>
            <param name="childNodes">A collection of SchemaModelElement objects</param>
            <param name="builder">A StringBuilder instance.</param>
            <returns>true if the node is found, false if not found.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.ToXPath">
            <summary>
            Return a xpath for the SchemaModel
            </summary>
            <returns>a xapth string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModel.GetChildren">
            <summary>
            Gets children of the SchemaModel
            </summary>
            <returns>The collection of IXaclObject nodes for root classes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.IsValid">
            <summary>
            Gets the information indicating whether the schema model is a valid one.
            </summary>
            <value>True if it is valid, false otherwise. Default is true</value>
            <remarks>
            When a schema model is valid, it will be able to generate corresponding
            database schema without compile-time errors. It may still have run-time
            errors due to database problems.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.IsAltered">
            <summary>
            Gets the information indicating whether the schema model has been altered
            since last setting of value.
            </summary>
            <value>True if it is altered, false otherwise. Default is false</value>
            <remarks>
            It falg allows UI tool to save the schema when the tool exits without
            saving the schema.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.MetaData">
            <summary>
            Gets or sets the meta data that owns the Schema
            </summary>
            <returns> A MetaDataModel object</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.SchemaInfo">
            <summary>
            Gets or sets information about the Schema
            </summary>
            <returns> A SchemaInfoElement object</returns>
            <remarks>
            The schema information is stored as attributes of the root XmlSchemaElement
            object.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.RootClasses">
            <summary>
            Gets the root classes of the schema.
            </summary>
            <value>
            A SchemaModelElementCollection contains ClassElement objects for root classes.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.EnumConstraints">
            <summary>
            Gets enumeration constraints of the schema
            </summary>
            <value>A SchemaModelElementCollection contains EnumElement objects</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.RangeConstraints">
            <summary>
            Gets range constraints of the schema
            </summary>
            <value>A SchemaModelElementCollection contains RangeElement objects</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.PatternConstraints">
            <summary>
            Gets pattern constraints of the schema
            </summary>
            <value>A SchemaModelElementCollection contains PatternElement objects</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.ListConstraints">
            <summary>
            Gets list constraints of the schema
            </summary>
            <value>A SchemaModelElementCollection contains ListElement objects</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.SchemaBody">
            <summary>
            Gets the Schema Model Body
            </summary>
            <value>The SchemaModelBody object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModel.Parent">
            <summary>
            Gets parent of IXaclObject
            </summary>
            <returns>null since the schema model is a root.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaModelBody">
             <summary>
             The SchemaModelBody represents the body of the xml schema that contains
             xml schema element definitions for root classes.
             </summary>
             <version>  1.0.0 26 Jun 2003</version>
             <author>  Yong Zhang</author>
             <!--
             Here is an example of structure of a typical xml schema
            	ComplexType definitions for classes go here
            
             <xsd:element name="Demo" psd:version="1.0">
            	<xsd:complexType>
            		<xsd:all>
            			<xsd:element name="ProductList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="Product" type="Product" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            			</xsd:element>
            			<xsd:element name="LineItemList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="LineItem" type="LineItem" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            			</xsd:element>
            			<xsd:element name="OrderList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="Order" type="Order" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            			</xsd:element>
            			<xsd:element name="CustomerList" minOccurs="0">
            			<xsd:complexType>
            			<xsd:sequence>
            				<xsd:element name="Customer" type="Customer" minOccurs="0" maxOccurs="unbounded" />
            			</xsd:sequence>
            			</xsd:complexType>
            			</xsd:element>
            		</xsd:all>
            	</xsd:complexType>
            	<xsd:key name="ProductPK" psd:className="Product" psd:allClasses="Product,Furniture,car">
            		<xsd:selector xpath="ProductList/Product" />
            		<xsd:field xpath="Name" psd:type="string" />
            		<xsd:field xpath="Supplier" psd:type="string" />
            	</xsd:key>
            	<xsd:key name="OrderPK" psd:className="Order" psd:allClasses="Order">
            		<xsd:selector xpath="OrderList/Order" />
            		<xsd:field xpath="Number" psd:type="string" />
            	</xsd:key>
            	<xsd:key name="CustomerPK" psd:className="Customer" psd:allClasses="Customer,Corporate,Personal">
            		<xsd:selector xpath="CustomerList/Customer" />
            		<xsd:field xpath="Name" psd:type="string" />
            	</xsd:key>
            	<xsd:unique name="PersonalCardNumberUQ" psd:className="Personal" psd:allClasses="Personal">
            		<xsd:selector xpath="CustomerList/Customer" />
            		<xsd:field xpath="CardNumber" psd:type="string" />
            	</xsd:unique>
            	<xsd:keyref name="customerOrderCustomerFK" refer="CustomerPK" psd:className="Order" psd:refClass="Customer" psd:refRootClass="Customer" psd:allClasses="Order">
            		<xsd:selector xpath="OrderList/Order" />
            		<xsd:field xpath="customer/Name" psd:type="string" psd:refRootClass="Customer" psd:refAttr="Name" />
            	</xsd:keyref>
            	<xsd:keyref name="ordersCustomerOrderFK" refer="OrderPK" psd:className="Customer" psd:refClass="Order" psd:refRootClass="Order" psd:allClasses="Customer,Corporate,Personal">
            		<xsd:selector xpath="CustomerList/Customer" />
            		<xsd:field xpath="orders/Number" psd:type="string" psd:refRootClass="Order" psd:refAttr="Number" />
            	</xsd:keyref>
            	<xsd:keyref name="productLineItemProductFK" refer="ProductPK" psd:className="LineItem" psd:refClass="Product" psd:refRootClass="Product" psd:allClasses="LineItem">
            		<xsd:selector xpath="LineItemList/LineItem" />
            		<xsd:field xpath="product/Name" psd:type="string" psd:refRootClass="Product" psd:refAttr="Name" />
            		<xsd:field xpath="product/Supplier" psd:type="string" psd:refRootClass="Product" psd:refAttr="Supplier" />
            	</xsd:keyref>
            	<xsd:keyref name="orderLineItemOrderFK" refer="OrderPK" psd:className="LineItem" psd:refClass="Order" psd:refRootClass="Order" psd:allClasses="LineItem">
            		<xsd:selector xpath="LineItemList/LineItem" />
            		<xsd:field xpath="order/Number" psd:type="string" psd:refRootClass="Order" psd:refAttr="Number" />
            	</xsd:keyref>
            </xsd:element>
             -->
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelBody.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing a SchemaInfoElement
            </summary>
            <param name="xmlSchemaElement">xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelBody.AddClassElement(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Add the class to the body of xml schema.
            </summary>
            <param name="classElement">The class element to be added</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelBody.AddPrimaryKeys(Newtera.Common.MetaData.Schema.ClassElement,Newtera.Common.MetaData.Schema.SchemaModelElementCollection)">
            <summary>
            Write the primary keys of a class as <!--<xsd:key></xsd:key>--> to schema body
            </summary>
            <param name="ownerClass">The class that owns primary keys</param>
            <param name="primaryKeys">The primary keys</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelBody.AddForeignKeys(Newtera.Common.MetaData.Schema.RelationshipAttributeElement,Newtera.Common.MetaData.Schema.SchemaModelElementCollection)">
            <summary>
            Write the foreign keys of a class as <!--<xsd:keyref></xsd:keyref>--> to schema body
            </summary>
            <param name="attribute">The relationship attribute</param>
            <param name="primaryKeys">The primary keys of referenced class</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelBody.AddUniqueConstraint(Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Write an unique constraint of a class as <!--<xsd:unique></xsd:unique>-->
            to schema body
            </summary>
            <param name="attribute">The attribute</param>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaModelElementCollection">
            <summary>
            An object collection class to handle SchemaModelElement when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 26 Jun 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.#ctor">
            <summary>
             Initializes a new instance of the SchemaModelElementCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.Add(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Adds an SchemaModelElement to the SchemaModelElementCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.IndexOf(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.Insert(System.Int32,Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.Remove(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.Contains(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by elements of a collection
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SchemaModelElementCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaModelException">
            <summary>
            The SchemaModelException class is the default exception type for metadata 
            package. It is highly recommended that a new exception class is defined 
            and subclassed from this exception class for each specific error that 
            might occur in program of this namespace.
            
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelException.#ctor(System.String)">
            <summary>
            Initializing a SchemaModelException object
            </summary>
            <param name="reason">a description of the exception</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaModelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializing a SchemaModelException object
            </summary>
            
            <param name="reason">a description of the exception</param>
            <param name="ex">the root cause exception</param>
             
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SchemaFormattingException">
            <summary> The exception that is thrown when there is a formatting error in
            a schema model. 
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SchemaFormattingException.#ctor(System.String)">
            <summary> Initializing a SchemaFormattingException object</summary>
            
            <param name="reason">a description of the exception</param>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ReadSchemaException">
            <summary> The exception that is thrown when attempts to read a schema
            failed. 
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ReadSchemaException.#ctor(System.String,System.Exception)">
            <summary> Initializing a ReadSchemaException object</summary>
            
            <param name="ex">the root exception</param>
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.WriteSchemaException">
            <summary> The exception that is thrown when attempts to read a schema
            failed. 
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.WriteSchemaException.#ctor(System.String,System.Exception)">
            <summary> Initializing a WriteSchemaException object</summary>
            
            <param name="ex">the root exception</param>
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DuplicateClassNameException">
            <summary>The exception that is thrown when attempting to add a class that is
            already exists.
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DuplicateClassNameException.#ctor(System.String)">
            <summary> Initializing a DuplicateClassNameException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DuplicateConstraintNameException">
            <summary>The exception that is thrown when attempting to add a constraint that is
            already exists.
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DuplicateConstraintNameException.#ctor(System.String)">
            <summary> Initializing a DuplicateConstraintNameException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DuplicateAttributeNameException">
            <summary>The exception that is thrown when attempting to add an attribute that is
            already exists.
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DuplicateAttributeNameException.#ctor(System.String)">
            <summary> Initializing a DuplicateAttributeNameException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.DuplicateValueException">
            <summary>The exception that is thrown when attempting to add a value that is
            already exists.
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.DuplicateValueException.#ctor(System.String)">
            <summary> Initializing a DuplicateValueException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.ConstraintUsedException">
            <summary>The exception that is thrown when attempting to remove a constraint
            that has been referenced.
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.ConstraintUsedException.#ctor(System.String)">
            <summary> Initializing a ConstraintUsedException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.InvalidClassNameException">
            <summary>The exception that is thrown when encounter an invalid class name
            </summary>
            <version>  	1.0.0 25 Jun 2003
            </version>
            <author>  		Yong Zhang
            
            </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.InvalidClassNameException.#ctor(System.String)">
            <summary> Initializing a InvalidClassNameException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.MissingReversedRelationshipNameException">
            <summary>The exception that is thrown when the reversed relationship
            attribute name is missing.
            </summary>
            <version>  	1.0.0 25 Jun 2003 </version>
            <author>  		Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.MissingReversedRelationshipNameException.#ctor(System.String)">
            <summary> Initializing a MissingReversedRelationshipNameException object</summary>
            
            <param name="reason">a description of the exception</param>
            
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.SimpleAttributeElement">
            <summary>
            SimpleAttributeElement represents a simple attribute in a class.
            </summary>
            
            <!--
            Xml Schema representation:
             
            <xsd:element name="orderNum" type="xsd:positiveInteger" psd:key="true" psd:id="0"/>
            or
            <xsd:element name="Address" psd:id="0">
            <xsd:simpleType>
            <xsd:restriction base="xsd:string">
            <xsd:maxLength value="100"/>
            </xsd:restriction>
            </xsd:simpleType>
            </xsd:element>
            -->
            
            <version>      1.0.1 11 Jul 2003
            </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.#ctor(System.String)">
            <summary>
            Initializing SimpleAttributeElement object.
            </summary>
            <param name="name">Name of the attribute</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.#ctor(System.Xml.Schema.XmlSchemaAnnotated)">
            <summary>
            Initializing SimpleAttributeElement object.
            </summary>
            <param name="xmlSchemaElement">The xml schema element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.ToXPath">
            <summary>
            Return a xpath representation of the SchemaModelElement
            </summary>
            <returns>a xapth representation</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.GetChildren">
            <summary>
            Return a  of children of the SchemaModelElement
            </summary>
            <returns>The collection of IXaclObject nodes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Accept(Newtera.Common.MetaData.Schema.ISchemaModelElementVisitor)">
            <summary>
            Accept a visitor of ISchemaModelElementVisitor type to visit itself.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.CreateXmlSchemaElement(System.String)">
            <summary>
            Create xml schema element as an internal representation
            of Schema Model element.
            </summary>
            <returns> Return an XmlSchemaAnnotated object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Unmarshal">
            <summary>
            Create the member objects from a XML Schema Model
            </summary>
            <!--
            Example of simple attributes in xml schema
            <xsd:simpleType psd:constraint="enumeration" name="State" psd:description="">
            <xsd:restriction base="xsd:string">
            	<xsd:enumeration value="CA" />
            	<xsd:enumeration value="NY" />
            	<xsd:enumeration value="NE" />
            	<xsd:enumeration value="LA" />
            	<xsd:enumeration value="NJ" />
            </xsd:restriction>
            </xsd:simpleType>
            <xsd:simpleType psd:constraint="pattern" name = "Number" psd:description="">
            <xsd:restriction base="xsd:string">
            	<xsd:pattern value="[A-Z]-\d{6}" />
            	<xsd:minLength value="0" />
            	<xsd:maxLength value="8" />
            </xsd:restriction>
            </xsd:simpleType>
            
            <xsd:complexType name="Customer" psd:displayName="Customer" psd:order="3" psd:id="1459">
            <xsd:sequence>
            	<xsd:element name="Number" type="Number" minOccurs="1" maxOccurs="1" psd:displayName="Name" psd:order="0" psd:key="true" psd:id="8477" />
            	<xsd:element name="Name" type="xsd:string" minOccurs="1" maxOccurs="1" psd:displayName="Name" psd:order="0" psd:key="true" psd:id="8479" />
            	<xsd:element name="Address" type="xsd:string" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="Address" psd:order="1" psd:id="8480" />
            	<xsd:element name="City" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="City" psd:order="2" psd:id="8481">
            		<xsd:simpleType>
            		<xsd:restriction base="xsd:string">
            			<xsd:maxLength value="20" />
            		</xsd:restriction>
            		</xsd:simpleType>
            	</xsd:element>
            	<xsd:element name="State" type="State" minOccurs="0" nillable="true" maxOccurs="1" psd:displayName="State" psd:order="3" psd:id="8482">
            </xsd:sequence>
            <xsd:attribute name="obj_id" type="xsd:ID" />
            </xsd:complexType>
            
            -->
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Marshal">
            <summary>
            Write objects to XML Schema Model
            </summary>
            <remarks>
            Notice that we write physical value of a member to xml schema.
            For example, _isUnique member holds a physical value, but IsUnique
            property holds logical value. Logical value may be different from
            physical value. When an attribute is a primary key, even _isUnique
            member holds a physical value of false, IsUnique property will return
            true. Therefore, make sure that only physical values get written to
            xml schema. The same is true when reading value from a xml schema in
            Unmarshal process.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.CreateMinMaxLengthSimpleType(System.Int32,System.Int32)">
            <summary>
            Create a XmlSchemaSimpleType object for minLength and maxLength facets.
            </summary>
            <param name="minLength">minimum length</param>
            <param name="maxLength">maxinum length</param>
            <returns>The XmlSchemaSimpleType object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.ConvertToCaseStyleEnum(System.String)">
            <summary>
            Convert case style string to an enumeration value
            </summary>
            <param name="caseStyle">Case style string</param>
            <returns>One of CaseStyle enum values</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.Schema.SimpleAttributeElement.ConvertToCaseStyleString(Newtera.Common.MetaData.Schema.CaseStyle)">
            <summary>
            Convert case style enum value to a string representation
            </summary>
            <param name="caseStyle">Case style enum value</param>
            <returns>The string representation</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsNullable">
            <summary>
            Gets or sets the information to indicate whether the attribute is nullable.
            </summary>
            <value>
            true if the attribute is nullable, otherwise, false. The default is true.
            </value>
            <!--
            Using xml schema element's nullable attribute to represent this constrains.
            For example:
            <xsd:element name="name" nullable="false">
            -->
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsRequired">
            <summary>
            Gets or sets information indicating whether the attribute is required.
            </summary>
            <value> return true if attribute is required, false otherwise. The default is false.</value>
            
            <remarks>
            Using the XML schema's attribute minOccurs to determine whether this 
            attribute is required. If minOccurs="1" means this attribute is 
            required.
            </remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Constraint">
            <summary>
            Gets or sets the constraint referenced by the attribute.
            </summary>
            <value> The referenced constraint</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsAutoIncrement">
            <summary>
            Gets or sets information to indicate whether the attribute is auto-increment.
            </summary>
            <value>
            true if it is auto-increment; otherwise false. default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsUnique">
            <summary>
            Gets or sets information to indicate whether value of the attribute is unique.
            </summary>
            <value> true if it is unique, otherwise false. Default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsPrimaryKey">
            <summary>
            Gets or sets information to indicate whether the attribute is a primary key.
            </summary>
            <value> true if it is a primary key, otherwise false. Default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.DataType">
            <summary>
            Gets or sets data type of the attribute.
            </summary>
            <value>One of DataType enum values. default is String</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.MinLength">
            <summary>
            Gets or sets minimum length of attribute value. 
            </summary>
            <value>The minimum length of attribute value. Default is 0</value>
            <remarks>It is applicable to an attribute of string type.</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.MaxLength">
            <summary>
            Gets or sets maximum length of attribute value. 
            </summary>
            <value>The maximum length of attribute value. Default is 1024</value>
            <remarks>It is applicable to an attribute of string type.</remarks>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.ColumnLength">
            <summary>
            Gets the actual database column length.
            </summary>
            <value>The actual length for database column, -1 if it is not applicable</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsSystemTimeDefault">
            <summary>
            Gets the information indicating whether the default value is system time.
            </summary>
            <value>True if it uses system time as default, false otherwise. Default is false.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsMultipleChoice">
            <summary>
            Gets the information indicating whether the value of simple attribute is multiple-choice
            </summary>
            <value> True if it is multiple choice, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.DefaultValue">
            <summary>
            Gets or sets default value of an attribute.
            </summary>
            <value> The default value.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsFullTextSearchable">
            <summary>
            Gets or sets information indicating whether this attribute is full-text
            searchable.
            </summary>
            <value>
            true if it is full-text searchable, false otherwise. Default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsGoodForFullTextSearch">
            <summary>
            Gets or sets information indicating whether this attribute is good for
            full-text search. This method is used by the full-text indexer to 
            determine whether to include the content of this attribute as part
            of full-text index.
            </summary>
            <value>
            true if it is good for full-text search, false otherwise. Default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.FullTextInfo">
            <summary>
            Gets or sets the full-text search related info
            </summary>
            <value>The FullTextSearchInfo object that contains full-text search related info
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsMultipleLined">
            <summary>
            Gets or sets information indicating whether the attribute is multiple-lined.
            </summary>
            <value> true if the attribute is multiple-lined, false, otherwise. Default is false.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Rows">
            <summary>
            Gets or sets the number of rows for a multiple-lined property.
            </summary>
            <value> an integer</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Section">
            <summary>
            Gets or sets section of the attribute.
            </summary>
            <value>
            A string of section name.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Usage">
            <summary>
            Gets or sets usage of the attribute.
            </summary>
            <value>
            A value of AttributeUsage enum values.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Category">
            <summary>
            Gets or sets section of the attribute.
            </summary>
            <value>
            A string of section name.
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.IsIndexed">
            <summary>
            Gets or sets information whether the attribute is indexed.
            </summary>
            <value> true if it is indexed, false, otherwise. Default is false. 
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.CaseStyle">
            <summary>
            Gets or sets case style of the attribute.
            </summary>
            <value>One of upper, lower, caseSensitive, caseInsensitive values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.Parent">
            <summary>
            Return a  parent of the SchemaModelElement
            </summary>
            <returns>The parent of the SchemaModelElement</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.SimpleAttributeElement.ElementName">
            <summary>
            Return the name of the SimpleAttributeElement
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.Schema.FullTextSearchInfo">
            <summary>
            The FullTextSearchInfo represents information needed for creating
            full-text search attribute.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.FullTextSearchInfo.DataStore">
            <summary>
            Gets or sets the data store of the full-text search attribute.
            </summary>
            <value> The datastore of this attribute. 
            </value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.FullTextSearchInfo.FileType">
            <summary>
            Gets or sets the file type of the stored data.
            </summary>
            <value> The file type of the stored data.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.Schema.FullTextSearchInfo.IsFilter">
            <summary>
            Gets or sets the information indicate whether a full-text searchable attribute
            if filtered. 
            </summary>
            <value> true if the attribute value is filtered, false otherwise. Default is false.
            </value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest">
            <summary>
            The class represents an access request by a client. An AccessRequest includes
            an XaclObject, XaclSubject. and an XaclActionType value.
            </summary>
            <version>  	1.0.0 11 Dec 2003 </version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest.#ctor">
            <summary>
            Initiating an instance of AccessRequest class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest.#ctor(Newtera.Common.MetaData.XaclModel.XaclSubject,Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Initiating an instance of AccessRequest class.
            </summary>
            <param name="subject"> The subject of the access request. </param>
            <param name="obj">  The object of the access request. </param>
            <param name="actionType"> The type of action. </param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest.Object">
            <summary>
            Gets or sets the XaclObject of the access request.
            </summary>
            <value>An XaclObject.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest.Subject">
            <summary>
            Gets or sets the XaclSubject of the access request.
            </summary>
            <value>XaclSubject object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.AccessRequest.ActionType">
            <summary>
            Gets or sets action type of the access request.
            </summary>
            <value> One of XaclActionType enum values.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder">
            <summary>
            This singleton class provide some convenient methods to build a access request.
            </summary>
            <version>  	1.0.0 26 Nov 2003 </version>
            <author>  		Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.theAccessRequestBuilder">
            <summary> Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.BuildAccessRequest(Newtera.Common.MetaData.XaclModel.IXaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Build an access request for accessing an object of IXaclObject type.
            </summary>
            <param name="xaclObject">the object be accessed.</param>
            <param name="actionType">One of the XaclActionType enum values</param>
            <returns>A created AccessRequest.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.BuildObject(Newtera.Common.MetaData.XaclModel.IXaclObject)">
            <summary>
            Build an XaclObject based on an IXaclObject.
            </summary>
            <param name="xaclObject">the object be accessed.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.BuildSubject">
            <summary>
            Gets the XaclSubject instance for current user.
            </summary>
            <returns> the XaclSubject instance for current user.
            
            </returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.AccessRequestBuilder.Instance">
            <summary>
            Gets the AccessRequestBuilder instance.
            </summary>
            <returns> The AccessRequestBuilder instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.Conclusion">
            <summary>
            The class represents the result for evaluation of an access request
            </summary>
            <version> 1.0.0 10 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.Conclusion.#ctor">
            <summary> 
            Initiate an instance of Conclusion class
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.Conclusion.Permission">
            <summary>
            Gets or sets the resulting permission
            </summary>
            <value> One of the XaclPermissionType</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.Conclusion.DecisionList">
            <summary>
            Gets or sets the decision list.
            </summary>
            <value> A list of Decision objects.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.Decision">
            <summary>
            The class represents a decision as result of evaluating a single XaclRule
            </summary>
            <version> 1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.Decision.#ctor(Newtera.Common.MetaData.XaclModel.XaclRule,Newtera.Common.MetaData.XaclModel.XaclPermissionType)">
            <summary>
            Initiate an instance of Decision class.
            </summary>
            <param name="rule"> The rule of a decision.</param>
            <param name="permission">One of XaclPermissionType</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.Decision.Permission">
            <summary>
            Gets permission of a decision
            </summary>
            <value>One of XaclPermissionType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.Decision.Rule">
            <summary>
            Gets the rule of a decision.
            </summary>
            <value> An XaclRule object</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.IConditionRunner">
            <summary>
            Represents an interface for executing a condition expressed in xquery and return
            a boolean value indicating the result of a condition.
            </summary>
            <version>  	1.0.0 18 Dec. 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.IConditionRunner.IsConditionMet(System.String)">
            <summary>
            Gets an information indicating if a condition expressed in xquery is met or
            or not.
            </summary>
            <param name="condition">The condition expressed in xquery</param>
            <returns>true if the condition is met, false otherwise</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher">
            <summary>
            The class implements the matching algorithm. The 
            algorithm is to find applicable rules that match a given access request. 
            And it doesn't concern about conflict rules, but simply
            finds all rules that are matched.
            </summary>
            <version>1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.#ctor">
            <summary>
            Initiate an instance of RuleMatcher class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.Match(Newtera.Common.MetaData.XaclModel.Processor.AccessRequest,Newtera.Common.MetaData.XaclModel.XaclPolicy,System.Boolean)">
            <summary>
            Match an access request with rules and return a list of decision of the
            matched rules.
            </summary>
            <param name="accessReq">The access request.</param>
            <param name="policy">The xacl policy.</param>
            <param name="isCheckCondition">If true, executing condition; 
            otherwise, condition always is true.</param>
            <returns>
            A list of decisions of the rules that match the access request.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.GetMatchedRules(Newtera.Common.MetaData.XaclModel.XaclRuleCollection,Newtera.Common.MetaData.XaclModel.Processor.AccessRequest,System.Boolean)">
            <summary>
            Gets the rules that match the criteria specified in an access request.
            </summary>
            <param name="rules">A collection of rules to match against</param>
            <param name="accessReq">An access request.</param>
            <param name="isCheckCondition">true to check the condition, false otherwise.</param>
            <returns>A collection of matched rules</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsMatched(Newtera.Common.MetaData.XaclModel.XaclRule,Newtera.Common.MetaData.XaclModel.Processor.AccessRequest,System.Boolean)">
            <summary>
            Gets the information indicating whether a rule matchs the criteria specified
            in an access request. A rule is considered to be matched if rule's subject and
            condition (if required) match that of an access request.
            </summary>
            <param name="rule"> The rule to be matched.</param>
            <param name="accessReq"> The access request.</param>
            <param name="isCheckCondition">true to check the condition, false otherwise.</param>
            <returns>true if the rule is matched, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsSubjectMatched(Newtera.Common.MetaData.XaclModel.XaclSubject,Newtera.Common.MetaData.XaclModel.XaclSubject)">
            <summary>
            Gets the information indicating whether the subject of an access request
            matches that of a rule.
            </summary>
            <param name="ruleSubject">The subject of a rule.</param>
            <param name="reqSubject">The subject of an access request.</param>
            <returns> True if subjects are matched, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsUidMatched(System.String,System.String)">
            <summary>
            Gets the information indicating whether the Uid of an access request subject
            matches that of a rule subject
            </summary>
            <param name="ruleUid">The uid of a rule</param>
            <param name="reqUid">The uid of an access request.</param>
            <returns>true if the uid is matched, false otherwise.</returns>
            <remarks>If the rule does not have a UID, it is considered to be matched</remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsGroupMatched(System.String[],System.String[])">
            <summary>
            Gets the information indicating whether groups of a rule and an access
            request are matched.
            </summary>
            <param name="ruleGroups">The rule's groups.</param>
            <param name="reqGroups">The request's groups.</param>
            <returns> true if groups are matched; false, otherwise.</returns>
            <remarks>
            If the rule's groups are subset of access request, it is considered as being
            matched.  If the rule doesn't have a group, it is considered being matched
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsRoleMatched(System.String[],System.String[])">
            <summary>
            Gets the information indicating whether roles of a rule and an access
            request are matched.
            </summary>
            <param name="ruleRoles">The rule's roles.</param>
            <param name="reqRoles">The request's roles.</param>
            <returns> true if roles are matched; false, otherwise.</returns>
            <remarks>
            If rule's roles is a subset of that of the access request,
            it is considered to be matched.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.Contains(System.String[],System.String[])">
            <summary>
            Gets the information indicating whether a string array contains another
            string array
            </summary>
            <param name="firstArray">The first string array</param>
            <param name="secondArray">The second string array</param>
            <returns> 
            true if the first string array contains the second string array
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.IsConditionMatched(Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Gets the information indicating whether the condition of a rule meets
            the current context.
            </summary>
            <param name="rule">The access rule.</param>
            <returns> if matching, return true; otherwise return false.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.RuleMatcher.ConditionRunner">
            <summary>
            Gets or sets the runner object that is responsible for running the 
            rules' conditions expressed in xquery
            </summary>
            <value>An IConditionRunner</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor">
            <summary>
            The XaclProcessor that evaluates a access request against a xacl policy and
            return a conclusion to the client
            </summary>
            <version>1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.#ctor">
            <summary>
            Initiatiate an instance of XaclProcessor class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.Evaluate(Newtera.Common.MetaData.XaclModel.Processor.AccessRequest,Newtera.Common.MetaData.XaclModel.XaclPolicy)">
            <summary>
            Evaluate an access request against a xacl policy and return a
            Conclusion.
            </summary>
            <param name="accessReq">The access request.</param>
            <param name="policy">The access control policy.</param>
            <returns>A Conclusion object.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.Evaluate(Newtera.Common.MetaData.XaclModel.Processor.AccessRequest,Newtera.Common.MetaData.XaclModel.XaclPolicy,System.Xml.XmlElement)">
            <summary>
            Evaluate an access request against a xacl policy and return a
            Conclusion.
            </summary>
            <param name="accessReq">The access request.</param>
            <param name="policy">The access control policy.</param>
            <param name="currentInstance">the current xml instance as a context for condition evaluation.</param>
            <returns>A Conclusion object.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.GetConclusion(System.Collections.ArrayList,Newtera.Common.MetaData.XaclModel.XaclActionType,Newtera.Common.MetaData.XaclModel.XaclPolicy,System.Boolean)">
            <summary>
            Gets a conclusion of the evaluating an access request.
            </summary>
            <param name="decisions">The list of decisions</param>
            <param name="actionType">The action type</param>
            <param name="policy">The xacl policy</param>
            <param name="isCheckCondition">Indicate whether to check the condition of a rule</param>
            <returns>A Conclusion object</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.HasConflict(System.Collections.ArrayList)">
            <summary>
            Gets the information indicating whether there is a conflict in the
            evaluating decisions
            </summary>
            <param name="decisions">The decisions</param>
            <returns>true if there is a conflict, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.IsConclusionConditional(Newtera.Common.MetaData.XaclModel.Processor.Conclusion)">
            <summary>
            Gets the information indicating whether a conclusion is conditional,
            meaning all the decisions contributing the conclusion are conditional.
            </summary>
            <param name="conclusion">The conclusion</param>
            <returns>true if the conclusion are conditional, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.IsSuperUser(Newtera.Common.MetaData.XaclModel.Processor.AccessRequest)">
            <summary>
            Gets the information indicating whether the access request is submmited
            by the super user
            </summary>
            <param name="accessReq">The access request</param>
            <returns>true if it is submitted by the super user, false otherwise.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.Processor.XaclProcessor.ConditionRunner">
            <summary>
            Gets or sets the runner object that is responsible for running the 
            rules' conditions expressed in xquery
            </summary>
            <value>An IConditionRunner</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.IXaclNode">
            <summary>
            Represents a common interface for the xacl nodes.
            </summary>
            <version>  	1.0.0 08 Dec 2003</version>
            <author>  Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.IXaclNode.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.IXaclNode.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="E:Newtera.Common.MetaData.XaclModel.IXaclNode.ValueChanged">
            <summary>
            Value change handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.IXaclNode.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.NodeFactory">
            <summary>
            A singleton class that creates an instance of IXaclNode based on a xml element
            </summary>
            <version>1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.NodeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.NodeFactory.Create(System.Xml.XmlElement)">
            <summary>
            Creates an instance of IXaclNode type based on the xml element
            representing the node.
            </summary>
            <param name="xmlElement">the xml element.</param>
            <returns>A IXaclNode instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.NodeFactory.ConvertTypeToString(Newtera.Common.MetaData.XaclModel.NodeType)">
            <summary>
            Convert a NodeType value to a string
            </summary>
            <param name="type">One of NodeType values</param>
            <returns>The corresponding string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.NodeFactory.ConvertStringToType(System.String)">
            <summary>
            Convert a type string to a NodeType value
            </summary>
            <param name="str">A type string</param>
            <returns>One of NodeType values</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.NodeFactory.Instance">
            <summary>
            Gets the NodeFactory instance.
            </summary>
            <returns> The NodeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.NodeType">
            <summary>
            Specify the types of nodes in xacl policy.
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Policy">
            <summary>
            Policy
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Definition">
            <summary>
            Definition
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Rule">
            <summary>
            Rule
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Rules">
            <summary>
            Rules
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Actions">
            <summary>
            Actions
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Definitions">
            <summary>
            Definitions
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.NodeType.Setting">
            <summary>
            Setting
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.PermissionChecker">
            <summary>
            The class mainly provides some utility methods for handling permission related stuff
            </summary>
            <version>  	1.0.0 11 Jul 2003</version>
            <author>  		Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.PermissionChecker.theChecker">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.HasPermission(Newtera.Common.MetaData.XaclModel.XaclPolicy,Newtera.Common.MetaData.XaclModel.IXaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Get information indicating whether there is a permission to
            take an action to an IXaclObject
            </summary>
            <param name="policy">the xacl policy model object</param>
            <param name="element">An IXaclObject to be evaluated</param>
            <param name="action">an action of request, there are 4 kind
            of them: read, write, create, delete, all of them defined in class
            XaclActionType.
            </param>
            <returns>true if access to the IXaclObject is allowed, otherwise false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.HasPermission(Newtera.Common.MetaData.XaclModel.XaclPolicy,Newtera.Common.MetaData.XaclModel.IXaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType,System.Xml.XmlElement)">
            <summary>
            Get information indicating whether there is a permission to
            take an action to an XaclObject given an instance as context
            </summary>
            <param name="policy">the xacl policy model object</param>
            <param name="element">An IXaclObject to be accessed
            </param>
            <param name="action">an action of request, there are 4 kind
            of them: read, write, create, delete, all of them defined in class
            XaclActionType.
            </param>
            <param name="currentInstance">the current instance being evaluated.</param>
            <returns>true if access to the meta model element is allowed, otherwise false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.GetPermissionFlags(Newtera.Common.MetaData.XaclModel.XaclPolicy,Newtera.Common.MetaData.XaclModel.IXaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType,System.Xml.XmlElement)">
            <summary>
            Get the flags indicating whether an user has permission to perform certain
            action(s) to an object
            </summary>
            <param name="policy">the xacl policy model object</param>
            <param name="element">An XaclObject which the actions will be performed to.
            </param>
            <param name="actions">actions requested</param>
            <param name="currentInstance">the current instance as a context for condition evaluation.</param>
            <returns>A combined flags of XaclPermissionFlag values.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.GetConclusion(Newtera.Common.MetaData.XaclModel.XaclPolicy,Newtera.Common.MetaData.XaclModel.IXaclObject,Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Gets a Conclusion object as the result of evaluating a access
            request against the policy.
            </summary>
            <param name="policy">the xacl policy model object
            </param>
            <param name="element">An IXaclObject to be accessed</param>
            <param name="action">an action of request, there are 4 kind
            of them: read, write, create, delete, all of them defined in class
            XaclActionType.
            </param>
            <returns> 
            An Conclusion object.
            </returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionChecker.GetCondition(Newtera.Common.MetaData.XaclModel.XaclPolicy,Newtera.Common.MetaData.XaclModel.IXaclObject)">
            <summary>
            Gets a combined condition which combines conditions in rules defined
            an IXaclObject. If there are multiple conditions existed, they are
            combined using logical and operators.
            </summary>
            <param name="policy">the xacl policy</param>
            <param name="element">An IXaclObject to be accessed</param>
            <returns> 
            A combined condition string.
            </returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.PermissionChecker.Instance">
            <summary>
            Gets the PermissionChecker instance.
            </summary>
            <returns> The PermissionChecker instance.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.PermissionChecker.ConditionRunner">
            <summary>
            Gets or sets the runner object that is responsible for running the 
            rules' conditions expressed in xquery
            </summary>
            <value>An IConditionRunner</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.PermissionViolationException">
            <summary> 
            The PermissionViolationException class is thrown when there is a permission
            violation.
            </summary>
            <version> 1.0.0 14 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclException">
            <summary> 
            The XaclException class is the default exception type for xacl
            package. It is highly recommended that a new exception class 
            is defined and subclassed from this exception class for each 
            specific error that might occur in program of this module.
            </summary>
            <version>  	1.0.0 25 Nov 2003</version>
            <author>  		Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclException.#ctor(System.String)">
            <summary> Constructor of a XaclException without an object
            
            </summary>
            <param name="reason">a description of the exception 
            
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclException.#ctor(System.String,System.Exception)">
            <summary>
            Use this constructor when you wish to wrap an Exception.
            </summary>
            <param name="reason">a description of the exception
            </param>
            <param name="ex">The exception to translate; is stored as
            next exception in chain.  Since Throwables have no
            chain, ex will be the last exception in the chain.
            </param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionViolationException.#ctor(System.String)">
            <summary>
            Initiate an instance of PermissionViolationException
            </summary>
            <param name="reason">The reason of the exception</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.PermissionViolationException.#ctor(Newtera.Common.MetaData.XaclModel.XaclActionType,System.String)">
            <summary>
            Initiate an instance of PermissionViolationException
            </summary>
            <param name="actionType"></param>
            <param name="objectName"></param>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclAction">
            <summary>
            The class represents an action in an XaclRule object.
            </summary>
            <version> 1.0.0 10 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclNodeBase">
            <summary> 
            The base class for all xacl node classes
            </summary>
            <version> 1.0.0 07 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.#ctor">
            <summary>
            Initiate an instance of XaclNodeBase class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.#ctor(System.String)">
            <summary>
            Initiate an instance of XaclNodeBase class
            </summary>
            <param name="name">The name of node</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.Unmarshal(System.Xml.XmlElement)">
            <summary>
            sets the element members from a XML element.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.Marshal(System.Xml.XmlElement)">
            <summary>
            Write values of members to an xml element
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeBase.FireValueChangedEvent(System.Object)">
            <summary>
            Fire an event for value change
            </summary>
            <param name="value"></param>
        </member>
        <member name="E:Newtera.Common.MetaData.XaclModel.XaclNodeBase.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclNodeBase.Name">
            <summary>
            Gets or sets the name of a node.
            </summary>
            <value>The name of a node</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclNodeBase.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclAction.#ctor(Newtera.Common.MetaData.XaclModel.XaclActionType,Newtera.Common.MetaData.XaclModel.XaclPermissionType)">
            <summary>
            Constructor  with parameters.
            </summary>
            <param name="actionType">action type</param>
            <param name="permissionType"> XaclPermissionType </param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclAction.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclAction class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclAction.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclAction from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclAction.Marshal(System.Xml.XmlElement)">
            <summary>
            write XaclAction to xml document
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclAction.Permission">
            <summary>
            Gets or sets the value of permission of the action element.
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclAction.ActionType">
            <summary>
            Gets or sets the action type.
            </summary>
            <value>One of the XaclActionType values.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclAction.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclActionCollection">
            <summary>
            Represents a collection of xacl rules.
            </summary>
            <version>1.0.1 10 Dec 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclNodeCollection">
            <summary>
            An object collection class to handle IXaclNode when collections are
            returned from method calls.
            </summary>
            <version> 1.0.1 26 Jun 2003 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.#ctor">
            <summary>
             Initializes a new instance of the XaclNodeCollection class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclNodeCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Add(Newtera.Common.MetaData.XaclModel.IXaclNode)">
            <summary>
            Adds an IXaclNode to the XaclNodeCollection.
            </summary>
            <param name="value">the object to be added</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.AddRange(Newtera.Common.MetaData.XaclModel.XaclNodeCollection)">
            <summary>
            Adds the elements of a XaclNodeCollection to the end of the XaclNodeCollection.
            </summary>
            <param name="collection">The XaclNodeCollection whose elements should be added to the end of the XaclNodeCollection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.IndexOf(Newtera.Common.MetaData.XaclModel.IXaclNode)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Insert(System.Int32,Newtera.Common.MetaData.XaclModel.IXaclNode)">
            <summary>
            inserts an item to the collection at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The Object to insert into collection</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Remove(Newtera.Common.MetaData.XaclModel.IXaclNode)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Contains(Newtera.Common.MetaData.XaclModel.IXaclNode)">
            <summary>
            determines whether the collection contains a specific value
            </summary>
            <param name="value">The Object to locate in the collection.</param>
            <returns>true if the Object is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the Collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the Collection.
            </summary>
            <param name="index">The zero-based index at which to remove value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the Collection.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create objects from xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Marshal(System.Xml.XmlElement)">
            <summary>
            write object to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for Value Changed event fired by members of a xacl model
            </summary>
            <param name="sender">The element that fires the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.ValueChanged">
            <summary>
            Value changed handler
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.Item(System.Int32)">
            <summary>
            Implemention of Indexer member
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclNodeCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclActionCollection.#ctor">
            <summary>
            Initiating an instance of XaclActionCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclActionCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclActionCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclActionCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclActionType">
            <summary>
            Specify the possible action types
            </summary>
            <version> 1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Create">
            <summary>
            Create
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Upload">
            <summary>
            Upload
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclActionType.Download">
            <summary>
            Download
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclCondition">
            <summary>
            This class represents the condition of a rule
            </summary>
            <version>  	1.0.0 25 Nov 2003 </version>
            <author>  	Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclCondition.#ctor">
            <summary>
            Initiate an instance of XaclCondition class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclCondition.#ctor(System.String)">
            <summary>
            Initiate an instance of XaclCondition class
            </summary>
            <param name="condition">   condition expression </param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclCondition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclCondition class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclCondition.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclCondition from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclCondition.Marshal(System.Xml.XmlElement)">
            <summary>
            write XaclCondition to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclCondition.Condition">
            <summary>
            Gets or sets the condition string
            </summary>
            <value>  condition string</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclCondition.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclConflictResolutionType">
            <summary>
            Specify the options of conflict resolution
            </summary>
            <version> 1.0.0 11 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclConflictResolutionType.Dtp">
            <summary>
            Deny take precedence
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclConflictResolutionType.Gtp">
            <summary>
            Grant take precedence
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclConflictResolutionType.Ntp">
            <summary>
            Nothing tale precedence
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclDef">
            <summary>
            Represent an Xacl definition for an xacl object. It contains an XaclObject
            and a set of xacl rules applied to the object.
            </summary>
            <version>  1.0.0 11 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDef.#ctor(Newtera.Common.MetaData.XaclModel.XaclObject)">
            <summary>
            Initiate an instance of a XaclDef class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDef.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of DataClass class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDef.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an xacl definition from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDef.Marshal(System.Xml.XmlElement)">
            <summary>
            write an xacl definition to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclDef.Object">
            <summary>
            Gets the XaclObject associated with a XaclDef
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclDef.Rules">
            <summary>
            Gets the rules associated with a XaclDef
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclDef.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclDefCollection">
            <summary>
            Represents a collection of xacl rules.
            </summary>
            <version>1.0.1 10 Dec 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDefCollection.#ctor">
            <summary>
            Initiating an instance of XaclDefCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclDefCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclDefCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclDefCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclObject">
            <summary>
            The class represents the object in a Xacl definition.
            </summary>
            <version> 1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclObject.#ctor(System.String)">
            <summary>
            Initiate an instance of XaclObject
            </summary>
            <param name="href">The href of the object element.</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclObject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclObject class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclObject.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclObject from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclObject.Marshal(System.Xml.XmlElement)">
            <summary>
            write policy to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclObject.Href">
            <summary>
            Gets the href attribute of the XaclObject.
            </summary>
            <returns> the href attribute.</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclObject.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag">
            <summary>
            Specify the flags used to indicate permissions to an object
            </summary>
            <version> 1.0.0 04 Jan 2004</version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantRead">
            <summary>
            GrantRead
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantWrite">
            <summary>
            GrantWrite
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantCreate">
            <summary>
            GrantCreate
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantDelete">
            <summary>
            GrantDelete
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantUpload">
            <summary>
            GrantUpload
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionFlag.GrantDownload">
            <summary>
            GrantDownload
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclPermissionType">
            <summary>
            Specify the possible type of permissions
            </summary>
            <version> 1.0.0 10 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionType.Grant">
            <summary>
            Grant access
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionType.Deny">
            <summary>
            Deny access
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionType.ConditionalGrant">
            <summary>
            Conditionally Grant access
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPermissionType.ConditionalDeny">
            <summary>
            Conditionally Deny access
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclPolicy">
            <summary>
            The class provides methods to allow easy accesses and 
            modifications of an underlying access control policy expressed in 
            an XACL document. The policy is independent of any view format.
            </summary>
            <version> 1.0.0 08 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.#ctor">
            <summary>
            Initiate an instance of XaclPolicy class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.GetRules(Newtera.Common.MetaData.XaclModel.XaclObject)">
            <summary>
            Gets the rules, including the inherited ones, for an XaclObject
            </summary>
            <param name="obj">The XaclObject</param>
            <returns>A collection of XaclRule instances</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.GetLocalRules(Newtera.Common.MetaData.XaclModel.XaclObject)">
            <summary>
            Gets the rules (not including the inherited ones) for an XaclObject
            </summary>
            <param name="obj">The XaclObject</param>
            <returns>A collection of XaclRule instances</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.IsRuleExist(Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Gets the information indicating whether a rule for an XaclObject with the
            same subject has already existed.
            </summary>
            <param name="obj">The XaclObject</param>
            <param name="rule">The rule</param>
            <returns>true if it exists, false otherwise.</returns>
            <remarks>If a rule with the same subject exists in the local XaclDef
            instance, then this method will return true. If an inherited rule from
            the parent XaclDef instances with the same subject exists,
            this method will return true as well
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.IsLocalRuleExist(Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Gets the information indicating whether a local rule for an XaclObject with the
            same subject has already existed.
            </summary>
            <param name="obj">The XaclObject</param>
            <param name="rule">The rule</param>
            <returns>true if it exists, false otherwise.</returns>
            <remarks>If a rule with the same subject exists in the local XaclDef
            instance, then this method will return true. It won't search up for
            the propagated rules
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.GetPropagatedRule(Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Gets the most immediate propagated rule of a given local rule.
            </summary>
            <param name="obj">The XaclObject</param>
            <param name="rule">The local rule</param>
            <returns>A XaclRule object, null if there is none</returns>
            <remarks>A propagated rule is the one in the path of the given
            XaclObject and has AllowPropagate set to true.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.AddRule(Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Add a rule for an XaclObject in a ploicy
            </summary>
            <param name="obj">The XaclObject</param>
            <param name="rule">The XaclRule</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.RemoveRule(Newtera.Common.MetaData.XaclModel.XaclObject,Newtera.Common.MetaData.XaclModel.XaclRule)">
            <summary>
            Remove a rule for an XaclObject from a ploicy
            </summary>
            <param name="obj">The XaclObject</param>
            <param name="rule">The XaclRule to be removed</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Read(System.String)">
            <summary>
            Constrauct a xacl policy from an XML file.
            </summary>
            <param name="fileName">the name of the XML file</param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            read the XML file
            </exception>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Read(System.IO.Stream)">
            <summary>
            Constrauct a xacl policy from an stream.
            </summary>
            <param name="stream">the stream</param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            read the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Read(System.IO.TextReader)">
            <summary>
            Constrauct a xacl policy from a text reader.
            </summary>
            <param name="reader">the text reader</param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            read the text reader</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Write(System.String)">
            <summary>
            Write a xacl policy to an XML file.
            </summary>
            <param name="fileName">The output file name.</param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            write to the file.</exception> 
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Write(System.IO.Stream)">
            <summary>
            Write a xacl policy as a XML data to a Stream.
            </summary>
            <param name="stream">the stream object to which to write a XML data</param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Write(System.IO.TextWriter)">
            <summary>
            Write a xacl policy as a XML data to a TextWriter.
            </summary>
            <param name="writer">the TextWriter instance to which to write a XML schema
            </param>
            <exception cref="T:Newtera.Common.MetaData.XaclModel.XaclException">XaclException is thrown when it fails to
            write to the stream.</exception>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an policy from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.Marshal(System.Xml.XmlElement)">
            <summary>
            write policy to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.GetXmlDocument">
            <summary>
            Gets the xml document that represents an xacl policy
            </summary>
            <returns>A XmlDocument instance</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.IsRuleOverrided(Newtera.Common.MetaData.XaclModel.XaclRule,Newtera.Common.MetaData.XaclModel.XaclRuleCollection)">
            <summary>
            Gets the information indicating whether a rule with the same subject has
            already existed in the collection.
            </summary>
            <param name="rule">The rule</param>
            <param name="rules">The rule collection</param>
            <returns>true if it exists, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclPolicy.ValueChangedHandler(System.Object,System.EventArgs)">
            <summary>
            A handler to call when a value of the xacl policy changed
            </summary>
            <param name="sender">the IXaclNode that cause the event</param>
            <param name="e">the arguments</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclPolicy.IsAltered">
            <summary>
            Gets or sets the information indicating whether the xacl policy has been altered
            </summary>
            <value>true if it is altered, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclPolicy.IsEmpty">
            <summary>
            Gets the information indicating whether it is an empty policy
            </summary>
            <value>true if it is an empty policy, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclPolicy.Setting">
            <summary>
            Gets the setting of the policy.
            </summary>
            <value>XaclSetting object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclPolicy.XaclDefs">
            <summary>
            Gets all the xacl definitions of the policy.
            </summary>
            <value> All the xacl definitions of a policy.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclPolicy.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclPropagationType">
            <summary>
            Specify the possible options of PropagationType enum
            </summary>
            <version> 1.0.0 11 Dec 2003 </version>
            <author>  Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPropagationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclPropagationType.Downward">
            <summary>
            Downward
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclRule">
            <summary>
            The class represents an xacl rule in an XaclDef that includes
            an XaclSubject, A set of XaclAction, and XaclCondition.
            </summary>
            <version>1.0.0 11 Dec 2003</version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.#ctor(Newtera.Common.MetaData.XaclModel.XaclSubject)">
            <summary>
            Initiate an instance of XaclRule class.
            </summary>
            <param name="subject"> XaclSubject object </param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.#ctor(Newtera.Common.MetaData.XaclModel.XaclSubject,System.String)">
            <summary>
            Initiate an instance of XaclRule class.
            </summary>
            <param name="subject"> XaclSubject object </param>
            <param name="href">The href of the rule</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclRule class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.GetPermission(Newtera.Common.MetaData.XaclModel.XaclActionType)">
            <summary>
            Gets the permission of the rule for an action type
            </summary>
            <param name="actionType">One of XaclActionType values</param>
            <returns>One of XaclPermissionType values</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.SetPermission(Newtera.Common.MetaData.XaclModel.XaclActionType,Newtera.Common.MetaData.XaclModel.XaclPermissionType)">
            <summary>
            Sets the permission of the rule for an action type
            </summary>
            <param name="actionType">One of XaclActionType values</param>
            <param name="permission">One of XaclPermissionType</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclRule from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.Marshal(System.Xml.XmlElement)">
            <summary>
            write XaclRule to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRule.CreateDefaultActions">
            <summary>
            Create default actions for read, write, create, delete, upload, and download.
            </summary>
            <returns>A collection of XaclAction</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>An XaclActionCollection instance.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.HasCondition">
            <summary>
            Gets the information indicating whether a rule has a condition
            </summary>
            <value>true if it has condition, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsReadGranted">
            <summary>
            Gets or sets the information indicating whether a read permission of a rule
            is granted.
            </summary>
            <value>true if the read permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsReadDenied">
            <summary>
            Gets or sets the information indicating whether a read permission of a rule
            is denied.
            </summary>
            <value>true if the read permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsWriteGranted">
            <summary>
            Gets or sets the information indicating whether a write permission of a rule
            is granted.
            </summary>
            <value>true if the write permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsWriteDenied">
            <summary>
            Gets or sets the information indicating whether a write permission of a rule
            is denied.
            </summary>
            <value>true if the write permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsCreateGranted">
            <summary>
            Gets or sets the information indicating whether a create permission of a rule
            is granted.
            </summary>
            <value>true if the create permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsCreateDenied">
            <summary>
            Gets or sets the information indicating whether a create permission of a rule
            is denied.
            </summary>
            <value>true if the create permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsDeleteGranted">
            <summary>
            Gets or sets the information indicating whether a delete permission of a rule
            is granted.
            </summary>
            <value>true if the delete permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsDeleteDenied">
            <summary>
            Gets or sets the information indicating whether a delete permission of a rule
            is denied.
            </summary>
            <value>true if the delete permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsUploadGranted">
            <summary>
            Gets or sets the information indicating whether a upload permission of a rule
            is granted.
            </summary>
            <value>true if the upload permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsUploadDenied">
            <summary>
            Gets or sets the information indicating whether a upload permission of a rule
            is denied.
            </summary>
            <value>true if the upload permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsDownloadGranted">
            <summary>
            Gets or sets the information indicating whether a download permission of a rule
            is granted.
            </summary>
            <value>true if the download permission is granted, false if denied</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsDownloadDenied">
            <summary>
            Gets or sets the information indicating whether a download permission of a rule
            is denied.
            </summary>
            <value>true if the download permission is denied, false if granted</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.Condition">
            <summary>
            Gets or sets the condition of an XaclRule.
            </summary>
            <value> the XaclCondition object.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.Subject">
            <summary>
            Gets the XaclSubject of The XaclRule. 
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.AllowPropagation">
            <summary>
            Gets or sets the information indicating whether the rule is allowed to
            propagate
            </summary>
            <value>true if it is allowed to propagate, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.IsOverrided">
            <summary>
            Gets or sets the information indicating whether the rule overrides the
            inherited rule with the same subject
            </summary>
            <value>true if it overrides the inherited rule, false otherwise. Default is false.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRule.ObjectHref">
            <summary>
            Gets or sets the href of the XaclObject to which the rule is
            associated with.
            </summary>
            <value>A href string</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclRuleCollection">
            <summary>
            Represents a collection of xacl rules.
            </summary>
            <version>1.0.1 10 Dec 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRuleCollection.#ctor">
            <summary>
            Initiating an instance of XaclRuleCollection class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclRuleCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclRuleCollection class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclRuleCollection.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclSetting">
            <summary>
            This class defines some setting at the policy level 
            </summary>
            <version> 1.0.0 11 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSetting.#ctor">
            <summary>
            Initiate an instance of XaclSetting class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSetting.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclSetting class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSetting.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclSetting from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSetting.Marshal(System.Xml.XmlElement)">
            <summary>
            write XaclSetting to xml document
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.PropagationType">
            <summary>
            Gets or sets the propagation type
            </summary>
            <value> One of XaclPropagationType class.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.ConflictResolutionType">
            <summary>
            Gets or sets the propagation type
            </summary>
            <value> One of XaclPropagationType class.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultReadPermission">
            <summary>
            Gets or sets the default read permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultWritePermission">
            <summary>
            Gets or sets the default write permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultCreatePermission">
            <summary>
            Gets or sets the default create permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultDeletePermission">
            <summary>
            Gets or sets the default delete permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultUploadPermission">
            <summary>
            Gets or sets the default upload permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.DefaultDownloadPermission">
            <summary>
            Gets or sets the default download permission.
            </summary>
            <value> One of XaclPermissionType enum values</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSetting.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.XaclModel.XaclSubject">
            <summary>
            The class represents the a subject in an XaclRule
            </summary>
            <version>  	1.0.0 10 Dec 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclSubject.EveryOne">
            <summary>
            Constant definition for EveryOne role
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.XaclModel.XaclSubject.AnonymousUser">
            <summary>
            Constant definition for Anonymous user
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.#ctor">
            <summary>
            Initiating an instance of XaclSubject class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.#ctor(System.Xml.XmlElement)">
            <summary>
            Initiating an instance of XaclSubject class
            </summary>
            <param name="xmlElement">The xml element conatins data of the instance</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.AddRole(System.String)">
            <summary>
            Add a role to the subject
            </summary>
            <param name="role">A role to add</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.AddGroup(System.String)">
            <summary>
            Add a group to the subject
            </summary>
            <param name="group">A group to add</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.Equals(System.Object)">
            <summary>
            Gets the information indicating whether this subject equals to another
            subject
            </summary>
            <param name="obj">Another subject</param>
            <returns>true if it equals to another subject, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.GetHashCode">
            <summary>
            Override GetHashCode from the base class
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.Unmarshal(System.Xml.XmlElement)">
            <summary>
            create an XaclSubject from a xml document.
            </summary>
            <param name="parent">An xml element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.Marshal(System.Xml.XmlElement)">
            <summary>
            write policy to xml document
            </summary>
            <param name="parent">An xml element for the element</param>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.ConvertToStringArray(System.String)">
            <summary>
            Convert a string of values separated by comma to a string array
            </summary>
            <param name="str">The string of values</param>
            <returns>a string array</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.ConvertToString(System.String[])">
            <summary>
            Convert an array of strings to a single string separated by comma
            </summary>
            <param name="values">An array of strings</param>
            <returns>a string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.IsStringEqual(System.String,System.String)">
            <summary>
            Gets the information indicating whether two string are equal.
            </summary>
            <param name="str1">One string</param>
            <param name="str2">Another string</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.XaclModel.XaclSubject.IsArrayEqual(System.String[],System.String[])">
            <summary>
            Gets the information indicating whether two string arrays are equal.
            </summary>
            <param name="strs1">One string array </param>
            <param name="strs2">Another string array</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSubject.Uid">
            <summary>
            Gets or sets the user id of the subject.
            </summary>
            <value> the user id of the subject.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSubject.Roles">
            <summary>
            Gets or sets the user roles of the subject.
            </summary>
            <value> an array of user roles</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSubject.Groups">
            <summary>
            Gets or sets the user groups of the subject.
            </summary>
            <value> an array of user groups.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.XaclModel.XaclSubject.NodeType">
            <summary>
            Gets the type of node
            </summary>
            <value>One of NodeType values</value>
        </member>
        <member name="T:Newtera.Common.MetaData.DataViewListHandler">
            <summary>
            Represents an handler that retrieve a list of data view names of
            a schema meta model
            </summary>
            <version> 1.0.0 05 Apr 2004 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.DataViewListHandler.GetValues(Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Get a list of data view names
            </summary>
            <param name="context">The SchemaModelElement object constraint by the list values</param>
            <returns>A collection of string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.DataViewListHandler.IsValueValid(System.String,Newtera.Common.MetaData.Schema.SchemaModelElement)">
            <summary>
            Gets information indicating whether a given data view name is valid
            </summary>
            <param name="val">The given data view name</param>
            <param name="context">The SchemaModelElement object constraint by the list values</param>
            <returns>true if the value is valid, false, otherwise.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.EnumTypeFactory">
            <summary>
            A singleton class that creates an Enum Type of a property descriptor based
            on a SchemaModelElement
            </summary>
            <version>  	1.0.0 14 Nov 2003 </version>
            <author> Yong Zhang </author>
        </member>
        <member name="F:Newtera.Common.MetaData.EnumTypeFactory.theFactory">
            <summary>
            Singleton's private instance.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.EnumTypeFactory.#ctor">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.EnumTypeFactory.Create(Newtera.Common.MetaData.Schema.AttributeElementBase)">
            <summary>
            Creates an Enum Type of a property descriptor based
            on a SchemaModelElement
            </summary>
            <param name="schemaModelElement">The schema model element</param>
            <returns>A Type represent an enum class</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.EnumTypeFactory.CreateModuleBuilder">
            <summary>
            Create a module builder to build EnumBuilder
            </summary>
            <returns>A module builder</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.EnumTypeFactory.CreateBooleanEnumType">
            <summary>
            Create an Enum Type for boolean property in which there are three values:
            None, True, False. Depending on the user's culture, the values will be
            localized.
            </summary>
            <returns>A dynamic Boolean Enum type</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.EnumTypeFactory.CreateAttributeEnumType(System.String,Newtera.Common.MetaData.Schema.SimpleAttributeElement)">
            <summary>
            Create an Enum Type for a simple attribute that has an enum constraint
            </summary>
            <param name="typeName">An unique type name among schemas</param>
            <param name="schemaModelElement">The attribute element</param>
            <returns>A Dynamic Enum Type</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.EnumTypeFactory.Instance">
            <summary>
            Gets the EnumTypeFactory instance.
            </summary>
            <returns> The EnumTypeFactory instance.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.GlobalizedPropertyDescriptor">
            <summary>
            GlobalizedPropertyDescriptor enhances the base class by obtaining the display name for a property
            from the resource.
            </summary>
            <version> 1.0.0 15 Oct 2004 </version>
            <author> Yong Zhang</author> 
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Instantiate an instance of GlobalizedPropertyDescriptor
            </summary>
            <param name="basePropertyDescriptor"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Indicate whether the property value can be reset
            </summary>
            <param name="component">The component</param>
            <returns>true if it can be reset, false otherwise</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the property value
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the property value
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Inidicate whether the property should be serialized
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.ComponentType">
            <summary>
            Gets the component type
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.Category">
            <summary>
            Get the globalized category name of the property from a resource file
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.DisplayName">
            <summary>
            Get the globalized display name of the property from a resource file
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.Description">
            <summary>
            Get the globalized description of the property from a resource file
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.IsReadOnly">
            <summary>
            Is it read only property
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.Name">
            <summary>
            Get property name
            </summary>
        </member>
        <member name="P:Newtera.Common.MetaData.GlobalizedPropertyDescriptor.PropertyType">
            <summary>
            Gets the property type
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.MetaDataElementSortedList">
            <summary>
            A collection class that keeps the a list of objects in a sorted
            order based on display positions.
            </summary>
            <version> 1.0.1 8 Jun 2005 </version>
            <author> Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataElementSortedList.#ctor">
            <summary>
             Initializes a new instance of the MetaDataElementSortedList class.
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataElementSortedList.Add(System.Int32,System.Object)">
            <summary>
            Adds an object to the list at the position based on its
            display position.
            </summary>
            <param name="position">The integer represents display position.</param>
            <param name="val">the object to be added</param>
            <returns>The actual position into which the new element was inserted</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataElementSortedList.IndexOf(System.Object)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The Object to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataElementSortedList.Remove(System.Object)">
            <summary>
            removes the first occurrence of a specific object from the collection
            </summary>
            <param name="value">The Object to remove from the collection.</param>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataElementSortedList.Values">
            <summary>
            Get the sorted list of objects based on their display positions.
            </summary>
            <value>A sorted list of objects.</value>
        </member>
        <member name="T:Newtera.Common.MetaData.MetaDataModel">
            <summary>
            Represents meta data of a database schema
            </summary>
            
            <version>1.0.1 25 Jul 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.#ctor">
            <summary>
            Initiating an instance of MetaDataModel class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.#ctor(Newtera.Common.Core.SchemaInfo)">
            <summary>
            Initiating an instance of MetaDataModel class
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetBottomClasses">
            <summary>
            Gets all bottom classes of the schema
            </summary>
            <returns>A collection of ClassElement instances representing bottom classes.</returns>
            <remarks>
            Only the bottom classes that the user has permission to read will be returned.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetBottomClasses(System.String)">
            <summary>
            Gets all bottom classes of the given root class.
            </summary>
            <param name="rootClassName">The root class name, null for all bottom classes in the schema.</param>
            <returns>A collection of ClassElement instances representing bottom classes of the given root.</returns>
            <remarks>
            Only the bottom classes that the user has permission to read will be returned.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDefaultDataView(System.String)">
            <summary>
            Gets the default data view of a class, including only attributes whose
            usage is defined as "either Result, Serach, or Both"
            </summary>
            <param name="className">The class name</param>
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of all the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDefaultDataView(System.String,System.String)">
            <summary>
            Gets the default data view of a class
            </summary>
            <param name="className">The class name</param>
            <param name="sectionString">A string of sections separated by ;</param>
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default. If a section string is provided, only those attributes
            that matches any of sections will be added to the result list.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDefaultDataView(System.String,System.Boolean)">
            <summary>
            Gets the default data view of a class
            </summary>
            <param name="className">The class name</param>
            <param name="includeArrays">true to include array attributes, false otherwise.</param>
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default. If a section string is provided, only those attributes
            that matches any of sections will be added to the result list.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDefaultDataView(System.String,System.String,System.Boolean)">
            <summary>
            Gets the default data view of a class
            </summary>
            <param name="className">The class name</param>
            <param name="sectionString">A string of sections separated by ;</param>
            <param name="includeArrays">true to include array attributes, false otherwise.</param>
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default. If a section string is provided, only those attributes
            that matches any of sections will be added to the result list.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDetailedDataView(System.String)">
            <summary>
            Gets the detailed data view of a class, ignore the usage definitions of attributes.
            </summary>
            <param name="className">The class name</param>
            <returns>The DataViewModel for the detailed data view</returns>
            <remarks>
            The detailed data view consists of all the attributes that are browsable
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetCompleteDataView(System.String)">
            <summary>
            Gets the complete data view of a class, including non-browsable attribute
            </summary>
            <param name="className">The class name</param>
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of all the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetDefaultDataView(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the default data view of a class
            </summary>
            <param name="className">The class name</param>
            <param name="sectionString">A string of sections separated by ;</param>
            <param name="includeArrays">true to include array attributes.</param>
            <param name="ignoreUsage">ignore the attribute usage definitions</param>
            <param name="includeNonBrowsables">true to include non-browsable attributes in result attributes, false, otherwise</param>		
            <returns>The DataViewModel for the default view</returns>
            <remarks>
            The default data view consists of the attributes in search
            and result fields, including simple and relationship ones, that an user
            has permission to access. The search fields are combinded with AND
            operator by default. If a section string is provided, only those attributes
            that matches any of sections will be added to the result list.
            </remarks>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.AddBottomClasses(Newtera.Common.MetaData.Schema.SchemaModelElementCollection,Newtera.Common.MetaData.Schema.SchemaModelElementCollection)">
            <summary>
            Add bottom classes to the collection.
            </summary>
            <param name="bottomClasses">A collection of bottom classes.</param>
            <param name="childClasses">The collection of child classes</param>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetReadableAttributes(Newtera.Common.MetaData.Schema.ClassElement)">
            <summary>
            Gets the inherited and local attributes (Simple and relationship) of a class
            that the principal has permission to read.
            </summary>
            <param name="classElement">The class element</param>
            <returns>A collection of attributes</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetPrimaryKeyFilter(Newtera.Common.MetaData.DataView.DataClass,Newtera.Common.MetaData.Schema.RelationshipAttributeElement)">
            <summary>
            Construct a search filter expression for primary keys
            </summary>
            <param name="ownerClass">The owner class of primary keys</param>
            <param name="relationshipAttribute">The relationship attribute</param>
            <returns>A IDataViewElement instance representing an expression</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.IsInSections(System.String,System.String[])">
            <summary>
            Gets the information indicating whether a SimpleAttributeElement is in one of
            the provided sections
            </summary>
            <param name="attributeSection">The attribute section</param>
            <param name="sections">The sections array</param>
            <returns>true if the attribute is in one of the sections, false otherwise.</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.ToXPath">
            <summary>
            Return a xpath for the SchemaModel
            </summary>
            <returns>a xapth string</returns>
        </member>
        <member name="M:Newtera.Common.MetaData.MetaDataModel.GetChildren">
            <summary>
            Gets children of the SchemaModel
            </summary>
            <returns>The collection of IXaclObject nodes for root classes</returns>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.SchemaInfo">
            <summary>
            Gets Schema information
            </summary>
            <value> A SchemaInfo object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.SchemaModel">
            <summary>
            Gets Schema model
            </summary>
            <value> A SchemaInfo object</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.DataViews">
            <summary>
            Gets data view collection
            </summary>
            <value> A DataViewModelCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.XaclPolicy">
            <summary>
            Gets xacl policy model
            </summary>
            <value> A xacl policy model</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.Taxonomies">
            <summary>
            Gets a collection of TaxonomyModel objects
            </summary>
            <value>A TaxonomyModelCollection</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.RuleManager">
            <summary>
            Gets the RuleManager that manages the rules
            </summary>
            <value>A RuleManager</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.MappingManager">
            <summary>
            Gets the MappingManager that manages the import/export mappings
            </summary>
            <value>A MappingManager</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.SelectorManager">
            <summary>
            Gets the SelectorManager that manages all selectors
            </summary>
            <value>A SelectorManager</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReload">
            <summary>
            Gets the value indicating whether any part of the meta data need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadSchema">
            <summary>
            Gets or sets the value indicating whether the schema model need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadDataViews">
            <summary>
            Gets or sets the value indicating whether the data views need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadXaclPolicy">
            <summary>
            Gets or sets the value indicating whether the xacl policy need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadTaxonomies">
            <summary>
            Gets or sets the value indicating whether the taxonomies need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadRules">
            <summary>
            Gets or sets the value indicating whether the rules need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadMappings">
            <summary>
            Gets or sets the value indicating whether the mappings need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.NeedReloadSelectors">
            <summary>
            Gets or sets the value indicating whether the selectors need to be reloaded.
            </summary>
            <value>true if it needs reload, false otherwise</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.CheckPermission">
            <summary>
            Gets the information indicating whether it must check permissions
            before adding an item to the tree
            </summary>
            <value>true if it must check permissions, false otherwise.</value>
        </member>
        <member name="P:Newtera.Common.MetaData.MetaDataModel.Parent">
            <summary>
            Gets parent of IXaclObject
            </summary>
            <returns>null since the schema model is a root.</returns>
        </member>
        <member name="T:Newtera.Common.MetaData.MetaDataType">
            <summary>
            Specify the types of meta data model
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.DataViews">
            <summary>
            DataViews
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.XaclPolicy">
            <summary>
            XaclPolicy
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.Taxonomies">
            <summary>
            Taxonomies
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.Rules">
            <summary>
            Rules
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.Mappings">
            <summary>
            Mappings
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.Selectors">
            <summary>
            Selectors
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.MetaDataType.FileTypeInfo">
            <summary>
            FileTypeInfo
            </summary>
        </member>
        <member name="T:Newtera.Common.MetaData.ValueChangedEventArgs">
            <summary>
            Represents a event argument for the ValueChanged event
            </summary>
            <version>1.0.1 16 Nov. 2003</version>
            <author>Yong Zhang</author>
        </member>
        <member name="F:Newtera.Common.MetaData.ValueChangedEventArgs.Property">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:Newtera.Common.MetaData.ValueChangedEventArgs.NewValue">
            <summary>
            The new property value
            </summary>
        </member>
        <member name="M:Newtera.Common.MetaData.ValueChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Instantiate an instance of ValueChangedEventArgs
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
    </members>
</doc>
