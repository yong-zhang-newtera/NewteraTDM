<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IsRequired" xml:space="preserve">
    <value>Is Required</value>
  </data>
  <data name="IsRequiredDescription" xml:space="preserve">
    <value>Indicate whether the array attribute's value is required?</value>
  </data>
  <data name="Dimension" xml:space="preserve">
    <value>Dimension</value>
  </data>
  <data name="DimensionDescription" xml:space="preserve">
    <value>The dimension of the array. The valid values are 1 or 2.</value>
  </data>
  <data name="ElementDataType" xml:space="preserve">
    <value>Element Data Type</value>
  </data>
  <data name="ElementDataTypeDescription" xml:space="preserve">
    <value>The data type of the array element values.</value>
  </data>
  <data name="ColumnCount" xml:space="preserve">
    <value>Column Count</value>
  </data>
  <data name="ColumnCountDescription" xml:space="preserve">
    <value>The number of columns of the array. For a one-dimension array, the number of columns is 1.</value>
  </data>
  <data name="ColumnTitles" xml:space="preserve">
    <value>Column Titles</value>
  </data>
  <data name="ColumnTitlesDescription" xml:space="preserve">
    <value>Column titles of the array. If not given, default column titles are used.</value>
  </data>
  <data name="Section" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="SectionDescription" xml:space="preserve">
    <value>The section to which the attribute is classified, used for UI display purpose.</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CategoryDescription" xml:space="preserve">
    <value>This category to which the attribute is classified. Using category for grouping attributes.</value>
  </data>
  <data name="SystemCategory" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="AppearanceCategory" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="ArraySize" xml:space="preserve">
    <value>Array Size</value>
  </data>
  <data name="ArraySizeDescription" xml:space="preserve">
    <value>Use NormalSize if the array size is less than 4000 characters, including delimiters; Otherwise use OverSize. Use NormalSize is more efficient.</value>
  </data>
  <data name="IsSingleRow" xml:space="preserve">
    <value>Is Single Row</value>
  </data>
  <data name="IsSingleRowDescription" xml:space="preserve">
    <value>Indicate whether the array attribute represents a single-row array.</value>
  </data>
  <data name="IsFullTextSearchAttribute" xml:space="preserve">
    <value>Is Full-text Search Attribute</value>
  </data>
  <data name="IsFullTextSearchAttributeDescription" xml:space="preserve">
    <value>Indicate whether the content of this attribute is used for full-text search</value>
  </data>
  <data name="IndexCategory" xml:space="preserve">
    <value>Index</value>
  </data>
</root>