<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PrimaryKeys" xml:space="preserve">
    <value>Primary Keys</value>
  </data>
  <data name="LargeImage" xml:space="preserve">
    <value>Large Image</value>
  </data>
  <data name="MedianImage" xml:space="preserve">
    <value>Median Image</value>
  </data>
  <data name="SmallImage" xml:space="preserve">
    <value>Small Image</value>
  </data>
  <data name="DetailedText" xml:space="preserve">
    <value>Detailed Text</value>
  </data>
  <data name="PrimaryKeysDescription" xml:space="preserve">
    <value>Primary Keys of the class</value>
  </data>
  <data name="LargeImageDescription" xml:space="preserve">
    <value>Large Image of the class for display purpose</value>
  </data>
  <data name="MedianImageDescription" xml:space="preserve">
    <value>Median sized Image of the class for display purpose</value>
  </data>
  <data name="SmallImageDescription" xml:space="preserve">
    <value>Small Image of the class for display purpose</value>
  </data>
  <data name="SystemCategory" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="AppearanceCategory" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="MethodCategory" xml:space="preserve">
    <value>Method</value>
  </data>
  <data name="IsBrowsable" xml:space="preserve">
    <value>Is Browsable</value>
  </data>
  <data name="IsBrowsableDescription" xml:space="preserve">
    <value>Indicate whether the class will appears on the web class tree for browsing?</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CategoryDescription" xml:space="preserve">
    <value>Specify a category of the class used to group classes together on user interface</value>
  </data>
  <data name="SortAttribute" xml:space="preserve">
    <value>Sort Attribute</value>
  </data>
  <data name="SortAttributeDescription" xml:space="preserve">
    <value>Specify an attribute used in default and detailed data view sorting</value>
  </data>
  <data name="SortCategory" xml:space="preserve">
    <value>Sort</value>
  </data>
  <data name="SortDirection" xml:space="preserve">
    <value>Sort Direction</value>
  </data>
  <data name="SortDirectionDescription" xml:space="preserve">
    <value>Specify the sort direction</value>
  </data>
  <data name="UniqueKeys" xml:space="preserve">
    <value>Unique Keys</value>
  </data>
  <data name="UniqueKeysDescription" xml:space="preserve">
    <value>Specify a collection of attributes that define a unique constraint of the class</value>
  </data>
  <data name="IsJunction" xml:space="preserve">
    <value>Is Junction</value>
  </data>
  <data name="IsJunctionDescription" xml:space="preserve">
    <value>True if the class is used as a junction of a many-to-many relationship</value>
  </data>
  <data name="JunctionCategory" xml:space="preserve">
    <value>Junction</value>
  </data>
  <data name="ClassPageUrl" xml:space="preserve">
    <value>Class Page URL</value>
  </data>
  <data name="ClassPageUrlDescription" xml:space="preserve">
    <value>Specify an url of a customized web page for displaying a set of instances in the class. Used by Web client</value>
  </data>
  <data name="InstancePageUrl" xml:space="preserve">
    <value>Instance Page URL</value>
  </data>
  <data name="InstancePageUrlDescription" xml:space="preserve">
    <value>Specify an url of a customized web page for displaying a single instance in the class. Used by Web client</value>
  </data>
  <data name="ShowRelatedClasses" xml:space="preserve">
    <value>Show Related Classes</value>
  </data>
  <data name="ShowRelatedClassesDescription" xml:space="preserve">
    <value>Used by the web client to show or hide the classes related to the instance of this class</value>
  </data>
  <data name="CustomPages" xml:space="preserve">
    <value>Custom Related Pages</value>
  </data>
  <data name="CustomPagesDescription" xml:space="preserve">
    <value>Specify the custom pages that display related information about selected instance on the web client.</value>
  </data>
  <data name="InitializationCode" xml:space="preserve">
    <value>Initialization Code</value>
  </data>
  <data name="InitializationCodeDescription" xml:space="preserve">
    <value>Define a C# code block that will be executed at the instance's initialization</value>
  </data>
  <data name="BeforeUpdateCode" xml:space="preserve">
    <value>Before Update Code</value>
  </data>
  <data name="BeforeUpdateCodeDescription" xml:space="preserve">
    <value>Define a C# code block that will be executed before updating an instance</value>
  </data>
  <data name="BeforeInsertCode" xml:space="preserve">
    <value>Before Insert Code</value>
  </data>
  <data name="BeforeInsertCodeDescription" xml:space="preserve">
    <value>Define a C# code block that will be executed before inserting an instance</value>
  </data>
  <data name="CallbackFunctionCode" xml:space="preserve">
    <value>Callback Function Code</value>
  </data>
  <data name="CallbackFunctionCodeDescription" xml:space="preserve">
    <value>Define a C# code block that will be executed when a web form making a callback</value>
  </data>
  <data name="MatchCategory" xml:space="preserve">
    <value>Match</value>
  </data>
  <data name="MatchCondition" xml:space="preserve">
    <value>Match Condition</value>
  </data>
  <data name="MatchConditionDescription" xml:space="preserve">
    <value>The xquery condition to match the instances during batch loading</value>
  </data>
  <data name="NestedDataViewName" xml:space="preserve">
    <value>Nested DataView Name</value>
  </data>
  <data name="NestedDataViewNameDescription" xml:space="preserve">
    <value>Specify name of a data view which is used to display a nested table in a form</value>
  </data>
  <data name="TableName" xml:space="preserve">
    <value>Table Name</value>
  </data>
  <data name="TableNameDescription" xml:space="preserve">
    <value>The corresponding database table name</value>
  </data>
</root>