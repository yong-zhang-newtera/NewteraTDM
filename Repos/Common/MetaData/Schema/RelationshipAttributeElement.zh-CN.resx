<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LinkedClass" xml:space="preserve">
    <value>关联数据类</value>
  </data>
  <data name="LinkedClassDescription" xml:space="preserve">
    <value>该关系属性所关联的数据类.</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>是否必要</value>
  </data>
  <data name="IsRequiredDescription" xml:space="preserve">
    <value>指定该属性值是否为必要?</value>
  </data>
  <data name="Ownership" xml:space="preserve">
    <value>所有权</value>
  </data>
  <data name="OwnershipDescription" xml:space="preserve">
    <value>关系的所有权将决定数据记录删除时的相关操作.</value>
  </data>
  <data name="IsJoinManager" xml:space="preserve">
    <value>是否为Join Manager</value>
  </data>
  <data name="IsJoinManagerDescription" xml:space="preserve">
    <value>是否作为Join Manager的关系属性?</value>
  </data>
	<data name="IsOwnedRelationship" xml:space="preserve">
    <value>是否为所属关系</value>
  </data>
	<data name="IsOwnedRelationshipDescription" xml:space="preserve">
    <value>指定所关联的数据类是否为所属数据类。true为所属，否则为引用。</value>
  </data>
  <data name="IsIndexed" xml:space="preserve">
    <value>是否索引</value>
  </data>
  <data name="IsIndexedDescription" xml:space="preserve">
    <value>是否为该关系属性建立索引? 在有外键一侧的关系属性才能建立索引.</value>
  </data>
  <data name="IsUsedForFullTextIndex" xml:space="preserve">
    <value>是否用于全文检索</value>
  </data>
	<data name="IsUsedForFullTextIndexDescription" xml:space="preserve">
    <value>指定该关系属性所关联的数据实例是否参与建立全文检索索引？</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>关系类型</value>
  </data>
  <data name="TypeDescription" xml:space="preserve">
    <value>指定该关系的类型, 比如一对一,一对多,和多对一.</value>
  </data>
  <data name="BackwardRelationship" xml:space="preserve">
    <value>逆向关系</value>
  </data>
  <data name="BackwardRelationshipDescription" xml:space="preserve">
    <value>与该关系属性对应的逆向关系属性.每一关系属性都有与之对应的逆向关系属性.</value>
  </data>
  <data name="SystemCategory" xml:space="preserve">
    <value>系统</value>
  </data>
  <data name="RelationshipCategory" xml:space="preserve">
    <value>关系</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>用途</value>
  </data>
  <data name="UsageDescription" xml:space="preserve">
    <value>指定该属性是否包含在默认视图中。</value>
  </data>
  <data name="DefaultViewCategory" xml:space="preserve">
    <value>默认视图</value>
  </data>
  <data name="IndexCategory" xml:space="preserve">
    <value>索引</value>
  </data>
  <data name="CascadedAttributes" xml:space="preserve">
    <value>级联属性</value>
  </data>
	<data name="CascadedAttributesDescription" xml:space="preserve">
    <value>指定一个简单属性作为级联属性.当本属性的值发生变化时,将改变级联属性的值域.</value>
  </data>
  <data name="FilterExpression" xml:space="preserve">
    <value>过滤条件</value>
  </data>
	<data name="FilterExpressionDescription" xml:space="preserve">
    <value>针对多对一的关系属性，用于过滤关联数据类的数据实例作为可以选择的关联数据实例集合</value>
  </data>
</root>