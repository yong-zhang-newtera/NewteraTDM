<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LinkedClass" xml:space="preserve">
    <value>Linked Class</value>
  </data>
  <data name="LinkedClassDescription" xml:space="preserve">
    <value>The class lined by this relationship attribute.</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>Is Required</value>
  </data>
  <data name="IsRequiredDescription" xml:space="preserve">
    <value>Indicate whether the attribute value is required?</value>
  </data>
  <data name="Ownership" xml:space="preserve">
    <value>Ownership</value>
  </data>
  <data name="OwnershipDescription" xml:space="preserve">
    <value>Relationship ownership, this value is applicable only if the relationship is a joint manager.</value>
  </data>
  <data name="IsJoinManager" xml:space="preserve">
    <value>Is Join Manager</value>
  </data>
  <data name="IsJoinManagerDescription" xml:space="preserve">
    <value>Indicate whether this relationship is a joint manager. A join manager is responsible for maintaining the relationship.</value>
  </data>
  <data name="IsOwnedRelationship" xml:space="preserve">
    <value>Is Owned Relationship</value>
  </data>
  <data name="IsOwnedRelationshipDescription" xml:space="preserve">
    <value>Indicate whether the related class through this relationship is owned.</value>
  </data>
  <data name="IsIndexed" xml:space="preserve">
    <value>Is Indexed</value>
  </data>
  <data name="IsIndexedDescription" xml:space="preserve">
    <value>Indicate whether the value of the attribute is indexed for better search performance? Only the relationship that has a foreign key can be indexed.</value>
  </data>
  <data name="IsUsedForFullTextIndex" xml:space="preserve">
    <value>Is Used For Full-Text Index</value>
  </data>
  <data name="IsUsedForFullTextIndexDescription" xml:space="preserve">
    <value>Indicate whether the instances referenced by this relationship are used to build a full-text index?</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TypeDescription" xml:space="preserve">
    <value>The type of the relationship, such as one-to-one, one-to-many, etc.</value>
  </data>
  <data name="BackwardRelationship" xml:space="preserve">
    <value>Backward Relationship</value>
  </data>
  <data name="BackwardRelationshipDescription" xml:space="preserve">
    <value>The backward relationship that corresponds to this relationship. Every relationship has a backward relationship. </value>
  </data>
  <data name="SystemCategory" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="RelationshipCategory" xml:space="preserve">
    <value>Relationship</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage</value>
  </data>
  <data name="UsageDescription" xml:space="preserve">
    <value>Indicate whether the attribute is part of the default data view.</value>
  </data>
  <data name="DefaultViewCategory" xml:space="preserve">
    <value>Default View</value>
  </data>
  <data name="IndexCategory" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="CascadedAttributes" xml:space="preserve">
    <value>Cascaded Attributes</value>
  </data>
  <data name="CascadedAttributesDescription" xml:space="preserve">
    <value>Indicate which attribute's values are affected by the event of value change of the attribute.</value>
  </data>
  <data name="FilterExpression" xml:space="preserve">
    <value>Filter Expression</value>
  </data>
  <data name="FilterExpressionDescription" xml:space="preserve">
    <value>Specify an expression that is used to filter the data instances in the related class via many-to-one relationship.</value>
  </data>
</root>