//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3649
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3649 版自动生成。
// 
#pragma warning disable 1591

namespace SmartExcel.AdminWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AdminServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class AdminService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServerVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDataSourceValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback NeedCreateDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback NeedCreateTablespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTablespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppSchemaListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppHomeDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerLicenseMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerLicenseDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientLicenseMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsEvaluationLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemainingEvaluationDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegisteredClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnregisterClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetupAppSchemasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerLogTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearServerLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerTraceLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearTraceLogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AdminService() {
            this.Url = global::SmartExcel.Properties.Settings.Default.SmartExcel_AdminWebService_AdminService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServerVersionCompletedEventHandler GetServerVersionCompleted;
        
        /// <remarks/>
        public event IsDataSourceValidCompletedEventHandler IsDataSourceValidCompleted;
        
        /// <remarks/>
        public event NeedCreateDatabaseCompletedEventHandler NeedCreateDatabaseCompleted;
        
        /// <remarks/>
        public event NeedCreateTablespaceCompletedEventHandler NeedCreateTablespaceCompleted;
        
        /// <remarks/>
        public event CreateTablespaceCompletedEventHandler CreateTablespaceCompleted;
        
        /// <remarks/>
        public event UpdateSchemaCompletedEventHandler UpdateSchemaCompleted;
        
        /// <remarks/>
        public event UpdateServerConfigCompletedEventHandler UpdateServerConfigCompleted;
        
        /// <remarks/>
        public event GetAppSchemaListCompletedEventHandler GetAppSchemaListCompleted;
        
        /// <remarks/>
        public event GetAppHomeDirCompletedEventHandler GetAppHomeDirCompleted;
        
        /// <remarks/>
        public event GetServerIdCompletedEventHandler GetServerIdCompleted;
        
        /// <remarks/>
        public event GetServerLicenseMsgCompletedEventHandler GetServerLicenseMsgCompleted;
        
        /// <remarks/>
        public event GetServerLicenseDetailsCompletedEventHandler GetServerLicenseDetailsCompleted;
        
        /// <remarks/>
        public event DisableLicenseCompletedEventHandler DisableLicenseCompleted;
        
        /// <remarks/>
        public event GetClientLicenseMsgCompletedEventHandler GetClientLicenseMsgCompleted;
        
        /// <remarks/>
        public event SetLicenseKeyCompletedEventHandler SetLicenseKeyCompleted;
        
        /// <remarks/>
        public event IsEvaluationLicenseCompletedEventHandler IsEvaluationLicenseCompleted;
        
        /// <remarks/>
        public event GetRemainingEvaluationDaysCompletedEventHandler GetRemainingEvaluationDaysCompleted;
        
        /// <remarks/>
        public event GetRegisteredClientsCompletedEventHandler GetRegisteredClientsCompleted;
        
        /// <remarks/>
        public event RegisterClientCompletedEventHandler RegisterClientCompleted;
        
        /// <remarks/>
        public event CheckInClientCompletedEventHandler CheckInClientCompleted;
        
        /// <remarks/>
        public event UnregisterClientCompletedEventHandler UnregisterClientCompleted;
        
        /// <remarks/>
        public event SetupAppSchemasCompletedEventHandler SetupAppSchemasCompleted;
        
        /// <remarks/>
        public event GetServerLogTextCompletedEventHandler GetServerLogTextCompleted;
        
        /// <remarks/>
        public event ClearServerLogCompletedEventHandler ClearServerLogCompleted;
        
        /// <remarks/>
        public event GetServerTraceLogCompletedEventHandler GetServerTraceLogCompleted;
        
        /// <remarks/>
        public event ClearTraceLogCompletedEventHandler ClearTraceLogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerVersion", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerVersion() {
            object[] results = this.Invoke("GetServerVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerVersionAsync() {
            this.GetServerVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetServerVersionAsync(object userState) {
            if ((this.GetServerVersionOperationCompleted == null)) {
                this.GetServerVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerVersionOperationCompleted);
            }
            this.InvokeAsync("GetServerVersion", new object[0], this.GetServerVersionOperationCompleted, userState);
        }
        
        private void OnGetServerVersionOperationCompleted(object arg) {
            if ((this.GetServerVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerVersionCompleted(this, new GetServerVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsDataSourceValid", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsDataSourceValid(string databaseType, string dataSourceName) {
            object[] results = this.Invoke("IsDataSourceValid", new object[] {
                        databaseType,
                        dataSourceName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsDataSourceValidAsync(string databaseType, string dataSourceName) {
            this.IsDataSourceValidAsync(databaseType, dataSourceName, null);
        }
        
        /// <remarks/>
        public void IsDataSourceValidAsync(string databaseType, string dataSourceName, object userState) {
            if ((this.IsDataSourceValidOperationCompleted == null)) {
                this.IsDataSourceValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDataSourceValidOperationCompleted);
            }
            this.InvokeAsync("IsDataSourceValid", new object[] {
                        databaseType,
                        dataSourceName}, this.IsDataSourceValidOperationCompleted, userState);
        }
        
        private void OnIsDataSourceValidOperationCompleted(object arg) {
            if ((this.IsDataSourceValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDataSourceValidCompleted(this, new IsDataSourceValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/NeedCreateDatabase", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NeedCreateDatabase(string databaseType, string dataSourceName) {
            object[] results = this.Invoke("NeedCreateDatabase", new object[] {
                        databaseType,
                        dataSourceName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NeedCreateDatabaseAsync(string databaseType, string dataSourceName) {
            this.NeedCreateDatabaseAsync(databaseType, dataSourceName, null);
        }
        
        /// <remarks/>
        public void NeedCreateDatabaseAsync(string databaseType, string dataSourceName, object userState) {
            if ((this.NeedCreateDatabaseOperationCompleted == null)) {
                this.NeedCreateDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNeedCreateDatabaseOperationCompleted);
            }
            this.InvokeAsync("NeedCreateDatabase", new object[] {
                        databaseType,
                        dataSourceName}, this.NeedCreateDatabaseOperationCompleted, userState);
        }
        
        private void OnNeedCreateDatabaseOperationCompleted(object arg) {
            if ((this.NeedCreateDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NeedCreateDatabaseCompleted(this, new NeedCreateDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/NeedCreateTablespace", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NeedCreateTablespace(string databaseType, string dataSourceName) {
            object[] results = this.Invoke("NeedCreateTablespace", new object[] {
                        databaseType,
                        dataSourceName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NeedCreateTablespaceAsync(string databaseType, string dataSourceName) {
            this.NeedCreateTablespaceAsync(databaseType, dataSourceName, null);
        }
        
        /// <remarks/>
        public void NeedCreateTablespaceAsync(string databaseType, string dataSourceName, object userState) {
            if ((this.NeedCreateTablespaceOperationCompleted == null)) {
                this.NeedCreateTablespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNeedCreateTablespaceOperationCompleted);
            }
            this.InvokeAsync("NeedCreateTablespace", new object[] {
                        databaseType,
                        dataSourceName}, this.NeedCreateTablespaceOperationCompleted, userState);
        }
        
        private void OnNeedCreateTablespaceOperationCompleted(object arg) {
            if ((this.NeedCreateTablespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NeedCreateTablespaceCompleted(this, new NeedCreateTablespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/CreateTablespace", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateTablespace(string databaseType, string dataSourceName, string userName, string password, string dataFileDir) {
            this.Invoke("CreateTablespace", new object[] {
                        databaseType,
                        dataSourceName,
                        userName,
                        password,
                        dataFileDir});
        }
        
        /// <remarks/>
        public void CreateTablespaceAsync(string databaseType, string dataSourceName, string userName, string password, string dataFileDir) {
            this.CreateTablespaceAsync(databaseType, dataSourceName, userName, password, dataFileDir, null);
        }
        
        /// <remarks/>
        public void CreateTablespaceAsync(string databaseType, string dataSourceName, string userName, string password, string dataFileDir, object userState) {
            if ((this.CreateTablespaceOperationCompleted == null)) {
                this.CreateTablespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTablespaceOperationCompleted);
            }
            this.InvokeAsync("CreateTablespace", new object[] {
                        databaseType,
                        dataSourceName,
                        userName,
                        password,
                        dataFileDir}, this.CreateTablespaceOperationCompleted, userState);
        }
        
        private void OnCreateTablespaceOperationCompleted(object arg) {
            if ((this.CreateTablespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTablespaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UpdateSchema", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSchema(string databaseType, string dataSourceName) {
            this.Invoke("UpdateSchema", new object[] {
                        databaseType,
                        dataSourceName});
        }
        
        /// <remarks/>
        public void UpdateSchemaAsync(string databaseType, string dataSourceName) {
            this.UpdateSchemaAsync(databaseType, dataSourceName, null);
        }
        
        /// <remarks/>
        public void UpdateSchemaAsync(string databaseType, string dataSourceName, object userState) {
            if ((this.UpdateSchemaOperationCompleted == null)) {
                this.UpdateSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSchemaOperationCompleted);
            }
            this.InvokeAsync("UpdateSchema", new object[] {
                        databaseType,
                        dataSourceName}, this.UpdateSchemaOperationCompleted, userState);
        }
        
        private void OnUpdateSchemaOperationCompleted(object arg) {
            if ((this.UpdateSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSchemaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UpdateServerConfig", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerConfig(string databaseType, string dataSourceName, string imageBaseURL, string imageBasePath) {
            this.Invoke("UpdateServerConfig", new object[] {
                        databaseType,
                        dataSourceName,
                        imageBaseURL,
                        imageBasePath});
        }
        
        /// <remarks/>
        public void UpdateServerConfigAsync(string databaseType, string dataSourceName, string imageBaseURL, string imageBasePath) {
            this.UpdateServerConfigAsync(databaseType, dataSourceName, imageBaseURL, imageBasePath, null);
        }
        
        /// <remarks/>
        public void UpdateServerConfigAsync(string databaseType, string dataSourceName, string imageBaseURL, string imageBasePath, object userState) {
            if ((this.UpdateServerConfigOperationCompleted == null)) {
                this.UpdateServerConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerConfigOperationCompleted);
            }
            this.InvokeAsync("UpdateServerConfig", new object[] {
                        databaseType,
                        dataSourceName,
                        imageBaseURL,
                        imageBasePath}, this.UpdateServerConfigOperationCompleted, userState);
        }
        
        private void OnUpdateServerConfigOperationCompleted(object arg) {
            if ((this.UpdateServerConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerConfigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAppSchemaList", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppSchemaList() {
            object[] results = this.Invoke("GetAppSchemaList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppSchemaListAsync() {
            this.GetAppSchemaListAsync(null);
        }
        
        /// <remarks/>
        public void GetAppSchemaListAsync(object userState) {
            if ((this.GetAppSchemaListOperationCompleted == null)) {
                this.GetAppSchemaListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppSchemaListOperationCompleted);
            }
            this.InvokeAsync("GetAppSchemaList", new object[0], this.GetAppSchemaListOperationCompleted, userState);
        }
        
        private void OnGetAppSchemaListOperationCompleted(object arg) {
            if ((this.GetAppSchemaListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppSchemaListCompleted(this, new GetAppSchemaListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAppHomeDir", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppHomeDir() {
            object[] results = this.Invoke("GetAppHomeDir", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppHomeDirAsync() {
            this.GetAppHomeDirAsync(null);
        }
        
        /// <remarks/>
        public void GetAppHomeDirAsync(object userState) {
            if ((this.GetAppHomeDirOperationCompleted == null)) {
                this.GetAppHomeDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppHomeDirOperationCompleted);
            }
            this.InvokeAsync("GetAppHomeDir", new object[0], this.GetAppHomeDirOperationCompleted, userState);
        }
        
        private void OnGetAppHomeDirOperationCompleted(object arg) {
            if ((this.GetAppHomeDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppHomeDirCompleted(this, new GetAppHomeDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerId", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerId() {
            object[] results = this.Invoke("GetServerId", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerIdAsync() {
            this.GetServerIdAsync(null);
        }
        
        /// <remarks/>
        public void GetServerIdAsync(object userState) {
            if ((this.GetServerIdOperationCompleted == null)) {
                this.GetServerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerIdOperationCompleted);
            }
            this.InvokeAsync("GetServerId", new object[0], this.GetServerIdOperationCompleted, userState);
        }
        
        private void OnGetServerIdOperationCompleted(object arg) {
            if ((this.GetServerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerIdCompleted(this, new GetServerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerLicenseMsg", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerLicenseMsg() {
            object[] results = this.Invoke("GetServerLicenseMsg", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerLicenseMsgAsync() {
            this.GetServerLicenseMsgAsync(null);
        }
        
        /// <remarks/>
        public void GetServerLicenseMsgAsync(object userState) {
            if ((this.GetServerLicenseMsgOperationCompleted == null)) {
                this.GetServerLicenseMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLicenseMsgOperationCompleted);
            }
            this.InvokeAsync("GetServerLicenseMsg", new object[0], this.GetServerLicenseMsgOperationCompleted, userState);
        }
        
        private void OnGetServerLicenseMsgOperationCompleted(object arg) {
            if ((this.GetServerLicenseMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerLicenseMsgCompleted(this, new GetServerLicenseMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerLicenseDetails", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerLicenseDetails() {
            object[] results = this.Invoke("GetServerLicenseDetails", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerLicenseDetailsAsync() {
            this.GetServerLicenseDetailsAsync(null);
        }
        
        /// <remarks/>
        public void GetServerLicenseDetailsAsync(object userState) {
            if ((this.GetServerLicenseDetailsOperationCompleted == null)) {
                this.GetServerLicenseDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLicenseDetailsOperationCompleted);
            }
            this.InvokeAsync("GetServerLicenseDetails", new object[0], this.GetServerLicenseDetailsOperationCompleted, userState);
        }
        
        private void OnGetServerLicenseDetailsOperationCompleted(object arg) {
            if ((this.GetServerLicenseDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerLicenseDetailsCompleted(this, new GetServerLicenseDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DisableLicense", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DisableLicense(string adminName, string adminPassword) {
            object[] results = this.Invoke("DisableLicense", new object[] {
                        adminName,
                        adminPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisableLicenseAsync(string adminName, string adminPassword) {
            this.DisableLicenseAsync(adminName, adminPassword, null);
        }
        
        /// <remarks/>
        public void DisableLicenseAsync(string adminName, string adminPassword, object userState) {
            if ((this.DisableLicenseOperationCompleted == null)) {
                this.DisableLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableLicenseOperationCompleted);
            }
            this.InvokeAsync("DisableLicense", new object[] {
                        adminName,
                        adminPassword}, this.DisableLicenseOperationCompleted, userState);
        }
        
        private void OnDisableLicenseOperationCompleted(object arg) {
            if ((this.DisableLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableLicenseCompleted(this, new DisableLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetClientLicenseMsg", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientLicenseMsg(string clientName, string clientId) {
            object[] results = this.Invoke("GetClientLicenseMsg", new object[] {
                        clientName,
                        clientId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientLicenseMsgAsync(string clientName, string clientId) {
            this.GetClientLicenseMsgAsync(clientName, clientId, null);
        }
        
        /// <remarks/>
        public void GetClientLicenseMsgAsync(string clientName, string clientId, object userState) {
            if ((this.GetClientLicenseMsgOperationCompleted == null)) {
                this.GetClientLicenseMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientLicenseMsgOperationCompleted);
            }
            this.InvokeAsync("GetClientLicenseMsg", new object[] {
                        clientName,
                        clientId}, this.GetClientLicenseMsgOperationCompleted, userState);
        }
        
        private void OnGetClientLicenseMsgOperationCompleted(object arg) {
            if ((this.GetClientLicenseMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientLicenseMsgCompleted(this, new GetClientLicenseMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetLicenseKey", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetLicenseKey(string licenseKey) {
            this.Invoke("SetLicenseKey", new object[] {
                        licenseKey});
        }
        
        /// <remarks/>
        public void SetLicenseKeyAsync(string licenseKey) {
            this.SetLicenseKeyAsync(licenseKey, null);
        }
        
        /// <remarks/>
        public void SetLicenseKeyAsync(string licenseKey, object userState) {
            if ((this.SetLicenseKeyOperationCompleted == null)) {
                this.SetLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("SetLicenseKey", new object[] {
                        licenseKey}, this.SetLicenseKeyOperationCompleted, userState);
        }
        
        private void OnSetLicenseKeyOperationCompleted(object arg) {
            if ((this.SetLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLicenseKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsEvaluationLicense", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsEvaluationLicense() {
            object[] results = this.Invoke("IsEvaluationLicense", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsEvaluationLicenseAsync() {
            this.IsEvaluationLicenseAsync(null);
        }
        
        /// <remarks/>
        public void IsEvaluationLicenseAsync(object userState) {
            if ((this.IsEvaluationLicenseOperationCompleted == null)) {
                this.IsEvaluationLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsEvaluationLicenseOperationCompleted);
            }
            this.InvokeAsync("IsEvaluationLicense", new object[0], this.IsEvaluationLicenseOperationCompleted, userState);
        }
        
        private void OnIsEvaluationLicenseOperationCompleted(object arg) {
            if ((this.IsEvaluationLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsEvaluationLicenseCompleted(this, new IsEvaluationLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetRemainingEvaluationDays", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRemainingEvaluationDays() {
            object[] results = this.Invoke("GetRemainingEvaluationDays", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemainingEvaluationDaysAsync() {
            this.GetRemainingEvaluationDaysAsync(null);
        }
        
        /// <remarks/>
        public void GetRemainingEvaluationDaysAsync(object userState) {
            if ((this.GetRemainingEvaluationDaysOperationCompleted == null)) {
                this.GetRemainingEvaluationDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemainingEvaluationDaysOperationCompleted);
            }
            this.InvokeAsync("GetRemainingEvaluationDays", new object[0], this.GetRemainingEvaluationDaysOperationCompleted, userState);
        }
        
        private void OnGetRemainingEvaluationDaysOperationCompleted(object arg) {
            if ((this.GetRemainingEvaluationDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemainingEvaluationDaysCompleted(this, new GetRemainingEvaluationDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetRegisteredClients", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRegisteredClients(string clientName) {
            object[] results = this.Invoke("GetRegisteredClients", new object[] {
                        clientName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRegisteredClientsAsync(string clientName) {
            this.GetRegisteredClientsAsync(clientName, null);
        }
        
        /// <remarks/>
        public void GetRegisteredClientsAsync(string clientName, object userState) {
            if ((this.GetRegisteredClientsOperationCompleted == null)) {
                this.GetRegisteredClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegisteredClientsOperationCompleted);
            }
            this.InvokeAsync("GetRegisteredClients", new object[] {
                        clientName}, this.GetRegisteredClientsOperationCompleted, userState);
        }
        
        private void OnGetRegisteredClientsOperationCompleted(object arg) {
            if ((this.GetRegisteredClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegisteredClientsCompleted(this, new GetRegisteredClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/RegisterClient", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterClient(string clientName, string clientId, string machineName) {
            this.Invoke("RegisterClient", new object[] {
                        clientName,
                        clientId,
                        machineName});
        }
        
        /// <remarks/>
        public void RegisterClientAsync(string clientName, string clientId, string machineName) {
            this.RegisterClientAsync(clientName, clientId, machineName, null);
        }
        
        /// <remarks/>
        public void RegisterClientAsync(string clientName, string clientId, string machineName, object userState) {
            if ((this.RegisterClientOperationCompleted == null)) {
                this.RegisterClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterClientOperationCompleted);
            }
            this.InvokeAsync("RegisterClient", new object[] {
                        clientName,
                        clientId,
                        machineName}, this.RegisterClientOperationCompleted, userState);
        }
        
        private void OnRegisterClientOperationCompleted(object arg) {
            if ((this.RegisterClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/CheckInClient", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckInClient(string clientName, string clientId) {
            this.Invoke("CheckInClient", new object[] {
                        clientName,
                        clientId});
        }
        
        /// <remarks/>
        public void CheckInClientAsync(string clientName, string clientId) {
            this.CheckInClientAsync(clientName, clientId, null);
        }
        
        /// <remarks/>
        public void CheckInClientAsync(string clientName, string clientId, object userState) {
            if ((this.CheckInClientOperationCompleted == null)) {
                this.CheckInClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInClientOperationCompleted);
            }
            this.InvokeAsync("CheckInClient", new object[] {
                        clientName,
                        clientId}, this.CheckInClientOperationCompleted, userState);
        }
        
        private void OnCheckInClientOperationCompleted(object arg) {
            if ((this.CheckInClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UnregisterClient", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnregisterClient(string clientName, string clientId) {
            this.Invoke("UnregisterClient", new object[] {
                        clientName,
                        clientId});
        }
        
        /// <remarks/>
        public void UnregisterClientAsync(string clientName, string clientId) {
            this.UnregisterClientAsync(clientName, clientId, null);
        }
        
        /// <remarks/>
        public void UnregisterClientAsync(string clientName, string clientId, object userState) {
            if ((this.UnregisterClientOperationCompleted == null)) {
                this.UnregisterClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnregisterClientOperationCompleted);
            }
            this.InvokeAsync("UnregisterClient", new object[] {
                        clientName,
                        clientId}, this.UnregisterClientOperationCompleted, userState);
        }
        
        private void OnUnregisterClientOperationCompleted(object arg) {
            if ((this.UnregisterClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnregisterClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetupAppSchemas", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetupAppSchemas(string[] schemaNames) {
            this.Invoke("SetupAppSchemas", new object[] {
                        schemaNames});
        }
        
        /// <remarks/>
        public void SetupAppSchemasAsync(string[] schemaNames) {
            this.SetupAppSchemasAsync(schemaNames, null);
        }
        
        /// <remarks/>
        public void SetupAppSchemasAsync(string[] schemaNames, object userState) {
            if ((this.SetupAppSchemasOperationCompleted == null)) {
                this.SetupAppSchemasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetupAppSchemasOperationCompleted);
            }
            this.InvokeAsync("SetupAppSchemas", new object[] {
                        schemaNames}, this.SetupAppSchemasOperationCompleted, userState);
        }
        
        private void OnSetupAppSchemasOperationCompleted(object arg) {
            if ((this.SetupAppSchemasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetupAppSchemasCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerLogText", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerLogText() {
            object[] results = this.Invoke("GetServerLogText", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerLogTextAsync() {
            this.GetServerLogTextAsync(null);
        }
        
        /// <remarks/>
        public void GetServerLogTextAsync(object userState) {
            if ((this.GetServerLogTextOperationCompleted == null)) {
                this.GetServerLogTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLogTextOperationCompleted);
            }
            this.InvokeAsync("GetServerLogText", new object[0], this.GetServerLogTextOperationCompleted, userState);
        }
        
        private void OnGetServerLogTextOperationCompleted(object arg) {
            if ((this.GetServerLogTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerLogTextCompleted(this, new GetServerLogTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ClearServerLog", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearServerLog() {
            this.Invoke("ClearServerLog", new object[0]);
        }
        
        /// <remarks/>
        public void ClearServerLogAsync() {
            this.ClearServerLogAsync(null);
        }
        
        /// <remarks/>
        public void ClearServerLogAsync(object userState) {
            if ((this.ClearServerLogOperationCompleted == null)) {
                this.ClearServerLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearServerLogOperationCompleted);
            }
            this.InvokeAsync("ClearServerLog", new object[0], this.ClearServerLogOperationCompleted, userState);
        }
        
        private void OnClearServerLogOperationCompleted(object arg) {
            if ((this.ClearServerLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearServerLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetServerTraceLog", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerTraceLog() {
            object[] results = this.Invoke("GetServerTraceLog", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerTraceLogAsync() {
            this.GetServerTraceLogAsync(null);
        }
        
        /// <remarks/>
        public void GetServerTraceLogAsync(object userState) {
            if ((this.GetServerTraceLogOperationCompleted == null)) {
                this.GetServerTraceLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerTraceLogOperationCompleted);
            }
            this.InvokeAsync("GetServerTraceLog", new object[0], this.GetServerTraceLogOperationCompleted, userState);
        }
        
        private void OnGetServerTraceLogOperationCompleted(object arg) {
            if ((this.GetServerTraceLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerTraceLogCompleted(this, new GetServerTraceLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ClearTraceLog", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearTraceLog() {
            this.Invoke("ClearTraceLog", new object[0]);
        }
        
        /// <remarks/>
        public void ClearTraceLogAsync() {
            this.ClearTraceLogAsync(null);
        }
        
        /// <remarks/>
        public void ClearTraceLogAsync(object userState) {
            if ((this.ClearTraceLogOperationCompleted == null)) {
                this.ClearTraceLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearTraceLogOperationCompleted);
            }
            this.InvokeAsync("ClearTraceLog", new object[0], this.ClearTraceLogOperationCompleted, userState);
        }
        
        private void OnClearTraceLogOperationCompleted(object arg) {
            if ((this.ClearTraceLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearTraceLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerVersionCompletedEventHandler(object sender, GetServerVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsDataSourceValidCompletedEventHandler(object sender, IsDataSourceValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDataSourceValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDataSourceValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void NeedCreateDatabaseCompletedEventHandler(object sender, NeedCreateDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NeedCreateDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NeedCreateDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void NeedCreateTablespaceCompletedEventHandler(object sender, NeedCreateTablespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NeedCreateTablespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NeedCreateTablespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateTablespaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateSchemaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateServerConfigCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAppSchemaListCompletedEventHandler(object sender, GetAppSchemaListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppSchemaListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppSchemaListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAppHomeDirCompletedEventHandler(object sender, GetAppHomeDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppHomeDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppHomeDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerIdCompletedEventHandler(object sender, GetServerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerLicenseMsgCompletedEventHandler(object sender, GetServerLicenseMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerLicenseMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerLicenseMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerLicenseDetailsCompletedEventHandler(object sender, GetServerLicenseDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerLicenseDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerLicenseDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DisableLicenseCompletedEventHandler(object sender, DisableLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetClientLicenseMsgCompletedEventHandler(object sender, GetClientLicenseMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientLicenseMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientLicenseMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetLicenseKeyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsEvaluationLicenseCompletedEventHandler(object sender, IsEvaluationLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsEvaluationLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsEvaluationLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetRemainingEvaluationDaysCompletedEventHandler(object sender, GetRemainingEvaluationDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemainingEvaluationDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemainingEvaluationDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetRegisteredClientsCompletedEventHandler(object sender, GetRegisteredClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegisteredClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegisteredClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RegisterClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckInClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnregisterClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetupAppSchemasCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerLogTextCompletedEventHandler(object sender, GetServerLogTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerLogTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerLogTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ClearServerLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerTraceLogCompletedEventHandler(object sender, GetServerTraceLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerTraceLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerTraceLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ClearTraceLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591