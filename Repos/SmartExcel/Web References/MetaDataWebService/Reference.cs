//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3649
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3649 版自动生成。
// 
#pragma warning disable 1591

namespace SmartExcel.MetaDataWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MetaDataServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class MetaDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSchemaInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchemaModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSchemaModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback FixSchemaModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDataViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetXaclPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTaxonomiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetaDataUpdateLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransformerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValueGeneratorExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateXQueryConditionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidCustomFunctionDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchXmlDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateMethodCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBARoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDBARoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMapModelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSiteMapModelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMapFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSiteMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSideMenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSideMenuFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSideMenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomCommandSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomCommandSetFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomCommandSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMapAccessPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteMapAccessPolicyFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSiteMapAccessPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormTemplatesFileNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportTemplatesFileNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorklowNamesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MetaDataService() {
            this.Url = global::SmartExcel.Properties.Settings.Default.SmartExcel_MetaDataWebService_MetaDataService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSchemaInfosCompletedEventHandler GetSchemaInfosCompleted;
        
        /// <remarks/>
        public event GetMetaDataCompletedEventHandler GetMetaDataCompleted;
        
        /// <remarks/>
        public event GetSchemaModelCompletedEventHandler GetSchemaModelCompleted;
        
        /// <remarks/>
        public event SetMetaDataCompletedEventHandler SetMetaDataCompleted;
        
        /// <remarks/>
        public event SetSchemaModelCompletedEventHandler SetSchemaModelCompleted;
        
        /// <remarks/>
        public event FixSchemaModelCompletedEventHandler FixSchemaModelCompleted;
        
        /// <remarks/>
        public event GetDataViewsCompletedEventHandler GetDataViewsCompleted;
        
        /// <remarks/>
        public event SetDataViewsCompletedEventHandler SetDataViewsCompleted;
        
        /// <remarks/>
        public event SetXaclPolicyCompletedEventHandler SetXaclPolicyCompleted;
        
        /// <remarks/>
        public event SetTaxonomiesCompletedEventHandler SetTaxonomiesCompleted;
        
        /// <remarks/>
        public event SetRulesCompletedEventHandler SetRulesCompleted;
        
        /// <remarks/>
        public event DeleteMetaDataCompletedEventHandler DeleteMetaDataCompleted;
        
        /// <remarks/>
        public event GetMetaDataUpdateLogCompletedEventHandler GetMetaDataUpdateLogCompleted;
        
        /// <remarks/>
        public event GetTransformerIdCompletedEventHandler GetTransformerIdCompleted;
        
        /// <remarks/>
        public event IsValueGeneratorExistCompletedEventHandler IsValueGeneratorExistCompleted;
        
        /// <remarks/>
        public event ValidateXQueryConditionCompletedEventHandler ValidateXQueryConditionCompleted;
        
        /// <remarks/>
        public event IsValidCustomFunctionDefinitionCompletedEventHandler IsValidCustomFunctionDefinitionCompleted;
        
        /// <remarks/>
        public event SearchXmlDataSourceCompletedEventHandler SearchXmlDataSourceCompleted;
        
        /// <remarks/>
        public event ValidateMethodCodeCompletedEventHandler ValidateMethodCodeCompleted;
        
        /// <remarks/>
        public event GetDBARoleCompletedEventHandler GetDBARoleCompleted;
        
        /// <remarks/>
        public event SetDBARoleCompletedEventHandler SetDBARoleCompleted;
        
        /// <remarks/>
        public event LockMetaDataCompletedEventHandler LockMetaDataCompleted;
        
        /// <remarks/>
        public event UnlockMetaDataCompletedEventHandler UnlockMetaDataCompleted;
        
        /// <remarks/>
        public event GetSiteMapModelsCompletedEventHandler GetSiteMapModelsCompleted;
        
        /// <remarks/>
        public event SetSiteMapModelsCompletedEventHandler SetSiteMapModelsCompleted;
        
        /// <remarks/>
        public event GetSiteMapCompletedEventHandler GetSiteMapCompleted;
        
        /// <remarks/>
        public event GetSiteMapFromFileCompletedEventHandler GetSiteMapFromFileCompleted;
        
        /// <remarks/>
        public event SetSiteMapCompletedEventHandler SetSiteMapCompleted;
        
        /// <remarks/>
        public event GetSideMenuCompletedEventHandler GetSideMenuCompleted;
        
        /// <remarks/>
        public event GetSideMenuFromFileCompletedEventHandler GetSideMenuFromFileCompleted;
        
        /// <remarks/>
        public event SetSideMenuCompletedEventHandler SetSideMenuCompleted;
        
        /// <remarks/>
        public event GetCustomCommandSetCompletedEventHandler GetCustomCommandSetCompleted;
        
        /// <remarks/>
        public event GetCustomCommandSetFromFileCompletedEventHandler GetCustomCommandSetFromFileCompleted;
        
        /// <remarks/>
        public event SetCustomCommandSetCompletedEventHandler SetCustomCommandSetCompleted;
        
        /// <remarks/>
        public event GetSiteMapAccessPolicyCompletedEventHandler GetSiteMapAccessPolicyCompleted;
        
        /// <remarks/>
        public event GetSiteMapAccessPolicyFromFileCompletedEventHandler GetSiteMapAccessPolicyFromFileCompleted;
        
        /// <remarks/>
        public event SetSiteMapAccessPolicyCompletedEventHandler SetSiteMapAccessPolicyCompleted;
        
        /// <remarks/>
        public event GetFormTemplatesFileNamesCompletedEventHandler GetFormTemplatesFileNamesCompleted;
        
        /// <remarks/>
        public event GetReportTemplatesFileNamesCompletedEventHandler GetReportTemplatesFileNamesCompleted;
        
        /// <remarks/>
        public event GetWorklowNamesCompletedEventHandler GetWorklowNamesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSchemaInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SchemaInfo[] GetSchemaInfos() {
            object[] results = this.Invoke("GetSchemaInfos", new object[0]);
            return ((SchemaInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaInfosAsync() {
            this.GetSchemaInfosAsync(null);
        }
        
        /// <remarks/>
        public void GetSchemaInfosAsync(object userState) {
            if ((this.GetSchemaInfosOperationCompleted == null)) {
                this.GetSchemaInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaInfosOperationCompleted);
            }
            this.InvokeAsync("GetSchemaInfos", new object[0], this.GetSchemaInfosOperationCompleted, userState);
        }
        
        private void OnGetSchemaInfosOperationCompleted(object arg) {
            if ((this.GetSchemaInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaInfosCompleted(this, new GetSchemaInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetMetaData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMetaData(string connectionStr) {
            object[] results = this.Invoke("GetMetaData", new object[] {
                        connectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMetaDataAsync(string connectionStr) {
            this.GetMetaDataAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetMetaDataAsync(string connectionStr, object userState) {
            if ((this.GetMetaDataOperationCompleted == null)) {
                this.GetMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetaDataOperationCompleted);
            }
            this.InvokeAsync("GetMetaData", new object[] {
                        connectionStr}, this.GetMetaDataOperationCompleted, userState);
        }
        
        private void OnGetMetaDataOperationCompleted(object arg) {
            if ((this.GetMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetaDataCompleted(this, new GetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSchemaModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSchemaModel(string connectionStr) {
            object[] results = this.Invoke("GetSchemaModel", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchemaModelAsync(string connectionStr) {
            this.GetSchemaModelAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetSchemaModelAsync(string connectionStr, object userState) {
            if ((this.GetSchemaModelOperationCompleted == null)) {
                this.GetSchemaModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchemaModelOperationCompleted);
            }
            this.InvokeAsync("GetSchemaModel", new object[] {
                        connectionStr}, this.GetSchemaModelOperationCompleted, userState);
        }
        
        private void OnGetSchemaModelOperationCompleted(object arg) {
            if ((this.GetSchemaModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchemaModelCompleted(this, new GetSchemaModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetMetaData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetMetaData(string connectionStr, string[] xmlStrings) {
            object[] results = this.Invoke("SetMetaData", new object[] {
                        connectionStr,
                        xmlStrings});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetMetaDataAsync(string connectionStr, string[] xmlStrings) {
            this.SetMetaDataAsync(connectionStr, xmlStrings, null);
        }
        
        /// <remarks/>
        public void SetMetaDataAsync(string connectionStr, string[] xmlStrings, object userState) {
            if ((this.SetMetaDataOperationCompleted == null)) {
                this.SetMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMetaDataOperationCompleted);
            }
            this.InvokeAsync("SetMetaData", new object[] {
                        connectionStr,
                        xmlStrings}, this.SetMetaDataOperationCompleted, userState);
        }
        
        private void OnSetMetaDataOperationCompleted(object arg) {
            if ((this.SetMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMetaDataCompleted(this, new SetMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetSchemaModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetSchemaModel(string connectionStr, string xmlSchema) {
            object[] results = this.Invoke("SetSchemaModel", new object[] {
                        connectionStr,
                        xmlSchema});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetSchemaModelAsync(string connectionStr, string xmlSchema) {
            this.SetSchemaModelAsync(connectionStr, xmlSchema, null);
        }
        
        /// <remarks/>
        public void SetSchemaModelAsync(string connectionStr, string xmlSchema, object userState) {
            if ((this.SetSchemaModelOperationCompleted == null)) {
                this.SetSchemaModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSchemaModelOperationCompleted);
            }
            this.InvokeAsync("SetSchemaModel", new object[] {
                        connectionStr,
                        xmlSchema}, this.SetSchemaModelOperationCompleted, userState);
        }
        
        private void OnSetSchemaModelOperationCompleted(object arg) {
            if ((this.SetSchemaModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSchemaModelCompleted(this, new SetSchemaModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/FixSchemaModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FixSchemaModel(string connectionStr) {
            this.Invoke("FixSchemaModel", new object[] {
                        connectionStr});
        }
        
        /// <remarks/>
        public void FixSchemaModelAsync(string connectionStr) {
            this.FixSchemaModelAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void FixSchemaModelAsync(string connectionStr, object userState) {
            if ((this.FixSchemaModelOperationCompleted == null)) {
                this.FixSchemaModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFixSchemaModelOperationCompleted);
            }
            this.InvokeAsync("FixSchemaModel", new object[] {
                        connectionStr}, this.FixSchemaModelOperationCompleted, userState);
        }
        
        private void OnFixSchemaModelOperationCompleted(object arg) {
            if ((this.FixSchemaModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FixSchemaModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDataViews", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataViews(string connectionStr) {
            object[] results = this.Invoke("GetDataViews", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataViewsAsync(string connectionStr) {
            this.GetDataViewsAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetDataViewsAsync(string connectionStr, object userState) {
            if ((this.GetDataViewsOperationCompleted == null)) {
                this.GetDataViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataViewsOperationCompleted);
            }
            this.InvokeAsync("GetDataViews", new object[] {
                        connectionStr}, this.GetDataViewsOperationCompleted, userState);
        }
        
        private void OnGetDataViewsOperationCompleted(object arg) {
            if ((this.GetDataViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataViewsCompleted(this, new GetDataViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetDataViews", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetDataViews(string connectionStr, string xmlString) {
            object[] results = this.Invoke("SetDataViews", new object[] {
                        connectionStr,
                        xmlString});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetDataViewsAsync(string connectionStr, string xmlString) {
            this.SetDataViewsAsync(connectionStr, xmlString, null);
        }
        
        /// <remarks/>
        public void SetDataViewsAsync(string connectionStr, string xmlString, object userState) {
            if ((this.SetDataViewsOperationCompleted == null)) {
                this.SetDataViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDataViewsOperationCompleted);
            }
            this.InvokeAsync("SetDataViews", new object[] {
                        connectionStr,
                        xmlString}, this.SetDataViewsOperationCompleted, userState);
        }
        
        private void OnSetDataViewsOperationCompleted(object arg) {
            if ((this.SetDataViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDataViewsCompleted(this, new SetDataViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetXaclPolicy", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetXaclPolicy(string connectionStr, string xmlString) {
            object[] results = this.Invoke("SetXaclPolicy", new object[] {
                        connectionStr,
                        xmlString});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetXaclPolicyAsync(string connectionStr, string xmlString) {
            this.SetXaclPolicyAsync(connectionStr, xmlString, null);
        }
        
        /// <remarks/>
        public void SetXaclPolicyAsync(string connectionStr, string xmlString, object userState) {
            if ((this.SetXaclPolicyOperationCompleted == null)) {
                this.SetXaclPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetXaclPolicyOperationCompleted);
            }
            this.InvokeAsync("SetXaclPolicy", new object[] {
                        connectionStr,
                        xmlString}, this.SetXaclPolicyOperationCompleted, userState);
        }
        
        private void OnSetXaclPolicyOperationCompleted(object arg) {
            if ((this.SetXaclPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetXaclPolicyCompleted(this, new SetXaclPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetTaxonomies", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetTaxonomies(string connectionStr, string xmlString) {
            object[] results = this.Invoke("SetTaxonomies", new object[] {
                        connectionStr,
                        xmlString});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetTaxonomiesAsync(string connectionStr, string xmlString) {
            this.SetTaxonomiesAsync(connectionStr, xmlString, null);
        }
        
        /// <remarks/>
        public void SetTaxonomiesAsync(string connectionStr, string xmlString, object userState) {
            if ((this.SetTaxonomiesOperationCompleted == null)) {
                this.SetTaxonomiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTaxonomiesOperationCompleted);
            }
            this.InvokeAsync("SetTaxonomies", new object[] {
                        connectionStr,
                        xmlString}, this.SetTaxonomiesOperationCompleted, userState);
        }
        
        private void OnSetTaxonomiesOperationCompleted(object arg) {
            if ((this.SetTaxonomiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTaxonomiesCompleted(this, new SetTaxonomiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetRules", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SetRules(string connectionStr, string xmlString) {
            object[] results = this.Invoke("SetRules", new object[] {
                        connectionStr,
                        xmlString});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SetRulesAsync(string connectionStr, string xmlString) {
            this.SetRulesAsync(connectionStr, xmlString, null);
        }
        
        /// <remarks/>
        public void SetRulesAsync(string connectionStr, string xmlString, object userState) {
            if ((this.SetRulesOperationCompleted == null)) {
                this.SetRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRulesOperationCompleted);
            }
            this.InvokeAsync("SetRules", new object[] {
                        connectionStr,
                        xmlString}, this.SetRulesOperationCompleted, userState);
        }
        
        private void OnSetRulesOperationCompleted(object arg) {
            if ((this.SetRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRulesCompleted(this, new SetRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteMetaData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMetaData(string connectionStr) {
            this.Invoke("DeleteMetaData", new object[] {
                        connectionStr});
        }
        
        /// <remarks/>
        public void DeleteMetaDataAsync(string connectionStr) {
            this.DeleteMetaDataAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void DeleteMetaDataAsync(string connectionStr, object userState) {
            if ((this.DeleteMetaDataOperationCompleted == null)) {
                this.DeleteMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMetaDataOperationCompleted);
            }
            this.InvokeAsync("DeleteMetaData", new object[] {
                        connectionStr}, this.DeleteMetaDataOperationCompleted, userState);
        }
        
        private void OnDeleteMetaDataOperationCompleted(object arg) {
            if ((this.DeleteMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMetaDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetMetaDataUpdateLog", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMetaDataUpdateLog(string connectionStr) {
            object[] results = this.Invoke("GetMetaDataUpdateLog", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMetaDataUpdateLogAsync(string connectionStr) {
            this.GetMetaDataUpdateLogAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetMetaDataUpdateLogAsync(string connectionStr, object userState) {
            if ((this.GetMetaDataUpdateLogOperationCompleted == null)) {
                this.GetMetaDataUpdateLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetaDataUpdateLogOperationCompleted);
            }
            this.InvokeAsync("GetMetaDataUpdateLog", new object[] {
                        connectionStr}, this.GetMetaDataUpdateLogOperationCompleted, userState);
        }
        
        private void OnGetMetaDataUpdateLogOperationCompleted(object arg) {
            if ((this.GetMetaDataUpdateLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetaDataUpdateLogCompleted(this, new GetMetaDataUpdateLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetTransformerId", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransformerId(string connectionStr) {
            object[] results = this.Invoke("GetTransformerId", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransformerIdAsync(string connectionStr) {
            this.GetTransformerIdAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetTransformerIdAsync(string connectionStr, object userState) {
            if ((this.GetTransformerIdOperationCompleted == null)) {
                this.GetTransformerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransformerIdOperationCompleted);
            }
            this.InvokeAsync("GetTransformerId", new object[] {
                        connectionStr}, this.GetTransformerIdOperationCompleted, userState);
        }
        
        private void OnGetTransformerIdOperationCompleted(object arg) {
            if ((this.GetTransformerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransformerIdCompleted(this, new GetTransformerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsValueGeneratorExist", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValueGeneratorExist(string valueGeneratorDef) {
            object[] results = this.Invoke("IsValueGeneratorExist", new object[] {
                        valueGeneratorDef});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValueGeneratorExistAsync(string valueGeneratorDef) {
            this.IsValueGeneratorExistAsync(valueGeneratorDef, null);
        }
        
        /// <remarks/>
        public void IsValueGeneratorExistAsync(string valueGeneratorDef, object userState) {
            if ((this.IsValueGeneratorExistOperationCompleted == null)) {
                this.IsValueGeneratorExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValueGeneratorExistOperationCompleted);
            }
            this.InvokeAsync("IsValueGeneratorExist", new object[] {
                        valueGeneratorDef}, this.IsValueGeneratorExistOperationCompleted, userState);
        }
        
        private void OnIsValueGeneratorExistOperationCompleted(object arg) {
            if ((this.IsValueGeneratorExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValueGeneratorExistCompleted(this, new IsValueGeneratorExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ValidateXQueryCondition", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateXQueryCondition(string connectionStr, string className, string condition) {
            object[] results = this.Invoke("ValidateXQueryCondition", new object[] {
                        connectionStr,
                        className,
                        condition});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateXQueryConditionAsync(string connectionStr, string className, string condition) {
            this.ValidateXQueryConditionAsync(connectionStr, className, condition, null);
        }
        
        /// <remarks/>
        public void ValidateXQueryConditionAsync(string connectionStr, string className, string condition, object userState) {
            if ((this.ValidateXQueryConditionOperationCompleted == null)) {
                this.ValidateXQueryConditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateXQueryConditionOperationCompleted);
            }
            this.InvokeAsync("ValidateXQueryCondition", new object[] {
                        connectionStr,
                        className,
                        condition}, this.ValidateXQueryConditionOperationCompleted, userState);
        }
        
        private void OnValidateXQueryConditionOperationCompleted(object arg) {
            if ((this.ValidateXQueryConditionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateXQueryConditionCompleted(this, new ValidateXQueryConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsValidCustomFunctionDefinition", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidCustomFunctionDefinition(string connectionStr, string functionDefinition) {
            object[] results = this.Invoke("IsValidCustomFunctionDefinition", new object[] {
                        connectionStr,
                        functionDefinition});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidCustomFunctionDefinitionAsync(string connectionStr, string functionDefinition) {
            this.IsValidCustomFunctionDefinitionAsync(connectionStr, functionDefinition, null);
        }
        
        /// <remarks/>
        public void IsValidCustomFunctionDefinitionAsync(string connectionStr, string functionDefinition, object userState) {
            if ((this.IsValidCustomFunctionDefinitionOperationCompleted == null)) {
                this.IsValidCustomFunctionDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidCustomFunctionDefinitionOperationCompleted);
            }
            this.InvokeAsync("IsValidCustomFunctionDefinition", new object[] {
                        connectionStr,
                        functionDefinition}, this.IsValidCustomFunctionDefinitionOperationCompleted, userState);
        }
        
        private void OnIsValidCustomFunctionDefinitionOperationCompleted(object arg) {
            if ((this.IsValidCustomFunctionDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidCustomFunctionDefinitionCompleted(this, new IsValidCustomFunctionDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SearchXmlDataSource", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SearchXmlDataSource(string xquery) {
            object[] results = this.Invoke("SearchXmlDataSource", new object[] {
                        xquery});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SearchXmlDataSourceAsync(string xquery) {
            this.SearchXmlDataSourceAsync(xquery, null);
        }
        
        /// <remarks/>
        public void SearchXmlDataSourceAsync(string xquery, object userState) {
            if ((this.SearchXmlDataSourceOperationCompleted == null)) {
                this.SearchXmlDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchXmlDataSourceOperationCompleted);
            }
            this.InvokeAsync("SearchXmlDataSource", new object[] {
                        xquery}, this.SearchXmlDataSourceOperationCompleted, userState);
        }
        
        private void OnSearchXmlDataSourceOperationCompleted(object arg) {
            if ((this.SearchXmlDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchXmlDataSourceCompleted(this, new SearchXmlDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ValidateMethodCode", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateMethodCode(string connectionStr, string code, string schemaId, string instanceClassName) {
            object[] results = this.Invoke("ValidateMethodCode", new object[] {
                        connectionStr,
                        code,
                        schemaId,
                        instanceClassName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateMethodCodeAsync(string connectionStr, string code, string schemaId, string instanceClassName) {
            this.ValidateMethodCodeAsync(connectionStr, code, schemaId, instanceClassName, null);
        }
        
        /// <remarks/>
        public void ValidateMethodCodeAsync(string connectionStr, string code, string schemaId, string instanceClassName, object userState) {
            if ((this.ValidateMethodCodeOperationCompleted == null)) {
                this.ValidateMethodCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateMethodCodeOperationCompleted);
            }
            this.InvokeAsync("ValidateMethodCode", new object[] {
                        connectionStr,
                        code,
                        schemaId,
                        instanceClassName}, this.ValidateMethodCodeOperationCompleted, userState);
        }
        
        private void OnValidateMethodCodeOperationCompleted(object arg) {
            if ((this.ValidateMethodCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateMethodCodeCompleted(this, new ValidateMethodCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDBARole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDBARole(string connectionStr) {
            object[] results = this.Invoke("GetDBARole", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBARoleAsync(string connectionStr) {
            this.GetDBARoleAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetDBARoleAsync(string connectionStr, object userState) {
            if ((this.GetDBARoleOperationCompleted == null)) {
                this.GetDBARoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBARoleOperationCompleted);
            }
            this.InvokeAsync("GetDBARole", new object[] {
                        connectionStr}, this.GetDBARoleOperationCompleted, userState);
        }
        
        private void OnGetDBARoleOperationCompleted(object arg) {
            if ((this.GetDBARoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBARoleCompleted(this, new GetDBARoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetDBARole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDBARole(string connectionStr, string role) {
            this.Invoke("SetDBARole", new object[] {
                        connectionStr,
                        role});
        }
        
        /// <remarks/>
        public void SetDBARoleAsync(string connectionStr, string role) {
            this.SetDBARoleAsync(connectionStr, role, null);
        }
        
        /// <remarks/>
        public void SetDBARoleAsync(string connectionStr, string role, object userState) {
            if ((this.SetDBARoleOperationCompleted == null)) {
                this.SetDBARoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDBARoleOperationCompleted);
            }
            this.InvokeAsync("SetDBARole", new object[] {
                        connectionStr,
                        role}, this.SetDBARoleOperationCompleted, userState);
        }
        
        private void OnSetDBARoleOperationCompleted(object arg) {
            if ((this.SetDBARoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDBARoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/LockMetaData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LockMetaData(string connectionStr) {
            this.Invoke("LockMetaData", new object[] {
                        connectionStr});
        }
        
        /// <remarks/>
        public void LockMetaDataAsync(string connectionStr) {
            this.LockMetaDataAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void LockMetaDataAsync(string connectionStr, object userState) {
            if ((this.LockMetaDataOperationCompleted == null)) {
                this.LockMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockMetaDataOperationCompleted);
            }
            this.InvokeAsync("LockMetaData", new object[] {
                        connectionStr}, this.LockMetaDataOperationCompleted, userState);
        }
        
        private void OnLockMetaDataOperationCompleted(object arg) {
            if ((this.LockMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockMetaDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UnlockMetaData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockMetaData(string connectionStr, bool forceUnlock) {
            this.Invoke("UnlockMetaData", new object[] {
                        connectionStr,
                        forceUnlock});
        }
        
        /// <remarks/>
        public void UnlockMetaDataAsync(string connectionStr, bool forceUnlock) {
            this.UnlockMetaDataAsync(connectionStr, forceUnlock, null);
        }
        
        /// <remarks/>
        public void UnlockMetaDataAsync(string connectionStr, bool forceUnlock, object userState) {
            if ((this.UnlockMetaDataOperationCompleted == null)) {
                this.UnlockMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockMetaDataOperationCompleted);
            }
            this.InvokeAsync("UnlockMetaData", new object[] {
                        connectionStr,
                        forceUnlock}, this.UnlockMetaDataOperationCompleted, userState);
        }
        
        private void OnUnlockMetaDataOperationCompleted(object arg) {
            if ((this.UnlockMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockMetaDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSiteMapModels", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapModels() {
            object[] results = this.Invoke("GetSiteMapModels", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMapModelsAsync() {
            this.GetSiteMapModelsAsync(null);
        }
        
        /// <remarks/>
        public void GetSiteMapModelsAsync(object userState) {
            if ((this.GetSiteMapModelsOperationCompleted == null)) {
                this.GetSiteMapModelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMapModelsOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapModels", new object[0], this.GetSiteMapModelsOperationCompleted, userState);
        }
        
        private void OnGetSiteMapModelsOperationCompleted(object arg) {
            if ((this.GetSiteMapModelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMapModelsCompleted(this, new GetSiteMapModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetSiteMapModels", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSiteMapModels(string xmlString) {
            this.Invoke("SetSiteMapModels", new object[] {
                        xmlString});
        }
        
        /// <remarks/>
        public void SetSiteMapModelsAsync(string xmlString) {
            this.SetSiteMapModelsAsync(xmlString, null);
        }
        
        /// <remarks/>
        public void SetSiteMapModelsAsync(string xmlString, object userState) {
            if ((this.SetSiteMapModelsOperationCompleted == null)) {
                this.SetSiteMapModelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSiteMapModelsOperationCompleted);
            }
            this.InvokeAsync("SetSiteMapModels", new object[] {
                        xmlString}, this.SetSiteMapModelsOperationCompleted, userState);
        }
        
        private void OnSetSiteMapModelsOperationCompleted(object arg) {
            if ((this.SetSiteMapModelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSiteMapModelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSiteMap", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMap(string modelName) {
            object[] results = this.Invoke("GetSiteMap", new object[] {
                        modelName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMapAsync(string modelName) {
            this.GetSiteMapAsync(modelName, null);
        }
        
        /// <remarks/>
        public void GetSiteMapAsync(string modelName, object userState) {
            if ((this.GetSiteMapOperationCompleted == null)) {
                this.GetSiteMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMapOperationCompleted);
            }
            this.InvokeAsync("GetSiteMap", new object[] {
                        modelName}, this.GetSiteMapOperationCompleted, userState);
        }
        
        private void OnGetSiteMapOperationCompleted(object arg) {
            if ((this.GetSiteMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMapCompleted(this, new GetSiteMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSiteMapFromFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapFromFile(string fileName) {
            object[] results = this.Invoke("GetSiteMapFromFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMapFromFileAsync(string fileName) {
            this.GetSiteMapFromFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetSiteMapFromFileAsync(string fileName, object userState) {
            if ((this.GetSiteMapFromFileOperationCompleted == null)) {
                this.GetSiteMapFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMapFromFileOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapFromFile", new object[] {
                        fileName}, this.GetSiteMapFromFileOperationCompleted, userState);
        }
        
        private void OnGetSiteMapFromFileOperationCompleted(object arg) {
            if ((this.GetSiteMapFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMapFromFileCompleted(this, new GetSiteMapFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetSiteMap", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSiteMap(string modelName, string xmlString) {
            this.Invoke("SetSiteMap", new object[] {
                        modelName,
                        xmlString});
        }
        
        /// <remarks/>
        public void SetSiteMapAsync(string modelName, string xmlString) {
            this.SetSiteMapAsync(modelName, xmlString, null);
        }
        
        /// <remarks/>
        public void SetSiteMapAsync(string modelName, string xmlString, object userState) {
            if ((this.SetSiteMapOperationCompleted == null)) {
                this.SetSiteMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSiteMapOperationCompleted);
            }
            this.InvokeAsync("SetSiteMap", new object[] {
                        modelName,
                        xmlString}, this.SetSiteMapOperationCompleted, userState);
        }
        
        private void OnSetSiteMapOperationCompleted(object arg) {
            if ((this.SetSiteMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSiteMapCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSideMenu", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSideMenu(string modelName) {
            object[] results = this.Invoke("GetSideMenu", new object[] {
                        modelName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSideMenuAsync(string modelName) {
            this.GetSideMenuAsync(modelName, null);
        }
        
        /// <remarks/>
        public void GetSideMenuAsync(string modelName, object userState) {
            if ((this.GetSideMenuOperationCompleted == null)) {
                this.GetSideMenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSideMenuOperationCompleted);
            }
            this.InvokeAsync("GetSideMenu", new object[] {
                        modelName}, this.GetSideMenuOperationCompleted, userState);
        }
        
        private void OnGetSideMenuOperationCompleted(object arg) {
            if ((this.GetSideMenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSideMenuCompleted(this, new GetSideMenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSideMenuFromFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSideMenuFromFile(string fileName) {
            object[] results = this.Invoke("GetSideMenuFromFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSideMenuFromFileAsync(string fileName) {
            this.GetSideMenuFromFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetSideMenuFromFileAsync(string fileName, object userState) {
            if ((this.GetSideMenuFromFileOperationCompleted == null)) {
                this.GetSideMenuFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSideMenuFromFileOperationCompleted);
            }
            this.InvokeAsync("GetSideMenuFromFile", new object[] {
                        fileName}, this.GetSideMenuFromFileOperationCompleted, userState);
        }
        
        private void OnGetSideMenuFromFileOperationCompleted(object arg) {
            if ((this.GetSideMenuFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSideMenuFromFileCompleted(this, new GetSideMenuFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetSideMenu", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSideMenu(string modelName, string xmlString) {
            this.Invoke("SetSideMenu", new object[] {
                        modelName,
                        xmlString});
        }
        
        /// <remarks/>
        public void SetSideMenuAsync(string modelName, string xmlString) {
            this.SetSideMenuAsync(modelName, xmlString, null);
        }
        
        /// <remarks/>
        public void SetSideMenuAsync(string modelName, string xmlString, object userState) {
            if ((this.SetSideMenuOperationCompleted == null)) {
                this.SetSideMenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSideMenuOperationCompleted);
            }
            this.InvokeAsync("SetSideMenu", new object[] {
                        modelName,
                        xmlString}, this.SetSideMenuOperationCompleted, userState);
        }
        
        private void OnSetSideMenuOperationCompleted(object arg) {
            if ((this.SetSideMenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSideMenuCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetCustomCommandSet", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomCommandSet(string modelName) {
            object[] results = this.Invoke("GetCustomCommandSet", new object[] {
                        modelName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomCommandSetAsync(string modelName) {
            this.GetCustomCommandSetAsync(modelName, null);
        }
        
        /// <remarks/>
        public void GetCustomCommandSetAsync(string modelName, object userState) {
            if ((this.GetCustomCommandSetOperationCompleted == null)) {
                this.GetCustomCommandSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomCommandSetOperationCompleted);
            }
            this.InvokeAsync("GetCustomCommandSet", new object[] {
                        modelName}, this.GetCustomCommandSetOperationCompleted, userState);
        }
        
        private void OnGetCustomCommandSetOperationCompleted(object arg) {
            if ((this.GetCustomCommandSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomCommandSetCompleted(this, new GetCustomCommandSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetCustomCommandSetFromFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomCommandSetFromFile(string fileName) {
            object[] results = this.Invoke("GetCustomCommandSetFromFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomCommandSetFromFileAsync(string fileName) {
            this.GetCustomCommandSetFromFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetCustomCommandSetFromFileAsync(string fileName, object userState) {
            if ((this.GetCustomCommandSetFromFileOperationCompleted == null)) {
                this.GetCustomCommandSetFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomCommandSetFromFileOperationCompleted);
            }
            this.InvokeAsync("GetCustomCommandSetFromFile", new object[] {
                        fileName}, this.GetCustomCommandSetFromFileOperationCompleted, userState);
        }
        
        private void OnGetCustomCommandSetFromFileOperationCompleted(object arg) {
            if ((this.GetCustomCommandSetFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomCommandSetFromFileCompleted(this, new GetCustomCommandSetFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetCustomCommandSet", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCustomCommandSet(string modelName, string xmlString) {
            this.Invoke("SetCustomCommandSet", new object[] {
                        modelName,
                        xmlString});
        }
        
        /// <remarks/>
        public void SetCustomCommandSetAsync(string modelName, string xmlString) {
            this.SetCustomCommandSetAsync(modelName, xmlString, null);
        }
        
        /// <remarks/>
        public void SetCustomCommandSetAsync(string modelName, string xmlString, object userState) {
            if ((this.SetCustomCommandSetOperationCompleted == null)) {
                this.SetCustomCommandSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomCommandSetOperationCompleted);
            }
            this.InvokeAsync("SetCustomCommandSet", new object[] {
                        modelName,
                        xmlString}, this.SetCustomCommandSetOperationCompleted, userState);
        }
        
        private void OnSetCustomCommandSetOperationCompleted(object arg) {
            if ((this.SetCustomCommandSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomCommandSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSiteMapAccessPolicy", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapAccessPolicy(string modelName) {
            object[] results = this.Invoke("GetSiteMapAccessPolicy", new object[] {
                        modelName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMapAccessPolicyAsync(string modelName) {
            this.GetSiteMapAccessPolicyAsync(modelName, null);
        }
        
        /// <remarks/>
        public void GetSiteMapAccessPolicyAsync(string modelName, object userState) {
            if ((this.GetSiteMapAccessPolicyOperationCompleted == null)) {
                this.GetSiteMapAccessPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMapAccessPolicyOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapAccessPolicy", new object[] {
                        modelName}, this.GetSiteMapAccessPolicyOperationCompleted, userState);
        }
        
        private void OnGetSiteMapAccessPolicyOperationCompleted(object arg) {
            if ((this.GetSiteMapAccessPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMapAccessPolicyCompleted(this, new GetSiteMapAccessPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetSiteMapAccessPolicyFromFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteMapAccessPolicyFromFile(string fileName) {
            object[] results = this.Invoke("GetSiteMapAccessPolicyFromFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteMapAccessPolicyFromFileAsync(string fileName) {
            this.GetSiteMapAccessPolicyFromFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void GetSiteMapAccessPolicyFromFileAsync(string fileName, object userState) {
            if ((this.GetSiteMapAccessPolicyFromFileOperationCompleted == null)) {
                this.GetSiteMapAccessPolicyFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteMapAccessPolicyFromFileOperationCompleted);
            }
            this.InvokeAsync("GetSiteMapAccessPolicyFromFile", new object[] {
                        fileName}, this.GetSiteMapAccessPolicyFromFileOperationCompleted, userState);
        }
        
        private void OnGetSiteMapAccessPolicyFromFileOperationCompleted(object arg) {
            if ((this.GetSiteMapAccessPolicyFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteMapAccessPolicyFromFileCompleted(this, new GetSiteMapAccessPolicyFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetSiteMapAccessPolicy", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSiteMapAccessPolicy(string modelName, string xmlString) {
            this.Invoke("SetSiteMapAccessPolicy", new object[] {
                        modelName,
                        xmlString});
        }
        
        /// <remarks/>
        public void SetSiteMapAccessPolicyAsync(string modelName, string xmlString) {
            this.SetSiteMapAccessPolicyAsync(modelName, xmlString, null);
        }
        
        /// <remarks/>
        public void SetSiteMapAccessPolicyAsync(string modelName, string xmlString, object userState) {
            if ((this.SetSiteMapAccessPolicyOperationCompleted == null)) {
                this.SetSiteMapAccessPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSiteMapAccessPolicyOperationCompleted);
            }
            this.InvokeAsync("SetSiteMapAccessPolicy", new object[] {
                        modelName,
                        xmlString}, this.SetSiteMapAccessPolicyOperationCompleted, userState);
        }
        
        private void OnSetSiteMapAccessPolicyOperationCompleted(object arg) {
            if ((this.SetSiteMapAccessPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSiteMapAccessPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetFormTemplatesFileNames", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFormTemplatesFileNames(string schemaId, string className) {
            object[] results = this.Invoke("GetFormTemplatesFileNames", new object[] {
                        schemaId,
                        className});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFormTemplatesFileNamesAsync(string schemaId, string className) {
            this.GetFormTemplatesFileNamesAsync(schemaId, className, null);
        }
        
        /// <remarks/>
        public void GetFormTemplatesFileNamesAsync(string schemaId, string className, object userState) {
            if ((this.GetFormTemplatesFileNamesOperationCompleted == null)) {
                this.GetFormTemplatesFileNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormTemplatesFileNamesOperationCompleted);
            }
            this.InvokeAsync("GetFormTemplatesFileNames", new object[] {
                        schemaId,
                        className}, this.GetFormTemplatesFileNamesOperationCompleted, userState);
        }
        
        private void OnGetFormTemplatesFileNamesOperationCompleted(object arg) {
            if ((this.GetFormTemplatesFileNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormTemplatesFileNamesCompleted(this, new GetFormTemplatesFileNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetReportTemplatesFileNames", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetReportTemplatesFileNames(string schemaId, string className) {
            object[] results = this.Invoke("GetReportTemplatesFileNames", new object[] {
                        schemaId,
                        className});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportTemplatesFileNamesAsync(string schemaId, string className) {
            this.GetReportTemplatesFileNamesAsync(schemaId, className, null);
        }
        
        /// <remarks/>
        public void GetReportTemplatesFileNamesAsync(string schemaId, string className, object userState) {
            if ((this.GetReportTemplatesFileNamesOperationCompleted == null)) {
                this.GetReportTemplatesFileNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportTemplatesFileNamesOperationCompleted);
            }
            this.InvokeAsync("GetReportTemplatesFileNames", new object[] {
                        schemaId,
                        className}, this.GetReportTemplatesFileNamesOperationCompleted, userState);
        }
        
        private void OnGetReportTemplatesFileNamesOperationCompleted(object arg) {
            if ((this.GetReportTemplatesFileNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportTemplatesFileNamesCompleted(this, new GetReportTemplatesFileNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetWorklowNames", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetWorklowNames(string projectName, string projectVersion, string schemaId, string className) {
            object[] results = this.Invoke("GetWorklowNames", new object[] {
                        projectName,
                        projectVersion,
                        schemaId,
                        className});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorklowNamesAsync(string projectName, string projectVersion, string schemaId, string className) {
            this.GetWorklowNamesAsync(projectName, projectVersion, schemaId, className, null);
        }
        
        /// <remarks/>
        public void GetWorklowNamesAsync(string projectName, string projectVersion, string schemaId, string className, object userState) {
            if ((this.GetWorklowNamesOperationCompleted == null)) {
                this.GetWorklowNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorklowNamesOperationCompleted);
            }
            this.InvokeAsync("GetWorklowNames", new object[] {
                        projectName,
                        projectVersion,
                        schemaId,
                        className}, this.GetWorklowNamesOperationCompleted, userState);
        }
        
        private void OnGetWorklowNamesOperationCompleted(object arg) {
            if ((this.GetWorklowNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorklowNamesCompleted(this, new GetWorklowNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3654")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.newtera.com/webservices/")]
    public partial class SchemaInfo {
        
        private string idField;
        
        private string nameField;
        
        private string versionField;
        
        private System.DateTime modifiedTimeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedTime {
            get {
                return this.modifiedTimeField;
            }
            set {
                this.modifiedTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSchemaInfosCompletedEventHandler(object sender, GetSchemaInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SchemaInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchemaInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetMetaDataCompletedEventHandler(object sender, GetMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSchemaModelCompletedEventHandler(object sender, GetSchemaModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchemaModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchemaModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetMetaDataCompletedEventHandler(object sender, SetMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetSchemaModelCompletedEventHandler(object sender, SetSchemaModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSchemaModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSchemaModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FixSchemaModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDataViewsCompletedEventHandler(object sender, GetDataViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetDataViewsCompletedEventHandler(object sender, SetDataViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDataViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDataViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetXaclPolicyCompletedEventHandler(object sender, SetXaclPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetXaclPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetXaclPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetTaxonomiesCompletedEventHandler(object sender, SetTaxonomiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTaxonomiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTaxonomiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetRulesCompletedEventHandler(object sender, SetRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteMetaDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetMetaDataUpdateLogCompletedEventHandler(object sender, GetMetaDataUpdateLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetaDataUpdateLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetaDataUpdateLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTransformerIdCompletedEventHandler(object sender, GetTransformerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransformerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransformerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsValueGeneratorExistCompletedEventHandler(object sender, IsValueGeneratorExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValueGeneratorExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValueGeneratorExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ValidateXQueryConditionCompletedEventHandler(object sender, ValidateXQueryConditionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateXQueryConditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateXQueryConditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsValidCustomFunctionDefinitionCompletedEventHandler(object sender, IsValidCustomFunctionDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidCustomFunctionDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidCustomFunctionDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SearchXmlDataSourceCompletedEventHandler(object sender, SearchXmlDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchXmlDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchXmlDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ValidateMethodCodeCompletedEventHandler(object sender, ValidateMethodCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateMethodCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateMethodCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDBARoleCompletedEventHandler(object sender, GetDBARoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBARoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBARoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetDBARoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void LockMetaDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnlockMetaDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSiteMapModelsCompletedEventHandler(object sender, GetSiteMapModelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMapModelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMapModelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetSiteMapModelsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSiteMapCompletedEventHandler(object sender, GetSiteMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSiteMapFromFileCompletedEventHandler(object sender, GetSiteMapFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMapFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMapFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetSiteMapCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSideMenuCompletedEventHandler(object sender, GetSideMenuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSideMenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSideMenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSideMenuFromFileCompletedEventHandler(object sender, GetSideMenuFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSideMenuFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSideMenuFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetSideMenuCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetCustomCommandSetCompletedEventHandler(object sender, GetCustomCommandSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomCommandSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomCommandSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetCustomCommandSetFromFileCompletedEventHandler(object sender, GetCustomCommandSetFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomCommandSetFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomCommandSetFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetCustomCommandSetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSiteMapAccessPolicyCompletedEventHandler(object sender, GetSiteMapAccessPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMapAccessPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMapAccessPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSiteMapAccessPolicyFromFileCompletedEventHandler(object sender, GetSiteMapAccessPolicyFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteMapAccessPolicyFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteMapAccessPolicyFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetSiteMapAccessPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetFormTemplatesFileNamesCompletedEventHandler(object sender, GetFormTemplatesFileNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormTemplatesFileNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormTemplatesFileNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetReportTemplatesFileNamesCompletedEventHandler(object sender, GetReportTemplatesFileNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportTemplatesFileNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportTemplatesFileNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetWorklowNamesCompletedEventHandler(object sender, GetWorklowNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorklowNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorklowNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591