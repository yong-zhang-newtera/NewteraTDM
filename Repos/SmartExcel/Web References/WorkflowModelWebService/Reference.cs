//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3649
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3649 版自动生成。
// 
#pragma warning disable 1591

namespace SmartExcel.WorkflowModelWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkflowModelServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class WorkflowModelService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetExistingProjectInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWorkflowDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartWorkflowOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedSchemaInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBARoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDBARoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasRunningInstancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkflowModelIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsLatestVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsQueryValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidCustomFunctionDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateActionCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskSubstituteModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskSubstituteModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockTaskSubstituteModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockTaskSubstituteModelOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WorkflowModelService() {
            this.Url = global::SmartExcel.Properties.Settings.Default.SmartExcel_WorkflowModelWebService_WorkflowModelService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetExistingProjectInfosCompletedEventHandler GetExistingProjectInfosCompleted;
        
        /// <remarks/>
        public event GetProjectCompletedEventHandler GetProjectCompleted;
        
        /// <remarks/>
        public event GetProjectPolicyCompletedEventHandler GetProjectPolicyCompleted;
        
        /// <remarks/>
        public event SaveProjectCompletedEventHandler SaveProjectCompleted;
        
        /// <remarks/>
        public event DeleteProjectCompletedEventHandler DeleteProjectCompleted;
        
        /// <remarks/>
        public event HasRulesCompletedEventHandler HasRulesCompleted;
        
        /// <remarks/>
        public event HasLayoutCompletedEventHandler HasLayoutCompleted;
        
        /// <remarks/>
        public event GetWorkflowDataCompletedEventHandler GetWorkflowDataCompleted;
        
        /// <remarks/>
        public event SetWorkflowDataCompletedEventHandler SetWorkflowDataCompleted;
        
        /// <remarks/>
        public event StartWorkflowCompletedEventHandler StartWorkflowCompleted;
        
        /// <remarks/>
        public event LockProjectCompletedEventHandler LockProjectCompleted;
        
        /// <remarks/>
        public event UnlockProjectCompletedEventHandler UnlockProjectCompleted;
        
        /// <remarks/>
        public event GetAuthorizedSchemaInfosCompletedEventHandler GetAuthorizedSchemaInfosCompleted;
        
        /// <remarks/>
        public event GetDBARoleCompletedEventHandler GetDBARoleCompleted;
        
        /// <remarks/>
        public event SetDBARoleCompletedEventHandler SetDBARoleCompleted;
        
        /// <remarks/>
        public event HasRunningInstancesCompletedEventHandler HasRunningInstancesCompleted;
        
        /// <remarks/>
        public event GetWorkflowModelIDCompletedEventHandler GetWorkflowModelIDCompleted;
        
        /// <remarks/>
        public event IsLatestVersionCompletedEventHandler IsLatestVersionCompleted;
        
        /// <remarks/>
        public event IsQueryValidCompletedEventHandler IsQueryValidCompleted;
        
        /// <remarks/>
        public event IsValidCustomFunctionDefinitionCompletedEventHandler IsValidCustomFunctionDefinitionCompleted;
        
        /// <remarks/>
        public event ValidateActionCodeCompletedEventHandler ValidateActionCodeCompleted;
        
        /// <remarks/>
        public event GetTaskSubstituteModelCompletedEventHandler GetTaskSubstituteModelCompleted;
        
        /// <remarks/>
        public event UpdateTaskSubstituteModelCompletedEventHandler UpdateTaskSubstituteModelCompleted;
        
        /// <remarks/>
        public event LockTaskSubstituteModelCompletedEventHandler LockTaskSubstituteModelCompleted;
        
        /// <remarks/>
        public event UnlockTaskSubstituteModelCompletedEventHandler UnlockTaskSubstituteModelCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetExistingProjectInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProjectInfo[] GetExistingProjectInfos() {
            object[] results = this.Invoke("GetExistingProjectInfos", new object[0]);
            return ((ProjectInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExistingProjectInfosAsync() {
            this.GetExistingProjectInfosAsync(null);
        }
        
        /// <remarks/>
        public void GetExistingProjectInfosAsync(object userState) {
            if ((this.GetExistingProjectInfosOperationCompleted == null)) {
                this.GetExistingProjectInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingProjectInfosOperationCompleted);
            }
            this.InvokeAsync("GetExistingProjectInfos", new object[0], this.GetExistingProjectInfosOperationCompleted, userState);
        }
        
        private void OnGetExistingProjectInfosOperationCompleted(object arg) {
            if ((this.GetExistingProjectInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingProjectInfosCompleted(this, new GetExistingProjectInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetProject", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProject(string connectionStr, string projectName, string projectVersion) {
            object[] results = this.Invoke("GetProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectAsync(string connectionStr, string projectName, string projectVersion) {
            this.GetProjectAsync(connectionStr, projectName, projectVersion, null);
        }
        
        /// <remarks/>
        public void GetProjectAsync(string connectionStr, string projectName, string projectVersion, object userState) {
            if ((this.GetProjectOperationCompleted == null)) {
                this.GetProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectOperationCompleted);
            }
            this.InvokeAsync("GetProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion}, this.GetProjectOperationCompleted, userState);
        }
        
        private void OnGetProjectOperationCompleted(object arg) {
            if ((this.GetProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectCompleted(this, new GetProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetProjectPolicy", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProjectPolicy(string connectionStr, string projectName, string projectVersion) {
            object[] results = this.Invoke("GetProjectPolicy", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectPolicyAsync(string connectionStr, string projectName, string projectVersion) {
            this.GetProjectPolicyAsync(connectionStr, projectName, projectVersion, null);
        }
        
        /// <remarks/>
        public void GetProjectPolicyAsync(string connectionStr, string projectName, string projectVersion, object userState) {
            if ((this.GetProjectPolicyOperationCompleted == null)) {
                this.GetProjectPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectPolicyOperationCompleted);
            }
            this.InvokeAsync("GetProjectPolicy", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion}, this.GetProjectPolicyOperationCompleted, userState);
        }
        
        private void OnGetProjectPolicyOperationCompleted(object arg) {
            if ((this.GetProjectPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectPolicyCompleted(this, new GetProjectPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SaveProject", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SaveProject(string connectionStr, string projectName, string projectVersion, string projectXml, string policyXml) {
            object[] results = this.Invoke("SaveProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        projectXml,
                        policyXml});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void SaveProjectAsync(string connectionStr, string projectName, string projectVersion, string projectXml, string policyXml) {
            this.SaveProjectAsync(connectionStr, projectName, projectVersion, projectXml, policyXml, null);
        }
        
        /// <remarks/>
        public void SaveProjectAsync(string connectionStr, string projectName, string projectVersion, string projectXml, string policyXml, object userState) {
            if ((this.SaveProjectOperationCompleted == null)) {
                this.SaveProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveProjectOperationCompleted);
            }
            this.InvokeAsync("SaveProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        projectXml,
                        policyXml}, this.SaveProjectOperationCompleted, userState);
        }
        
        private void OnSaveProjectOperationCompleted(object arg) {
            if ((this.SaveProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveProjectCompleted(this, new SaveProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteProject", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProject(string connectionStr, string projectName, string projectVersion) {
            this.Invoke("DeleteProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion});
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(string connectionStr, string projectName, string projectVersion) {
            this.DeleteProjectAsync(connectionStr, projectName, projectVersion, null);
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(string connectionStr, string projectName, string projectVersion, object userState) {
            if ((this.DeleteProjectOperationCompleted == null)) {
                this.DeleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectOperationCompleted);
            }
            this.InvokeAsync("DeleteProject", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion}, this.DeleteProjectOperationCompleted, userState);
        }
        
        private void OnDeleteProjectOperationCompleted(object arg) {
            if ((this.DeleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/HasRules", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasRules(string connectionStr, string projectName, string projectVersion, string workflowName) {
            object[] results = this.Invoke("HasRules", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasRulesAsync(string connectionStr, string projectName, string projectVersion, string workflowName) {
            this.HasRulesAsync(connectionStr, projectName, projectVersion, workflowName, null);
        }
        
        /// <remarks/>
        public void HasRulesAsync(string connectionStr, string projectName, string projectVersion, string workflowName, object userState) {
            if ((this.HasRulesOperationCompleted == null)) {
                this.HasRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasRulesOperationCompleted);
            }
            this.InvokeAsync("HasRules", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName}, this.HasRulesOperationCompleted, userState);
        }
        
        private void OnHasRulesOperationCompleted(object arg) {
            if ((this.HasRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasRulesCompleted(this, new HasRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/HasLayout", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasLayout(string connectionStr, string projectName, string projectVersion, string workflowName) {
            object[] results = this.Invoke("HasLayout", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasLayoutAsync(string connectionStr, string projectName, string projectVersion, string workflowName) {
            this.HasLayoutAsync(connectionStr, projectName, projectVersion, workflowName, null);
        }
        
        /// <remarks/>
        public void HasLayoutAsync(string connectionStr, string projectName, string projectVersion, string workflowName, object userState) {
            if ((this.HasLayoutOperationCompleted == null)) {
                this.HasLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasLayoutOperationCompleted);
            }
            this.InvokeAsync("HasLayout", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName}, this.HasLayoutOperationCompleted, userState);
        }
        
        private void OnHasLayoutOperationCompleted(object arg) {
            if ((this.HasLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasLayoutCompleted(this, new HasLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetWorkflowData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWorkflowData(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr) {
            object[] results = this.Invoke("GetWorkflowData", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName,
                        dataTypestr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowDataAsync(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr) {
            this.GetWorkflowDataAsync(connectionStr, projectName, projectVersion, workflowName, dataTypestr, null);
        }
        
        /// <remarks/>
        public void GetWorkflowDataAsync(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr, object userState) {
            if ((this.GetWorkflowDataOperationCompleted == null)) {
                this.GetWorkflowDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowDataOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowData", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName,
                        dataTypestr}, this.GetWorkflowDataOperationCompleted, userState);
        }
        
        private void OnGetWorkflowDataOperationCompleted(object arg) {
            if ((this.GetWorkflowDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowDataCompleted(this, new GetWorkflowDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetWorkflowData", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWorkflowData(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr, string dataString) {
            this.Invoke("SetWorkflowData", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName,
                        dataTypestr,
                        dataString});
        }
        
        /// <remarks/>
        public void SetWorkflowDataAsync(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr, string dataString) {
            this.SetWorkflowDataAsync(connectionStr, projectName, projectVersion, workflowName, dataTypestr, dataString, null);
        }
        
        /// <remarks/>
        public void SetWorkflowDataAsync(string connectionStr, string projectName, string projectVersion, string workflowName, string dataTypestr, string dataString, object userState) {
            if ((this.SetWorkflowDataOperationCompleted == null)) {
                this.SetWorkflowDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWorkflowDataOperationCompleted);
            }
            this.InvokeAsync("SetWorkflowData", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName,
                        dataTypestr,
                        dataString}, this.SetWorkflowDataOperationCompleted, userState);
        }
        
        private void OnSetWorkflowDataOperationCompleted(object arg) {
            if ((this.SetWorkflowDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWorkflowDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/StartWorkflow", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartWorkflow(string connectionStr, string projectName, string projectVersion, string workflowName) {
            object[] results = this.Invoke("StartWorkflow", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string connectionStr, string projectName, string projectVersion, string workflowName) {
            this.StartWorkflowAsync(connectionStr, projectName, projectVersion, workflowName, null);
        }
        
        /// <remarks/>
        public void StartWorkflowAsync(string connectionStr, string projectName, string projectVersion, string workflowName, object userState) {
            if ((this.StartWorkflowOperationCompleted == null)) {
                this.StartWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartWorkflowOperationCompleted);
            }
            this.InvokeAsync("StartWorkflow", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName}, this.StartWorkflowOperationCompleted, userState);
        }
        
        private void OnStartWorkflowOperationCompleted(object arg) {
            if ((this.StartWorkflowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartWorkflowCompleted(this, new StartWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/LockProject", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LockProject(string projectName, string projectVersion, string connectionStr) {
            this.Invoke("LockProject", new object[] {
                        projectName,
                        projectVersion,
                        connectionStr});
        }
        
        /// <remarks/>
        public void LockProjectAsync(string projectName, string projectVersion, string connectionStr) {
            this.LockProjectAsync(projectName, projectVersion, connectionStr, null);
        }
        
        /// <remarks/>
        public void LockProjectAsync(string projectName, string projectVersion, string connectionStr, object userState) {
            if ((this.LockProjectOperationCompleted == null)) {
                this.LockProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockProjectOperationCompleted);
            }
            this.InvokeAsync("LockProject", new object[] {
                        projectName,
                        projectVersion,
                        connectionStr}, this.LockProjectOperationCompleted, userState);
        }
        
        private void OnLockProjectOperationCompleted(object arg) {
            if ((this.LockProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UnlockProject", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockProject(string projectName, string projectVersion, string connectionStr, bool forceUnlock) {
            this.Invoke("UnlockProject", new object[] {
                        projectName,
                        projectVersion,
                        connectionStr,
                        forceUnlock});
        }
        
        /// <remarks/>
        public void UnlockProjectAsync(string projectName, string projectVersion, string connectionStr, bool forceUnlock) {
            this.UnlockProjectAsync(projectName, projectVersion, connectionStr, forceUnlock, null);
        }
        
        /// <remarks/>
        public void UnlockProjectAsync(string projectName, string projectVersion, string connectionStr, bool forceUnlock, object userState) {
            if ((this.UnlockProjectOperationCompleted == null)) {
                this.UnlockProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockProjectOperationCompleted);
            }
            this.InvokeAsync("UnlockProject", new object[] {
                        projectName,
                        projectVersion,
                        connectionStr,
                        forceUnlock}, this.UnlockProjectOperationCompleted, userState);
        }
        
        private void OnUnlockProjectOperationCompleted(object arg) {
            if ((this.UnlockProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockProjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAuthorizedSchemaInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SchemaInfo[] GetAuthorizedSchemaInfos(string connectionStr) {
            object[] results = this.Invoke("GetAuthorizedSchemaInfos", new object[] {
                        connectionStr});
            return ((SchemaInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedSchemaInfosAsync(string connectionStr) {
            this.GetAuthorizedSchemaInfosAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedSchemaInfosAsync(string connectionStr, object userState) {
            if ((this.GetAuthorizedSchemaInfosOperationCompleted == null)) {
                this.GetAuthorizedSchemaInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedSchemaInfosOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedSchemaInfos", new object[] {
                        connectionStr}, this.GetAuthorizedSchemaInfosOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedSchemaInfosOperationCompleted(object arg) {
            if ((this.GetAuthorizedSchemaInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedSchemaInfosCompleted(this, new GetAuthorizedSchemaInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetDBARole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDBARole(string connectionStr, string projectName, string projectVersion) {
            object[] results = this.Invoke("GetDBARole", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBARoleAsync(string connectionStr, string projectName, string projectVersion) {
            this.GetDBARoleAsync(connectionStr, projectName, projectVersion, null);
        }
        
        /// <remarks/>
        public void GetDBARoleAsync(string connectionStr, string projectName, string projectVersion, object userState) {
            if ((this.GetDBARoleOperationCompleted == null)) {
                this.GetDBARoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBARoleOperationCompleted);
            }
            this.InvokeAsync("GetDBARole", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion}, this.GetDBARoleOperationCompleted, userState);
        }
        
        private void OnGetDBARoleOperationCompleted(object arg) {
            if ((this.GetDBARoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBARoleCompleted(this, new GetDBARoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetDBARole", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDBARole(string connectionStr, string projectName, string projectVersion, string role) {
            this.Invoke("SetDBARole", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        role});
        }
        
        /// <remarks/>
        public void SetDBARoleAsync(string connectionStr, string projectName, string projectVersion, string role) {
            this.SetDBARoleAsync(connectionStr, projectName, projectVersion, role, null);
        }
        
        /// <remarks/>
        public void SetDBARoleAsync(string connectionStr, string projectName, string projectVersion, string role, object userState) {
            if ((this.SetDBARoleOperationCompleted == null)) {
                this.SetDBARoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDBARoleOperationCompleted);
            }
            this.InvokeAsync("SetDBARole", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        role}, this.SetDBARoleOperationCompleted, userState);
        }
        
        private void OnSetDBARoleOperationCompleted(object arg) {
            if ((this.SetDBARoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDBARoleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/HasRunningInstances", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasRunningInstances(string connectionStr, string projectName, string projectVersion, string workflowId) {
            object[] results = this.Invoke("HasRunningInstances", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasRunningInstancesAsync(string connectionStr, string projectName, string projectVersion, string workflowId) {
            this.HasRunningInstancesAsync(connectionStr, projectName, projectVersion, workflowId, null);
        }
        
        /// <remarks/>
        public void HasRunningInstancesAsync(string connectionStr, string projectName, string projectVersion, string workflowId, object userState) {
            if ((this.HasRunningInstancesOperationCompleted == null)) {
                this.HasRunningInstancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasRunningInstancesOperationCompleted);
            }
            this.InvokeAsync("HasRunningInstances", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowId}, this.HasRunningInstancesOperationCompleted, userState);
        }
        
        private void OnHasRunningInstancesOperationCompleted(object arg) {
            if ((this.HasRunningInstancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasRunningInstancesCompleted(this, new HasRunningInstancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetWorkflowModelID", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWorkflowModelID(string connectionStr, string projectName, string projectVersion, string workflowName) {
            object[] results = this.Invoke("GetWorkflowModelID", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkflowModelIDAsync(string connectionStr, string projectName, string projectVersion, string workflowName) {
            this.GetWorkflowModelIDAsync(connectionStr, projectName, projectVersion, workflowName, null);
        }
        
        /// <remarks/>
        public void GetWorkflowModelIDAsync(string connectionStr, string projectName, string projectVersion, string workflowName, object userState) {
            if ((this.GetWorkflowModelIDOperationCompleted == null)) {
                this.GetWorkflowModelIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkflowModelIDOperationCompleted);
            }
            this.InvokeAsync("GetWorkflowModelID", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion,
                        workflowName}, this.GetWorkflowModelIDOperationCompleted, userState);
        }
        
        private void OnGetWorkflowModelIDOperationCompleted(object arg) {
            if ((this.GetWorkflowModelIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkflowModelIDCompleted(this, new GetWorkflowModelIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsLatestVersion", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsLatestVersion(string connectionStr, string projectName, string projectVersion) {
            object[] results = this.Invoke("IsLatestVersion", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsLatestVersionAsync(string connectionStr, string projectName, string projectVersion) {
            this.IsLatestVersionAsync(connectionStr, projectName, projectVersion, null);
        }
        
        /// <remarks/>
        public void IsLatestVersionAsync(string connectionStr, string projectName, string projectVersion, object userState) {
            if ((this.IsLatestVersionOperationCompleted == null)) {
                this.IsLatestVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLatestVersionOperationCompleted);
            }
            this.InvokeAsync("IsLatestVersion", new object[] {
                        connectionStr,
                        projectName,
                        projectVersion}, this.IsLatestVersionOperationCompleted, userState);
        }
        
        private void OnIsLatestVersionOperationCompleted(object arg) {
            if ((this.IsLatestVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsLatestVersionCompleted(this, new IsLatestVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsQueryValid", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsQueryValid(string connectionStr, string query) {
            object[] results = this.Invoke("IsQueryValid", new object[] {
                        connectionStr,
                        query});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsQueryValidAsync(string connectionStr, string query) {
            this.IsQueryValidAsync(connectionStr, query, null);
        }
        
        /// <remarks/>
        public void IsQueryValidAsync(string connectionStr, string query, object userState) {
            if ((this.IsQueryValidOperationCompleted == null)) {
                this.IsQueryValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsQueryValidOperationCompleted);
            }
            this.InvokeAsync("IsQueryValid", new object[] {
                        connectionStr,
                        query}, this.IsQueryValidOperationCompleted, userState);
        }
        
        private void OnIsQueryValidOperationCompleted(object arg) {
            if ((this.IsQueryValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsQueryValidCompleted(this, new IsQueryValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsValidCustomFunctionDefinition", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidCustomFunctionDefinition(string connectionStr, string functionDefinition) {
            object[] results = this.Invoke("IsValidCustomFunctionDefinition", new object[] {
                        connectionStr,
                        functionDefinition});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidCustomFunctionDefinitionAsync(string connectionStr, string functionDefinition) {
            this.IsValidCustomFunctionDefinitionAsync(connectionStr, functionDefinition, null);
        }
        
        /// <remarks/>
        public void IsValidCustomFunctionDefinitionAsync(string connectionStr, string functionDefinition, object userState) {
            if ((this.IsValidCustomFunctionDefinitionOperationCompleted == null)) {
                this.IsValidCustomFunctionDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidCustomFunctionDefinitionOperationCompleted);
            }
            this.InvokeAsync("IsValidCustomFunctionDefinition", new object[] {
                        connectionStr,
                        functionDefinition}, this.IsValidCustomFunctionDefinitionOperationCompleted, userState);
        }
        
        private void OnIsValidCustomFunctionDefinitionOperationCompleted(object arg) {
            if ((this.IsValidCustomFunctionDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidCustomFunctionDefinitionCompleted(this, new IsValidCustomFunctionDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ValidateActionCode", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateActionCode(string connectionStr, string actionCode, string schemaId, string instanceClassName) {
            object[] results = this.Invoke("ValidateActionCode", new object[] {
                        connectionStr,
                        actionCode,
                        schemaId,
                        instanceClassName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateActionCodeAsync(string connectionStr, string actionCode, string schemaId, string instanceClassName) {
            this.ValidateActionCodeAsync(connectionStr, actionCode, schemaId, instanceClassName, null);
        }
        
        /// <remarks/>
        public void ValidateActionCodeAsync(string connectionStr, string actionCode, string schemaId, string instanceClassName, object userState) {
            if ((this.ValidateActionCodeOperationCompleted == null)) {
                this.ValidateActionCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateActionCodeOperationCompleted);
            }
            this.InvokeAsync("ValidateActionCode", new object[] {
                        connectionStr,
                        actionCode,
                        schemaId,
                        instanceClassName}, this.ValidateActionCodeOperationCompleted, userState);
        }
        
        private void OnValidateActionCodeOperationCompleted(object arg) {
            if ((this.ValidateActionCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateActionCodeCompleted(this, new ValidateActionCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetTaskSubstituteModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTaskSubstituteModel(string connectionStr) {
            object[] results = this.Invoke("GetTaskSubstituteModel", new object[] {
                        connectionStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskSubstituteModelAsync(string connectionStr) {
            this.GetTaskSubstituteModelAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void GetTaskSubstituteModelAsync(string connectionStr, object userState) {
            if ((this.GetTaskSubstituteModelOperationCompleted == null)) {
                this.GetTaskSubstituteModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskSubstituteModelOperationCompleted);
            }
            this.InvokeAsync("GetTaskSubstituteModel", new object[] {
                        connectionStr}, this.GetTaskSubstituteModelOperationCompleted, userState);
        }
        
        private void OnGetTaskSubstituteModelOperationCompleted(object arg) {
            if ((this.GetTaskSubstituteModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskSubstituteModelCompleted(this, new GetTaskSubstituteModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UpdateTaskSubstituteModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTaskSubstituteModel(string connectionStr, string xml) {
            this.Invoke("UpdateTaskSubstituteModel", new object[] {
                        connectionStr,
                        xml});
        }
        
        /// <remarks/>
        public void UpdateTaskSubstituteModelAsync(string connectionStr, string xml) {
            this.UpdateTaskSubstituteModelAsync(connectionStr, xml, null);
        }
        
        /// <remarks/>
        public void UpdateTaskSubstituteModelAsync(string connectionStr, string xml, object userState) {
            if ((this.UpdateTaskSubstituteModelOperationCompleted == null)) {
                this.UpdateTaskSubstituteModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskSubstituteModelOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskSubstituteModel", new object[] {
                        connectionStr,
                        xml}, this.UpdateTaskSubstituteModelOperationCompleted, userState);
        }
        
        private void OnUpdateTaskSubstituteModelOperationCompleted(object arg) {
            if ((this.UpdateTaskSubstituteModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskSubstituteModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/LockTaskSubstituteModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LockTaskSubstituteModel(string connectionStr) {
            this.Invoke("LockTaskSubstituteModel", new object[] {
                        connectionStr});
        }
        
        /// <remarks/>
        public void LockTaskSubstituteModelAsync(string connectionStr) {
            this.LockTaskSubstituteModelAsync(connectionStr, null);
        }
        
        /// <remarks/>
        public void LockTaskSubstituteModelAsync(string connectionStr, object userState) {
            if ((this.LockTaskSubstituteModelOperationCompleted == null)) {
                this.LockTaskSubstituteModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockTaskSubstituteModelOperationCompleted);
            }
            this.InvokeAsync("LockTaskSubstituteModel", new object[] {
                        connectionStr}, this.LockTaskSubstituteModelOperationCompleted, userState);
        }
        
        private void OnLockTaskSubstituteModelOperationCompleted(object arg) {
            if ((this.LockTaskSubstituteModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockTaskSubstituteModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UnlockTaskSubstituteModel", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockTaskSubstituteModel(string connectionStr, bool forceUnlock) {
            this.Invoke("UnlockTaskSubstituteModel", new object[] {
                        connectionStr,
                        forceUnlock});
        }
        
        /// <remarks/>
        public void UnlockTaskSubstituteModelAsync(string connectionStr, bool forceUnlock) {
            this.UnlockTaskSubstituteModelAsync(connectionStr, forceUnlock, null);
        }
        
        /// <remarks/>
        public void UnlockTaskSubstituteModelAsync(string connectionStr, bool forceUnlock, object userState) {
            if ((this.UnlockTaskSubstituteModelOperationCompleted == null)) {
                this.UnlockTaskSubstituteModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockTaskSubstituteModelOperationCompleted);
            }
            this.InvokeAsync("UnlockTaskSubstituteModel", new object[] {
                        connectionStr,
                        forceUnlock}, this.UnlockTaskSubstituteModelOperationCompleted, userState);
        }
        
        private void OnUnlockTaskSubstituteModelOperationCompleted(object arg) {
            if ((this.UnlockTaskSubstituteModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockTaskSubstituteModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3654")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.newtera.com/webservices/")]
    public partial class ProjectInfo {
        
        private string idField;
        
        private string nameField;
        
        private string versionField;
        
        private string descriptionField;
        
        private System.DateTime modifiedTimeField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedTime {
            get {
                return this.modifiedTimeField;
            }
            set {
                this.modifiedTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3654")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.newtera.com/webservices/")]
    public partial class SchemaInfo {
        
        private string idField;
        
        private string nameField;
        
        private string versionField;
        
        private System.DateTime modifiedTimeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ModifiedTime {
            get {
                return this.modifiedTimeField;
            }
            set {
                this.modifiedTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetExistingProjectInfosCompletedEventHandler(object sender, GetExistingProjectInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingProjectInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingProjectInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetProjectCompletedEventHandler(object sender, GetProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetProjectPolicyCompletedEventHandler(object sender, GetProjectPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SaveProjectCompletedEventHandler(object sender, SaveProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteProjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void HasRulesCompletedEventHandler(object sender, HasRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void HasLayoutCompletedEventHandler(object sender, HasLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetWorkflowDataCompletedEventHandler(object sender, GetWorkflowDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetWorkflowDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void StartWorkflowCompletedEventHandler(object sender, StartWorkflowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void LockProjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnlockProjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAuthorizedSchemaInfosCompletedEventHandler(object sender, GetAuthorizedSchemaInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedSchemaInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedSchemaInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SchemaInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchemaInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDBARoleCompletedEventHandler(object sender, GetDBARoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBARoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBARoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetDBARoleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void HasRunningInstancesCompletedEventHandler(object sender, HasRunningInstancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasRunningInstancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasRunningInstancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetWorkflowModelIDCompletedEventHandler(object sender, GetWorkflowModelIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkflowModelIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkflowModelIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsLatestVersionCompletedEventHandler(object sender, IsLatestVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsLatestVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsLatestVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsQueryValidCompletedEventHandler(object sender, IsQueryValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsQueryValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsQueryValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsValidCustomFunctionDefinitionCompletedEventHandler(object sender, IsValidCustomFunctionDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidCustomFunctionDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidCustomFunctionDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ValidateActionCodeCompletedEventHandler(object sender, ValidateActionCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateActionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateActionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTaskSubstituteModelCompletedEventHandler(object sender, GetTaskSubstituteModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskSubstituteModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskSubstituteModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateTaskSubstituteModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void LockTaskSubstituteModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnlockTaskSubstituteModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591