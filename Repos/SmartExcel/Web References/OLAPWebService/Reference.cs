//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3649
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3649 版自动生成。
// 
#pragma warning disable 1591

namespace SmartExcel.OLAPWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OLAPServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class OLAPService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SaveNamedPivotLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPivotLayoutNameUniqueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPivotLayoutsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPivotLayoutXmlByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePivotLayoutByIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OLAPService() {
            this.Url = global::SmartExcel.Properties.Settings.Default.SmartExcel_OLAPWebService_OLAPService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SaveNamedPivotLayoutCompletedEventHandler SaveNamedPivotLayoutCompleted;
        
        /// <remarks/>
        public event IsPivotLayoutNameUniqueCompletedEventHandler IsPivotLayoutNameUniqueCompleted;
        
        /// <remarks/>
        public event GetPivotLayoutsCompletedEventHandler GetPivotLayoutsCompleted;
        
        /// <remarks/>
        public event GetPivotLayoutXmlByIdCompletedEventHandler GetPivotLayoutXmlByIdCompleted;
        
        /// <remarks/>
        public event DeletePivotLayoutByIdCompletedEventHandler DeletePivotLayoutByIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SaveNamedPivotLayout", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveNamedPivotLayout(string connectionStr, string className, string name, string desc, string viewName, string xml) {
            object[] results = this.Invoke("SaveNamedPivotLayout", new object[] {
                        connectionStr,
                        className,
                        name,
                        desc,
                        viewName,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNamedPivotLayoutAsync(string connectionStr, string className, string name, string desc, string viewName, string xml) {
            this.SaveNamedPivotLayoutAsync(connectionStr, className, name, desc, viewName, xml, null);
        }
        
        /// <remarks/>
        public void SaveNamedPivotLayoutAsync(string connectionStr, string className, string name, string desc, string viewName, string xml, object userState) {
            if ((this.SaveNamedPivotLayoutOperationCompleted == null)) {
                this.SaveNamedPivotLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNamedPivotLayoutOperationCompleted);
            }
            this.InvokeAsync("SaveNamedPivotLayout", new object[] {
                        connectionStr,
                        className,
                        name,
                        desc,
                        viewName,
                        xml}, this.SaveNamedPivotLayoutOperationCompleted, userState);
        }
        
        private void OnSaveNamedPivotLayoutOperationCompleted(object arg) {
            if ((this.SaveNamedPivotLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNamedPivotLayoutCompleted(this, new SaveNamedPivotLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/IsPivotLayoutNameUnique", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPivotLayoutNameUnique(string connectionStr, string className, string name) {
            object[] results = this.Invoke("IsPivotLayoutNameUnique", new object[] {
                        connectionStr,
                        className,
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPivotLayoutNameUniqueAsync(string connectionStr, string className, string name) {
            this.IsPivotLayoutNameUniqueAsync(connectionStr, className, name, null);
        }
        
        /// <remarks/>
        public void IsPivotLayoutNameUniqueAsync(string connectionStr, string className, string name, object userState) {
            if ((this.IsPivotLayoutNameUniqueOperationCompleted == null)) {
                this.IsPivotLayoutNameUniqueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPivotLayoutNameUniqueOperationCompleted);
            }
            this.InvokeAsync("IsPivotLayoutNameUnique", new object[] {
                        connectionStr,
                        className,
                        name}, this.IsPivotLayoutNameUniqueOperationCompleted, userState);
        }
        
        private void OnIsPivotLayoutNameUniqueOperationCompleted(object arg) {
            if ((this.IsPivotLayoutNameUniqueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPivotLayoutNameUniqueCompleted(this, new IsPivotLayoutNameUniqueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetPivotLayouts", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPivotLayouts(string connectionStr, string className) {
            object[] results = this.Invoke("GetPivotLayouts", new object[] {
                        connectionStr,
                        className});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPivotLayoutsAsync(string connectionStr, string className) {
            this.GetPivotLayoutsAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void GetPivotLayoutsAsync(string connectionStr, string className, object userState) {
            if ((this.GetPivotLayoutsOperationCompleted == null)) {
                this.GetPivotLayoutsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotLayoutsOperationCompleted);
            }
            this.InvokeAsync("GetPivotLayouts", new object[] {
                        connectionStr,
                        className}, this.GetPivotLayoutsOperationCompleted, userState);
        }
        
        private void OnGetPivotLayoutsOperationCompleted(object arg) {
            if ((this.GetPivotLayoutsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPivotLayoutsCompleted(this, new GetPivotLayoutsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetPivotLayoutXmlById", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPivotLayoutXmlById(string pivotLayoutId) {
            object[] results = this.Invoke("GetPivotLayoutXmlById", new object[] {
                        pivotLayoutId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPivotLayoutXmlByIdAsync(string pivotLayoutId) {
            this.GetPivotLayoutXmlByIdAsync(pivotLayoutId, null);
        }
        
        /// <remarks/>
        public void GetPivotLayoutXmlByIdAsync(string pivotLayoutId, object userState) {
            if ((this.GetPivotLayoutXmlByIdOperationCompleted == null)) {
                this.GetPivotLayoutXmlByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotLayoutXmlByIdOperationCompleted);
            }
            this.InvokeAsync("GetPivotLayoutXmlById", new object[] {
                        pivotLayoutId}, this.GetPivotLayoutXmlByIdOperationCompleted, userState);
        }
        
        private void OnGetPivotLayoutXmlByIdOperationCompleted(object arg) {
            if ((this.GetPivotLayoutXmlByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPivotLayoutXmlByIdCompleted(this, new GetPivotLayoutXmlByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeletePivotLayoutById", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePivotLayoutById(string pivotLayoutId) {
            this.Invoke("DeletePivotLayoutById", new object[] {
                        pivotLayoutId});
        }
        
        /// <remarks/>
        public void DeletePivotLayoutByIdAsync(string pivotLayoutId) {
            this.DeletePivotLayoutByIdAsync(pivotLayoutId, null);
        }
        
        /// <remarks/>
        public void DeletePivotLayoutByIdAsync(string pivotLayoutId, object userState) {
            if ((this.DeletePivotLayoutByIdOperationCompleted == null)) {
                this.DeletePivotLayoutByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePivotLayoutByIdOperationCompleted);
            }
            this.InvokeAsync("DeletePivotLayoutById", new object[] {
                        pivotLayoutId}, this.DeletePivotLayoutByIdOperationCompleted, userState);
        }
        
        private void OnDeletePivotLayoutByIdOperationCompleted(object arg) {
            if ((this.DeletePivotLayoutByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePivotLayoutByIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SaveNamedPivotLayoutCompletedEventHandler(object sender, SaveNamedPivotLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNamedPivotLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNamedPivotLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void IsPivotLayoutNameUniqueCompletedEventHandler(object sender, IsPivotLayoutNameUniqueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPivotLayoutNameUniqueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPivotLayoutNameUniqueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetPivotLayoutsCompletedEventHandler(object sender, GetPivotLayoutsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPivotLayoutsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPivotLayoutsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetPivotLayoutXmlByIdCompletedEventHandler(object sender, GetPivotLayoutXmlByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPivotLayoutXmlByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPivotLayoutXmlByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeletePivotLayoutByIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591