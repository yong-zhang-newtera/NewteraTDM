//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3603 版自动生成。
// 
#pragma warning disable 1591

namespace SmartWord.CMDataWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CMDataServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class CMDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecuteQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteUpdateQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteValidatingQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllInstancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildFullTextIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteUpdateQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstanceCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetDataCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteImportScriptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportNextOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndImportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CMDataService() {
            this.Url = global::SmartWord.Properties.Settings.Default.Newtera_SmartWord_CMDataWebService_CMDataService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecuteQueryCompletedEventHandler ExecuteQueryCompleted;
        
        /// <remarks/>
        public event BeginQueryCompletedEventHandler BeginQueryCompleted;
        
        /// <remarks/>
        public event GetNextResultCompletedEventHandler GetNextResultCompleted;
        
        /// <remarks/>
        public event EndQueryCompletedEventHandler EndQueryCompleted;
        
        /// <remarks/>
        public event ExecuteUpdateQueryCompletedEventHandler ExecuteUpdateQueryCompleted;
        
        /// <remarks/>
        public event ExecuteValidatingQueryCompletedEventHandler ExecuteValidatingQueryCompleted;
        
        /// <remarks/>
        public event DeleteAllInstancesCompletedEventHandler DeleteAllInstancesCompleted;
        
        /// <remarks/>
        public event BuildFullTextIndexCompletedEventHandler BuildFullTextIndexCompleted;
        
        /// <remarks/>
        public event ExecuteUpdateQueriesCompletedEventHandler ExecuteUpdateQueriesCompleted;
        
        /// <remarks/>
        public event ExecuteCountCompletedEventHandler ExecuteCountCompleted;
        
        /// <remarks/>
        public event GetInstanceCountCompletedEventHandler GetInstanceCountCompleted;
        
        /// <remarks/>
        public event ResetDataCacheCompletedEventHandler ResetDataCacheCompleted;
        
        /// <remarks/>
        public event ExecuteImportScriptsCompletedEventHandler ExecuteImportScriptsCompleted;
        
        /// <remarks/>
        public event BeginImportCompletedEventHandler BeginImportCompleted;
        
        /// <remarks/>
        public event ImportNextCompletedEventHandler ImportNextCompleted;
        
        /// <remarks/>
        public event EndImportCompletedEventHandler EndImportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ExecuteQuery(string connectionStr, string query) {
            object[] results = this.Invoke("ExecuteQuery", new object[] {
                        connectionStr,
                        query});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteQueryAsync(string connectionStr, string query) {
            this.ExecuteQueryAsync(connectionStr, query, null);
        }
        
        /// <remarks/>
        public void ExecuteQueryAsync(string connectionStr, string query, object userState) {
            if ((this.ExecuteQueryOperationCompleted == null)) {
                this.ExecuteQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteQuery", new object[] {
                        connectionStr,
                        query}, this.ExecuteQueryOperationCompleted, userState);
        }
        
        private void OnExecuteQueryOperationCompleted(object arg) {
            if ((this.ExecuteQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteQueryCompleted(this, new ExecuteQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/BeginQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginQuery(string connectionStr, string query, int pageSize) {
            object[] results = this.Invoke("BeginQuery", new object[] {
                        connectionStr,
                        query,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginQueryAsync(string connectionStr, string query, int pageSize) {
            this.BeginQueryAsync(connectionStr, query, pageSize, null);
        }
        
        /// <remarks/>
        public void BeginQueryAsync(string connectionStr, string query, int pageSize, object userState) {
            if ((this.BeginQueryOperationCompleted == null)) {
                this.BeginQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginQueryOperationCompleted);
            }
            this.InvokeAsync("BeginQuery", new object[] {
                        connectionStr,
                        query,
                        pageSize}, this.BeginQueryOperationCompleted, userState);
        }
        
        private void OnBeginQueryOperationCompleted(object arg) {
            if ((this.BeginQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginQueryCompleted(this, new BeginQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetNextResult", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetNextResult(string connectionStr, string queryId) {
            object[] results = this.Invoke("GetNextResult", new object[] {
                        connectionStr,
                        queryId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextResultAsync(string connectionStr, string queryId) {
            this.GetNextResultAsync(connectionStr, queryId, null);
        }
        
        /// <remarks/>
        public void GetNextResultAsync(string connectionStr, string queryId, object userState) {
            if ((this.GetNextResultOperationCompleted == null)) {
                this.GetNextResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextResultOperationCompleted);
            }
            this.InvokeAsync("GetNextResult", new object[] {
                        connectionStr,
                        queryId}, this.GetNextResultOperationCompleted, userState);
        }
        
        private void OnGetNextResultOperationCompleted(object arg) {
            if ((this.GetNextResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextResultCompleted(this, new GetNextResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/EndQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndQuery(string queryId) {
            this.Invoke("EndQuery", new object[] {
                        queryId});
        }
        
        /// <remarks/>
        public void EndQueryAsync(string queryId) {
            this.EndQueryAsync(queryId, null);
        }
        
        /// <remarks/>
        public void EndQueryAsync(string queryId, object userState) {
            if ((this.EndQueryOperationCompleted == null)) {
                this.EndQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndQueryOperationCompleted);
            }
            this.InvokeAsync("EndQuery", new object[] {
                        queryId}, this.EndQueryOperationCompleted, userState);
        }
        
        private void OnEndQueryOperationCompleted(object arg) {
            if ((this.EndQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteUpdateQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteUpdateQuery(string connectionStr, string query, bool needToRaiseEvents) {
            object[] results = this.Invoke("ExecuteUpdateQuery", new object[] {
                        connectionStr,
                        query,
                        needToRaiseEvents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteUpdateQueryAsync(string connectionStr, string query, bool needToRaiseEvents) {
            this.ExecuteUpdateQueryAsync(connectionStr, query, needToRaiseEvents, null);
        }
        
        /// <remarks/>
        public void ExecuteUpdateQueryAsync(string connectionStr, string query, bool needToRaiseEvents, object userState) {
            if ((this.ExecuteUpdateQueryOperationCompleted == null)) {
                this.ExecuteUpdateQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteUpdateQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteUpdateQuery", new object[] {
                        connectionStr,
                        query,
                        needToRaiseEvents}, this.ExecuteUpdateQueryOperationCompleted, userState);
        }
        
        private void OnExecuteUpdateQueryOperationCompleted(object arg) {
            if ((this.ExecuteUpdateQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteUpdateQueryCompleted(this, new ExecuteUpdateQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteValidatingQuery", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteValidatingQuery(string connectionStr, string query) {
            object[] results = this.Invoke("ExecuteValidatingQuery", new object[] {
                        connectionStr,
                        query});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteValidatingQueryAsync(string connectionStr, string query) {
            this.ExecuteValidatingQueryAsync(connectionStr, query, null);
        }
        
        /// <remarks/>
        public void ExecuteValidatingQueryAsync(string connectionStr, string query, object userState) {
            if ((this.ExecuteValidatingQueryOperationCompleted == null)) {
                this.ExecuteValidatingQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteValidatingQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteValidatingQuery", new object[] {
                        connectionStr,
                        query}, this.ExecuteValidatingQueryOperationCompleted, userState);
        }
        
        private void OnExecuteValidatingQueryOperationCompleted(object arg) {
            if ((this.ExecuteValidatingQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteValidatingQueryCompleted(this, new ExecuteValidatingQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteAllInstances", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteAllInstances(string connectionStr, string className) {
            object[] results = this.Invoke("DeleteAllInstances", new object[] {
                        connectionStr,
                        className});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAllInstancesAsync(string connectionStr, string className) {
            this.DeleteAllInstancesAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void DeleteAllInstancesAsync(string connectionStr, string className, object userState) {
            if ((this.DeleteAllInstancesOperationCompleted == null)) {
                this.DeleteAllInstancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllInstancesOperationCompleted);
            }
            this.InvokeAsync("DeleteAllInstances", new object[] {
                        connectionStr,
                        className}, this.DeleteAllInstancesOperationCompleted, userState);
        }
        
        private void OnDeleteAllInstancesOperationCompleted(object arg) {
            if ((this.DeleteAllInstancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllInstancesCompleted(this, new DeleteAllInstancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/BuildFullTextIndex", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BuildFullTextIndex(string connectionStr, string className) {
            this.Invoke("BuildFullTextIndex", new object[] {
                        connectionStr,
                        className});
        }
        
        /// <remarks/>
        public void BuildFullTextIndexAsync(string connectionStr, string className) {
            this.BuildFullTextIndexAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void BuildFullTextIndexAsync(string connectionStr, string className, object userState) {
            if ((this.BuildFullTextIndexOperationCompleted == null)) {
                this.BuildFullTextIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildFullTextIndexOperationCompleted);
            }
            this.InvokeAsync("BuildFullTextIndex", new object[] {
                        connectionStr,
                        className}, this.BuildFullTextIndexOperationCompleted, userState);
        }
        
        private void OnBuildFullTextIndexOperationCompleted(object arg) {
            if ((this.BuildFullTextIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildFullTextIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteUpdateQueries", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteUpdateQueries(string connectionStr, string[] queries) {
            object[] results = this.Invoke("ExecuteUpdateQueries", new object[] {
                        connectionStr,
                        queries});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteUpdateQueriesAsync(string connectionStr, string[] queries) {
            this.ExecuteUpdateQueriesAsync(connectionStr, queries, null);
        }
        
        /// <remarks/>
        public void ExecuteUpdateQueriesAsync(string connectionStr, string[] queries, object userState) {
            if ((this.ExecuteUpdateQueriesOperationCompleted == null)) {
                this.ExecuteUpdateQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteUpdateQueriesOperationCompleted);
            }
            this.InvokeAsync("ExecuteUpdateQueries", new object[] {
                        connectionStr,
                        queries}, this.ExecuteUpdateQueriesOperationCompleted, userState);
        }
        
        private void OnExecuteUpdateQueriesOperationCompleted(object arg) {
            if ((this.ExecuteUpdateQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteUpdateQueriesCompleted(this, new ExecuteUpdateQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteCount", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteCount(string connectionStr, string query) {
            object[] results = this.Invoke("ExecuteCount", new object[] {
                        connectionStr,
                        query});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCountAsync(string connectionStr, string query) {
            this.ExecuteCountAsync(connectionStr, query, null);
        }
        
        /// <remarks/>
        public void ExecuteCountAsync(string connectionStr, string query, object userState) {
            if ((this.ExecuteCountOperationCompleted == null)) {
                this.ExecuteCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCountOperationCompleted);
            }
            this.InvokeAsync("ExecuteCount", new object[] {
                        connectionStr,
                        query}, this.ExecuteCountOperationCompleted, userState);
        }
        
        private void OnExecuteCountOperationCompleted(object arg) {
            if ((this.ExecuteCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCountCompleted(this, new ExecuteCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetInstanceCount", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetInstanceCount(string connectionStr, string className) {
            object[] results = this.Invoke("GetInstanceCount", new object[] {
                        connectionStr,
                        className});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstanceCountAsync(string connectionStr, string className) {
            this.GetInstanceCountAsync(connectionStr, className, null);
        }
        
        /// <remarks/>
        public void GetInstanceCountAsync(string connectionStr, string className, object userState) {
            if ((this.GetInstanceCountOperationCompleted == null)) {
                this.GetInstanceCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstanceCountOperationCompleted);
            }
            this.InvokeAsync("GetInstanceCount", new object[] {
                        connectionStr,
                        className}, this.GetInstanceCountOperationCompleted, userState);
        }
        
        private void OnGetInstanceCountOperationCompleted(object arg) {
            if ((this.GetInstanceCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstanceCountCompleted(this, new GetInstanceCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ResetDataCache", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetDataCache() {
            this.Invoke("ResetDataCache", new object[0]);
        }
        
        /// <remarks/>
        public void ResetDataCacheAsync() {
            this.ResetDataCacheAsync(null);
        }
        
        /// <remarks/>
        public void ResetDataCacheAsync(object userState) {
            if ((this.ResetDataCacheOperationCompleted == null)) {
                this.ResetDataCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetDataCacheOperationCompleted);
            }
            this.InvokeAsync("ResetDataCache", new object[0], this.ResetDataCacheOperationCompleted, userState);
        }
        
        private void OnResetDataCacheOperationCompleted(object arg) {
            if ((this.ResetDataCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetDataCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ExecuteImportScripts", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteImportScripts(string connectionStr, string xmlString, int chunkIndex) {
            object[] results = this.Invoke("ExecuteImportScripts", new object[] {
                        connectionStr,
                        xmlString,
                        chunkIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteImportScriptsAsync(string connectionStr, string xmlString, int chunkIndex) {
            this.ExecuteImportScriptsAsync(connectionStr, xmlString, chunkIndex, null);
        }
        
        /// <remarks/>
        public void ExecuteImportScriptsAsync(string connectionStr, string xmlString, int chunkIndex, object userState) {
            if ((this.ExecuteImportScriptsOperationCompleted == null)) {
                this.ExecuteImportScriptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteImportScriptsOperationCompleted);
            }
            this.InvokeAsync("ExecuteImportScripts", new object[] {
                        connectionStr,
                        xmlString,
                        chunkIndex}, this.ExecuteImportScriptsOperationCompleted, userState);
        }
        
        private void OnExecuteImportScriptsOperationCompleted(object arg) {
            if ((this.ExecuteImportScriptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteImportScriptsCompleted(this, new ExecuteImportScriptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/BeginImport", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginImport(string connectionStr, string xquery) {
            object[] results = this.Invoke("BeginImport", new object[] {
                        connectionStr,
                        xquery});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginImportAsync(string connectionStr, string xquery) {
            this.BeginImportAsync(connectionStr, xquery, null);
        }
        
        /// <remarks/>
        public void BeginImportAsync(string connectionStr, string xquery, object userState) {
            if ((this.BeginImportOperationCompleted == null)) {
                this.BeginImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginImportOperationCompleted);
            }
            this.InvokeAsync("BeginImport", new object[] {
                        connectionStr,
                        xquery}, this.BeginImportOperationCompleted, userState);
        }
        
        private void OnBeginImportOperationCompleted(object arg) {
            if ((this.BeginImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginImportCompleted(this, new BeginImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/ImportNext", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportNext(string connectionStr, string importId, string className, string xmlString, int chunkIndex) {
            object[] results = this.Invoke("ImportNext", new object[] {
                        connectionStr,
                        importId,
                        className,
                        xmlString,
                        chunkIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportNextAsync(string connectionStr, string importId, string className, string xmlString, int chunkIndex) {
            this.ImportNextAsync(connectionStr, importId, className, xmlString, chunkIndex, null);
        }
        
        /// <remarks/>
        public void ImportNextAsync(string connectionStr, string importId, string className, string xmlString, int chunkIndex, object userState) {
            if ((this.ImportNextOperationCompleted == null)) {
                this.ImportNextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportNextOperationCompleted);
            }
            this.InvokeAsync("ImportNext", new object[] {
                        connectionStr,
                        importId,
                        className,
                        xmlString,
                        chunkIndex}, this.ImportNextOperationCompleted, userState);
        }
        
        private void OnImportNextOperationCompleted(object arg) {
            if ((this.ImportNextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportNextCompleted(this, new ImportNextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/EndImport", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndImport(string importId) {
            this.Invoke("EndImport", new object[] {
                        importId});
        }
        
        /// <remarks/>
        public void EndImportAsync(string importId) {
            this.EndImportAsync(importId, null);
        }
        
        /// <remarks/>
        public void EndImportAsync(string importId, object userState) {
            if ((this.EndImportOperationCompleted == null)) {
                this.EndImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndImportOperationCompleted);
            }
            this.InvokeAsync("EndImport", new object[] {
                        importId}, this.EndImportOperationCompleted, userState);
        }
        
        private void OnEndImportOperationCompleted(object arg) {
            if ((this.EndImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndImportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteQueryCompletedEventHandler(object sender, ExecuteQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void BeginQueryCompletedEventHandler(object sender, BeginQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetNextResultCompletedEventHandler(object sender, GetNextResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void EndQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteUpdateQueryCompletedEventHandler(object sender, ExecuteUpdateQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteUpdateQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteUpdateQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteValidatingQueryCompletedEventHandler(object sender, ExecuteValidatingQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteValidatingQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteValidatingQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteAllInstancesCompletedEventHandler(object sender, DeleteAllInstancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAllInstancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAllInstancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void BuildFullTextIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteUpdateQueriesCompletedEventHandler(object sender, ExecuteUpdateQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteUpdateQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteUpdateQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteCountCompletedEventHandler(object sender, ExecuteCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetInstanceCountCompletedEventHandler(object sender, GetInstanceCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstanceCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstanceCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ResetDataCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ExecuteImportScriptsCompletedEventHandler(object sender, ExecuteImportScriptsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteImportScriptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteImportScriptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void BeginImportCompletedEventHandler(object sender, BeginImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ImportNextCompletedEventHandler(object sender, ImportNextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportNextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportNextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void EndImportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591