//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3649
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3649 版自动生成。
// 
#pragma warning disable 1591

namespace SmartWord.AttachmentWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AttachmentServiceSoap", Namespace="http://www.newtera.com/webservices/")]
    public partial class AttachmentService : Microsoft.Web.Services.WebServicesClientProtocol
    {
        
        private System.Threading.SendOrPostCallback GetAttachmentInfosCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentInfoWithIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassAttachmentInfosCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassAttachmentInfosOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClassAttachmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClassAttachmentInfoWithIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetClassAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClassAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateImageAttributeValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteImageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AttachmentService() {
            this.Url = global::SmartWord.Properties.Settings.Default.Newtera_SmartWord_AttachmentWebService_AttachmentService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAttachmentInfosCountCompletedEventHandler GetAttachmentInfosCountCompleted;
        
        /// <remarks/>
        public event GetAttachmentInfosCompletedEventHandler GetAttachmentInfosCompleted;
        
        /// <remarks/>
        public event AddAttachmentInfoCompletedEventHandler AddAttachmentInfoCompleted;
        
        /// <remarks/>
        public event AddAttachmentInfoWithIdCompletedEventHandler AddAttachmentInfoWithIdCompleted;
        
        /// <remarks/>
        public event SetAttachmentCompletedEventHandler SetAttachmentCompleted;
        
        /// <remarks/>
        public event GetAttachmentCompletedEventHandler GetAttachmentCompleted;
        
        /// <remarks/>
        public event DeleteAttachmentCompletedEventHandler DeleteAttachmentCompleted;
        
        /// <remarks/>
        public event GetClassAttachmentInfosCountCompletedEventHandler GetClassAttachmentInfosCountCompleted;
        
        /// <remarks/>
        public event GetClassAttachmentInfosCompletedEventHandler GetClassAttachmentInfosCompleted;
        
        /// <remarks/>
        public event AddClassAttachmentInfoCompletedEventHandler AddClassAttachmentInfoCompleted;
        
        /// <remarks/>
        public event AddClassAttachmentInfoWithIdCompletedEventHandler AddClassAttachmentInfoWithIdCompleted;
        
        /// <remarks/>
        public event SetClassAttachmentCompletedEventHandler SetClassAttachmentCompleted;
        
        /// <remarks/>
        public event GetClassAttachmentCompletedEventHandler GetClassAttachmentCompleted;
        
        /// <remarks/>
        public event DeleteClassAttachmentCompletedEventHandler DeleteClassAttachmentCompleted;
        
        /// <remarks/>
        public event GetFileTypeInfoCompletedEventHandler GetFileTypeInfoCompleted;
        
        /// <remarks/>
        public event GetChartFileCompletedEventHandler GetChartFileCompleted;
        
        /// <remarks/>
        public event UpdateImageAttributeValueCompletedEventHandler UpdateImageAttributeValueCompleted;
        
        /// <remarks/>
        public event UploadImageCompletedEventHandler UploadImageCompleted;
        
        /// <remarks/>
        public event GetImageCompletedEventHandler GetImageCompleted;
        
        /// <remarks/>
        public event DeleteImageCompletedEventHandler DeleteImageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAttachmentInfosCount", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAttachmentInfosCount(string connectionStr, string instanceId) {
            object[] results = this.Invoke("GetAttachmentInfosCount", new object[] {
                        connectionStr,
                        instanceId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentInfosCountAsync(string connectionStr, string instanceId) {
            this.GetAttachmentInfosCountAsync(connectionStr, instanceId, null);
        }
        
        /// <remarks/>
        public void GetAttachmentInfosCountAsync(string connectionStr, string instanceId, object userState) {
            if ((this.GetAttachmentInfosCountOperationCompleted == null)) {
                this.GetAttachmentInfosCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentInfosCountOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentInfosCount", new object[] {
                        connectionStr,
                        instanceId}, this.GetAttachmentInfosCountOperationCompleted, userState);
        }
        
        private void OnGetAttachmentInfosCountOperationCompleted(object arg) {
            if ((this.GetAttachmentInfosCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentInfosCountCompleted(this, new GetAttachmentInfosCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAttachmentInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachmentInfos(string connectionStr, string instanceId, int startRow, int pageSize) {
            object[] results = this.Invoke("GetAttachmentInfos", new object[] {
                        connectionStr,
                        instanceId,
                        startRow,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentInfosAsync(string connectionStr, string instanceId, int startRow, int pageSize) {
            this.GetAttachmentInfosAsync(connectionStr, instanceId, startRow, pageSize, null);
        }
        
        /// <remarks/>
        public void GetAttachmentInfosAsync(string connectionStr, string instanceId, int startRow, int pageSize, object userState) {
            if ((this.GetAttachmentInfosOperationCompleted == null)) {
                this.GetAttachmentInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentInfosOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentInfos", new object[] {
                        connectionStr,
                        instanceId,
                        startRow,
                        pageSize}, this.GetAttachmentInfosOperationCompleted, userState);
        }
        
        private void OnGetAttachmentInfosOperationCompleted(object arg) {
            if ((this.GetAttachmentInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentInfosCompleted(this, new GetAttachmentInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddAttachmentInfo", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddAttachmentInfo(string connectionStr, string instanceId, string className, string attachmentName, string type, long size, bool isPublic) {
            object[] results = this.Invoke("AddAttachmentInfo", new object[] {
                        connectionStr,
                        instanceId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachmentInfoAsync(string connectionStr, string instanceId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.AddAttachmentInfoAsync(connectionStr, instanceId, className, attachmentName, type, size, isPublic, null);
        }
        
        /// <remarks/>
        public void AddAttachmentInfoAsync(string connectionStr, string instanceId, string className, string attachmentName, string type, long size, bool isPublic, object userState) {
            if ((this.AddAttachmentInfoOperationCompleted == null)) {
                this.AddAttachmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentInfoOperationCompleted);
            }
            this.InvokeAsync("AddAttachmentInfo", new object[] {
                        connectionStr,
                        instanceId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic}, this.AddAttachmentInfoOperationCompleted, userState);
        }
        
        private void OnAddAttachmentInfoOperationCompleted(object arg) {
            if ((this.AddAttachmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentInfoCompleted(this, new AddAttachmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddAttachmentInfoWithId", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddAttachmentInfoWithId(string connectionStr, string instanceId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.Invoke("AddAttachmentInfoWithId", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic});
        }
        
        /// <remarks/>
        public void AddAttachmentInfoWithIdAsync(string connectionStr, string instanceId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.AddAttachmentInfoWithIdAsync(connectionStr, instanceId, attachmentId, className, attachmentName, type, size, isPublic, null);
        }
        
        /// <remarks/>
        public void AddAttachmentInfoWithIdAsync(string connectionStr, string instanceId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic, object userState) {
            if ((this.AddAttachmentInfoWithIdOperationCompleted == null)) {
                this.AddAttachmentInfoWithIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentInfoWithIdOperationCompleted);
            }
            this.InvokeAsync("AddAttachmentInfoWithId", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic}, this.AddAttachmentInfoWithIdOperationCompleted, userState);
        }
        
        private void OnAddAttachmentInfoWithIdOperationCompleted(object arg) {
            if ((this.AddAttachmentInfoWithIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentInfoWithIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAttachment(string connectionStr, string attachmentId) {
            this.Invoke("SetAttachment", new object[] {
                        connectionStr,
                        attachmentId});
        }
        
        /// <remarks/>
        public void SetAttachmentAsync(string connectionStr, string attachmentId) {
            this.SetAttachmentAsync(connectionStr, attachmentId, null);
        }
        
        /// <remarks/>
        public void SetAttachmentAsync(string connectionStr, string attachmentId, object userState) {
            if ((this.SetAttachmentOperationCompleted == null)) {
                this.SetAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAttachmentOperationCompleted);
            }
            this.InvokeAsync("SetAttachment", new object[] {
                        connectionStr,
                        attachmentId}, this.SetAttachmentOperationCompleted, userState);
        }
        
        private void OnSetAttachmentOperationCompleted(object arg) {
            if ((this.SetAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAttachment(string connectionStr, string instanceId, string attachmentName) {
            this.Invoke("GetAttachment", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentName});
        }
        
        /// <remarks/>
        public void GetAttachmentAsync(string connectionStr, string instanceId, string attachmentName) {
            this.GetAttachmentAsync(connectionStr, instanceId, attachmentName, null);
        }
        
        /// <remarks/>
        public void GetAttachmentAsync(string connectionStr, string instanceId, string attachmentName, object userState) {
            if ((this.GetAttachmentOperationCompleted == null)) {
                this.GetAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetAttachment", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentName}, this.GetAttachmentOperationCompleted, userState);
        }
        
        private void OnGetAttachmentOperationCompleted(object arg) {
            if ((this.GetAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAttachment(string connectionStr, string instanceId, string attachmentName) {
            this.Invoke("DeleteAttachment", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentName});
        }
        
        /// <remarks/>
        public void DeleteAttachmentAsync(string connectionStr, string instanceId, string attachmentName) {
            this.DeleteAttachmentAsync(connectionStr, instanceId, attachmentName, null);
        }
        
        /// <remarks/>
        public void DeleteAttachmentAsync(string connectionStr, string instanceId, string attachmentName, object userState) {
            if ((this.DeleteAttachmentOperationCompleted == null)) {
                this.DeleteAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAttachmentOperationCompleted);
            }
            this.InvokeAsync("DeleteAttachment", new object[] {
                        connectionStr,
                        instanceId,
                        attachmentName}, this.DeleteAttachmentOperationCompleted, userState);
        }
        
        private void OnDeleteAttachmentOperationCompleted(object arg) {
            if ((this.DeleteAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetClassAttachmentInfosCount", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClassAttachmentInfosCount(string connectionStr, string classId) {
            object[] results = this.Invoke("GetClassAttachmentInfosCount", new object[] {
                        connectionStr,
                        classId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClassAttachmentInfosCountAsync(string connectionStr, string classId) {
            this.GetClassAttachmentInfosCountAsync(connectionStr, classId, null);
        }
        
        /// <remarks/>
        public void GetClassAttachmentInfosCountAsync(string connectionStr, string classId, object userState) {
            if ((this.GetClassAttachmentInfosCountOperationCompleted == null)) {
                this.GetClassAttachmentInfosCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassAttachmentInfosCountOperationCompleted);
            }
            this.InvokeAsync("GetClassAttachmentInfosCount", new object[] {
                        connectionStr,
                        classId}, this.GetClassAttachmentInfosCountOperationCompleted, userState);
        }
        
        private void OnGetClassAttachmentInfosCountOperationCompleted(object arg) {
            if ((this.GetClassAttachmentInfosCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassAttachmentInfosCountCompleted(this, new GetClassAttachmentInfosCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetClassAttachmentInfos", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClassAttachmentInfos(string connectionStr, string classId, int startRow, int pageSize) {
            object[] results = this.Invoke("GetClassAttachmentInfos", new object[] {
                        connectionStr,
                        classId,
                        startRow,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClassAttachmentInfosAsync(string connectionStr, string classId, int startRow, int pageSize) {
            this.GetClassAttachmentInfosAsync(connectionStr, classId, startRow, pageSize, null);
        }
        
        /// <remarks/>
        public void GetClassAttachmentInfosAsync(string connectionStr, string classId, int startRow, int pageSize, object userState) {
            if ((this.GetClassAttachmentInfosOperationCompleted == null)) {
                this.GetClassAttachmentInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassAttachmentInfosOperationCompleted);
            }
            this.InvokeAsync("GetClassAttachmentInfos", new object[] {
                        connectionStr,
                        classId,
                        startRow,
                        pageSize}, this.GetClassAttachmentInfosOperationCompleted, userState);
        }
        
        private void OnGetClassAttachmentInfosOperationCompleted(object arg) {
            if ((this.GetClassAttachmentInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassAttachmentInfosCompleted(this, new GetClassAttachmentInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddClassAttachmentInfo", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddClassAttachmentInfo(string connectionStr, string classId, string className, string attachmentName, string type, long size, bool isPublic) {
            object[] results = this.Invoke("AddClassAttachmentInfo", new object[] {
                        connectionStr,
                        classId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddClassAttachmentInfoAsync(string connectionStr, string classId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.AddClassAttachmentInfoAsync(connectionStr, classId, className, attachmentName, type, size, isPublic, null);
        }
        
        /// <remarks/>
        public void AddClassAttachmentInfoAsync(string connectionStr, string classId, string className, string attachmentName, string type, long size, bool isPublic, object userState) {
            if ((this.AddClassAttachmentInfoOperationCompleted == null)) {
                this.AddClassAttachmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClassAttachmentInfoOperationCompleted);
            }
            this.InvokeAsync("AddClassAttachmentInfo", new object[] {
                        connectionStr,
                        classId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic}, this.AddClassAttachmentInfoOperationCompleted, userState);
        }
        
        private void OnAddClassAttachmentInfoOperationCompleted(object arg) {
            if ((this.AddClassAttachmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClassAttachmentInfoCompleted(this, new AddClassAttachmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/AddClassAttachmentInfoWithId", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddClassAttachmentInfoWithId(string connectionStr, string classId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.Invoke("AddClassAttachmentInfoWithId", new object[] {
                        connectionStr,
                        classId,
                        attachmentId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic});
        }
        
        /// <remarks/>
        public void AddClassAttachmentInfoWithIdAsync(string connectionStr, string classId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic) {
            this.AddClassAttachmentInfoWithIdAsync(connectionStr, classId, attachmentId, className, attachmentName, type, size, isPublic, null);
        }
        
        /// <remarks/>
        public void AddClassAttachmentInfoWithIdAsync(string connectionStr, string classId, string attachmentId, string className, string attachmentName, string type, long size, bool isPublic, object userState) {
            if ((this.AddClassAttachmentInfoWithIdOperationCompleted == null)) {
                this.AddClassAttachmentInfoWithIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClassAttachmentInfoWithIdOperationCompleted);
            }
            this.InvokeAsync("AddClassAttachmentInfoWithId", new object[] {
                        connectionStr,
                        classId,
                        attachmentId,
                        className,
                        attachmentName,
                        type,
                        size,
                        isPublic}, this.AddClassAttachmentInfoWithIdOperationCompleted, userState);
        }
        
        private void OnAddClassAttachmentInfoWithIdOperationCompleted(object arg) {
            if ((this.AddClassAttachmentInfoWithIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClassAttachmentInfoWithIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/SetClassAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetClassAttachment(string connectionStr, string attachmentId) {
            this.Invoke("SetClassAttachment", new object[] {
                        connectionStr,
                        attachmentId});
        }
        
        /// <remarks/>
        public void SetClassAttachmentAsync(string connectionStr, string attachmentId) {
            this.SetClassAttachmentAsync(connectionStr, attachmentId, null);
        }
        
        /// <remarks/>
        public void SetClassAttachmentAsync(string connectionStr, string attachmentId, object userState) {
            if ((this.SetClassAttachmentOperationCompleted == null)) {
                this.SetClassAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetClassAttachmentOperationCompleted);
            }
            this.InvokeAsync("SetClassAttachment", new object[] {
                        connectionStr,
                        attachmentId}, this.SetClassAttachmentOperationCompleted, userState);
        }
        
        private void OnSetClassAttachmentOperationCompleted(object arg) {
            if ((this.SetClassAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetClassAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetClassAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetClassAttachment(string connectionStr, string classId, string attachmentName) {
            this.Invoke("GetClassAttachment", new object[] {
                        connectionStr,
                        classId,
                        attachmentName});
        }
        
        /// <remarks/>
        public void GetClassAttachmentAsync(string connectionStr, string classId, string attachmentName) {
            this.GetClassAttachmentAsync(connectionStr, classId, attachmentName, null);
        }
        
        /// <remarks/>
        public void GetClassAttachmentAsync(string connectionStr, string classId, string attachmentName, object userState) {
            if ((this.GetClassAttachmentOperationCompleted == null)) {
                this.GetClassAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetClassAttachment", new object[] {
                        connectionStr,
                        classId,
                        attachmentName}, this.GetClassAttachmentOperationCompleted, userState);
        }
        
        private void OnGetClassAttachmentOperationCompleted(object arg) {
            if ((this.GetClassAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteClassAttachment", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClassAttachment(string connectionStr, string classId, string attachmentName) {
            this.Invoke("DeleteClassAttachment", new object[] {
                        connectionStr,
                        classId,
                        attachmentName});
        }
        
        /// <remarks/>
        public void DeleteClassAttachmentAsync(string connectionStr, string classId, string attachmentName) {
            this.DeleteClassAttachmentAsync(connectionStr, classId, attachmentName, null);
        }
        
        /// <remarks/>
        public void DeleteClassAttachmentAsync(string connectionStr, string classId, string attachmentName, object userState) {
            if ((this.DeleteClassAttachmentOperationCompleted == null)) {
                this.DeleteClassAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClassAttachmentOperationCompleted);
            }
            this.InvokeAsync("DeleteClassAttachment", new object[] {
                        connectionStr,
                        classId,
                        attachmentName}, this.DeleteClassAttachmentOperationCompleted, userState);
        }
        
        private void OnDeleteClassAttachmentOperationCompleted(object arg) {
            if ((this.DeleteClassAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClassAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetFileTypeInfo", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileTypeInfo() {
            object[] results = this.Invoke("GetFileTypeInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileTypeInfoAsync() {
            this.GetFileTypeInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetFileTypeInfoAsync(object userState) {
            if ((this.GetFileTypeInfoOperationCompleted == null)) {
                this.GetFileTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileTypeInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileTypeInfo", new object[0], this.GetFileTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetFileTypeInfoOperationCompleted(object arg) {
            if ((this.GetFileTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileTypeInfoCompleted(this, new GetFileTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetChartFile", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetChartFile(string connectionStr, string formatName, string chartId) {
            this.Invoke("GetChartFile", new object[] {
                        connectionStr,
                        formatName,
                        chartId});
        }
        
        /// <remarks/>
        public void GetChartFileAsync(string connectionStr, string formatName, string chartId) {
            this.GetChartFileAsync(connectionStr, formatName, chartId, null);
        }
        
        /// <remarks/>
        public void GetChartFileAsync(string connectionStr, string formatName, string chartId, object userState) {
            if ((this.GetChartFileOperationCompleted == null)) {
                this.GetChartFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartFileOperationCompleted);
            }
            this.InvokeAsync("GetChartFile", new object[] {
                        connectionStr,
                        formatName,
                        chartId}, this.GetChartFileOperationCompleted, userState);
        }
        
        private void OnGetChartFileOperationCompleted(object arg) {
            if ((this.GetChartFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UpdateImageAttributeValue", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateImageAttributeValue(string connectionStr, string instanceId, string attributeName, string className, string imageFilePath, string type) {
            object[] results = this.Invoke("UpdateImageAttributeValue", new object[] {
                        connectionStr,
                        instanceId,
                        attributeName,
                        className,
                        imageFilePath,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateImageAttributeValueAsync(string connectionStr, string instanceId, string attributeName, string className, string imageFilePath, string type) {
            this.UpdateImageAttributeValueAsync(connectionStr, instanceId, attributeName, className, imageFilePath, type, null);
        }
        
        /// <remarks/>
        public void UpdateImageAttributeValueAsync(string connectionStr, string instanceId, string attributeName, string className, string imageFilePath, string type, object userState) {
            if ((this.UpdateImageAttributeValueOperationCompleted == null)) {
                this.UpdateImageAttributeValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateImageAttributeValueOperationCompleted);
            }
            this.InvokeAsync("UpdateImageAttributeValue", new object[] {
                        connectionStr,
                        instanceId,
                        attributeName,
                        className,
                        imageFilePath,
                        type}, this.UpdateImageAttributeValueOperationCompleted, userState);
        }
        
        private void OnUpdateImageAttributeValueOperationCompleted(object arg) {
            if ((this.UpdateImageAttributeValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateImageAttributeValueCompleted(this, new UpdateImageAttributeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/UploadImage", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadImage(string connectionStr, string imageId) {
            this.Invoke("UploadImage", new object[] {
                        connectionStr,
                        imageId});
        }
        
        /// <remarks/>
        public void UploadImageAsync(string connectionStr, string imageId) {
            this.UploadImageAsync(connectionStr, imageId, null);
        }
        
        /// <remarks/>
        public void UploadImageAsync(string connectionStr, string imageId, object userState) {
            if ((this.UploadImageOperationCompleted == null)) {
                this.UploadImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageOperationCompleted);
            }
            this.InvokeAsync("UploadImage", new object[] {
                        connectionStr,
                        imageId}, this.UploadImageOperationCompleted, userState);
        }
        
        private void OnUploadImageOperationCompleted(object arg) {
            if ((this.UploadImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/GetImage", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetImage(string connectionStr, string imageId) {
            this.Invoke("GetImage", new object[] {
                        connectionStr,
                        imageId});
        }
        
        /// <remarks/>
        public void GetImageAsync(string connectionStr, string imageId) {
            this.GetImageAsync(connectionStr, imageId, null);
        }
        
        /// <remarks/>
        public void GetImageAsync(string connectionStr, string imageId, object userState) {
            if ((this.GetImageOperationCompleted == null)) {
                this.GetImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageOperationCompleted);
            }
            this.InvokeAsync("GetImage", new object[] {
                        connectionStr,
                        imageId}, this.GetImageOperationCompleted, userState);
        }
        
        private void OnGetImageOperationCompleted(object arg) {
            if ((this.GetImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.newtera.com/webservices/DeleteImage", RequestNamespace="http://www.newtera.com/webservices/", ResponseNamespace="http://www.newtera.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteImage(string connectionStr, string instanceId, string attributeName, string className, string imageId) {
            this.Invoke("DeleteImage", new object[] {
                        connectionStr,
                        instanceId,
                        attributeName,
                        className,
                        imageId});
        }
        
        /// <remarks/>
        public void DeleteImageAsync(string connectionStr, string instanceId, string attributeName, string className, string imageId) {
            this.DeleteImageAsync(connectionStr, instanceId, attributeName, className, imageId, null);
        }
        
        /// <remarks/>
        public void DeleteImageAsync(string connectionStr, string instanceId, string attributeName, string className, string imageId, object userState) {
            if ((this.DeleteImageOperationCompleted == null)) {
                this.DeleteImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteImageOperationCompleted);
            }
            this.InvokeAsync("DeleteImage", new object[] {
                        connectionStr,
                        instanceId,
                        attributeName,
                        className,
                        imageId}, this.DeleteImageOperationCompleted, userState);
        }
        
        private void OnDeleteImageOperationCompleted(object arg) {
            if ((this.DeleteImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAttachmentInfosCountCompletedEventHandler(object sender, GetAttachmentInfosCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentInfosCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentInfosCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAttachmentInfosCompletedEventHandler(object sender, GetAttachmentInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddAttachmentInfoCompletedEventHandler(object sender, AddAttachmentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachmentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddAttachmentInfoWithIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetClassAttachmentInfosCountCompletedEventHandler(object sender, GetClassAttachmentInfosCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClassAttachmentInfosCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClassAttachmentInfosCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetClassAttachmentInfosCompletedEventHandler(object sender, GetClassAttachmentInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClassAttachmentInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClassAttachmentInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddClassAttachmentInfoCompletedEventHandler(object sender, AddClassAttachmentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClassAttachmentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClassAttachmentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddClassAttachmentInfoWithIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetClassAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetClassAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteClassAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetFileTypeInfoCompletedEventHandler(object sender, GetFileTypeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetChartFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateImageAttributeValueCompletedEventHandler(object sender, UpdateImageAttributeValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateImageAttributeValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateImageAttributeValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591