using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;

using Newtera.MLActivities.Core;

namespace Newtera.MLActivities.MLConfig
{
    /// <summary>
    /// Definition for data reader
    /// </summary>
    [Serializable]
    public class MLReader : MLComponentBase
    {
        private MLExperimentManager experimentManager;

        public string DataFile { get; set; }

        public string ReaderType { get; set; }

        public DataFileUsage FileUsage { get; set; }

        public bool Randomize { get; set; }

        public string ExperimentId { get; set; }

        public MLReader(MLExperimentManager experimentManager) : base()
        {
            Name = "Reader";
            FileUsage = DataFileUsage.Train;
            this.experimentManager = experimentManager;
        }

        /// <summary>
        /// Write Machine Learning Configuration code to a writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="configType"></param>
        public override void WriteTo(System.IO.StreamWriter writer, int indentLevel, MLConfigurationType configType)
        {
            if (string.IsNullOrEmpty(this.DataFile))
            {
                // auto detect the train or Test file generated by the preprocessing
                // throw an exception if unable to find the file
                string dataDir = MLNameSpace.GetHomeDir() + @"\" + MLNameSpace.EXPERIMENT_DIR + @"\" + this.ExperimentId + @"\" + MLNameSpace.DATA_DIR;
                DetectFile(dataDir);
            }
            else
            {
                if (this.DataFile.Contains(MLNameSpace.HOME_DIR_VAR))
                {
                    this.DataFile = this.DataFile.Replace(MLNameSpace.HOME_DIR_VAR, MLNameSpace.GetHomeDir());
                }
            }

            // for display data file in the studio
            switch (this.FileUsage)
            {
                case DataFileUsage.Train:

                    this.experimentManager.TrainDataFile = this.DataFile;

                    break;

                case DataFileUsage.Test:

                    this.experimentManager.TestDataFile = this.DataFile;

                    break;

                case DataFileUsage.Output:

                    this.experimentManager.EvalDataFile = this.DataFile;

                    break;
            }

            if (configType == MLConfigurationType.CNTK)
            {
                WriteCNTKTo(writer, indentLevel);
            }
            else if (configType == MLConfigurationType.TensorFlow)
            {
                WriteTensorFlowTo(writer, indentLevel);
            }
        }

        /// <summary>
        /// Accept a visitor of IMLComponnetVisitor type to visit itself and
        /// let its children to accept the visitor next.
        /// </summary>
        /// <param name="visitor">The visitor</param>
        /// <returns>true to continue travers, false to stop</returns>
        public override bool Accept(IMLComponnetVisitor visitor)
        {
            return visitor.VisitReader(this);
        }

        /// <summary>
        /// Copy this IMLComponent object
        /// </summary>
        public override void Copy(IMLComponnet copy)
        {
            base.Copy(copy);

            ((MLReader)copy).DataFile = this.DataFile;
            ((MLReader)copy).ReaderType = this.ReaderType;
        }

        protected override void WriteCNTKTo(StreamWriter writer, int indentLevel)
        {
            writer.WriteLine(Indent(indentLevel) + "# configuration of data reading");
            writer.WriteLine(Indent(indentLevel) + "reader = {");
            writer.WriteLine(Indent(indentLevel + 1) + "readerType = \"" + this.ReaderType + "\"");
            writer.WriteLine(Indent(indentLevel + 1) + "file = \"" + this.DataFile + "\"");
            writer.WriteLine(Indent(indentLevel + 1) + "randomize = \"" + (this.Randomize? "true":"false") + "\"");
            writer.WriteLine(Indent(indentLevel + 1) + "input = [");
            writer.WriteLine(Indent(indentLevel + 2) + "features = [");
            writer.WriteLine(Indent(indentLevel + 3) + "dim = $dimension$");
            writer.WriteLine(Indent(indentLevel + 3) + "format = \"dense\"");
            writer.WriteLine(Indent(indentLevel + 2) + "]");
            if (this.FileUsage != DataFileUsage.Output)
            {
                // the output command doesn't need to read labels
                writer.WriteLine(Indent(indentLevel + 2) + "labels = [");
                writer.WriteLine(Indent(indentLevel + 3) + "dim = $labelDimension$");
                writer.WriteLine(Indent(indentLevel + 3) + "format = \"dense\"");
                writer.WriteLine(Indent(indentLevel + 2) + "]");
            }
            writer.WriteLine(Indent(indentLevel + 1) + "]");
            writer.WriteLine(Indent(indentLevel) + "}");
        }

        private void DetectFile(string dataDir)
        {
            DirectoryInfo dir = new DirectoryInfo(dataDir);
            FileInfo[] Files = dir.GetFiles("*.txt"); //Getting data files

            // check if the parent componet is for Training or Testing
            if (this.FileUsage == DataFileUsage.Train)
            {
                foreach (FileInfo file in Files)
                {
                    // assume the training data start with Train
                    if (file.Name.ToUpper().StartsWith("TRAIN"))
                    {
                        this.DataFile = dataDir + @"\" + file.Name;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(this.DataFile))
                {
                    throw new Exception("Unable to find a data file for training at directory " + dataDir);
                }
            }
            else if (this.FileUsage == DataFileUsage.Test)
            {
                foreach (FileInfo file in Files)
                {
                    // assume the test data start with Test
                    if (file.Name.ToUpper().StartsWith("TEST"))
                    {
                        this.DataFile = dataDir + @"\" + file.Name;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(this.DataFile))
                {
                    throw new Exception("Unable to find a data file for testing at directory " + dataDir);
                }
            }
            else if (this.FileUsage == DataFileUsage.Output)
            {
                foreach (FileInfo file in Files)
                {
                    // assume the test data start with Test
                    if (file.Name.ToUpper().StartsWith("EVAL"))
                    {
                        this.DataFile = dataDir + @"\" + file.Name;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(this.DataFile))
                {
                    throw new Exception("Unable to find a data file for evaluation at directory " + dataDir);
                }
            }
        }
    }

    public enum DataFileUsage
    {
        Train,
        Test,
        Output
    }
}
