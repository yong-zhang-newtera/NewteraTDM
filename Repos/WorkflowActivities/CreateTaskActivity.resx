<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomActions" xml:space="preserve">
    <value>Custom Actions</value>
  </data>
  <data name="CustomActionsDescription" xml:space="preserve">
    <value>Specify the custom actions available for the task, optional property</value>
  </data>
  <data name="DataInstanceBindingCategory" xml:space="preserve">
    <value>Data Instance Binding</value>
  </data>
  <data name="DynamicAssignmentCategory" xml:space="preserve">
    <value>Dynamic Assignment</value>
  </data>
  <data name="Instruction" xml:space="preserve">
    <value>Instruction</value>
  </data>
  <data name="InstructionDescription" xml:space="preserve">
    <value>The instruction property is used to specify the instruction of the task. This is not a required property</value>
  </data>
  <data name="NoticeCategory" xml:space="preserve">
    <value>Notice</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="RolesBindingAttribute" xml:space="preserve">
    <value>Roles Binding Attribute</value>
  </data>
  <data name="RolesBindingAttributeDescription" xml:space="preserve">
    <value>Specify an attribute whose value represents the combined roles so that only users with all specified roles are assigned to the task.</value>
  </data>
  <data name="RolesDescription" xml:space="preserve">
    <value>The roles property is used to specify roles of the users who are assigned of the task. Only those users who belong to all the specified roles will be assigned.</value>
  </data>
  <data name="SendEmail" xml:space="preserve">
    <value>Send Email</value>
  </data>
  <data name="SendEmailDescription" xml:space="preserve">
    <value>The SendEmail property is used to specify whether an email is sent to the assigned users.</value>
  </data>
  <data name="StaticAssignmentCategory" xml:space="preserve">
    <value>Static Assignment</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="SubjectDescription" xml:space="preserve">
    <value>The Subject property is used to specify the subject of the task.</value>
  </data>
  <data name="TaskCategory" xml:space="preserve">
    <value>Task</value>
  </data>
  <data name="TaskDescription" xml:space="preserve">
    <value>Task Description</value>
  </data>
  <data name="TaskDescriptionDescription" xml:space="preserve">
    <value>The description property is used to specify the description of the task. This is not a required property</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="UsersBindingAttribute" xml:space="preserve">
    <value>Users Binding Attribute</value>
  </data>
  <data name="UsersBindingAttributeDescription" xml:space="preserve">
    <value>Specify an attribute whose value represents the users who are assigned to the task.</value>
  </data>
  <data name="UsersDescription" xml:space="preserve">
    <value>The users property is used to specify users who are assigned to the task.</value>
  </data>
  <data name="FormCategory" xml:space="preserve">
    <value>Form</value>
  </data>
  <data name="FormType" xml:space="preserve">
    <value>Form Type</value>
  </data>
  <data name="FormTypeDescription" xml:space="preserve">
    <value>Specify whether the task form is auto-genrated or custom made.</value>
  </data>
  <data name="CustomFormUrl" xml:space="preserve">
    <value>Custom Form Url</value>
  </data>
  <data name="CustomFormUrlDescription" xml:space="preserve">
    <value>Specify url of a custom form when the form type is Custom</value>
  </data>
  <data name="FormProperties" xml:space="preserve">
    <value>Form Properties</value>
  </data>
  <data name="FormPropertiesDescription" xml:space="preserve">
    <value>Specify properties to be displayed in the auto-generated form. If not specified, display all properties in the form</value>
  </data>
  <data name="LogCategory" xml:space="preserve">
    <value>Log</value>
  </data>
  <data name="WriteLog" xml:space="preserve">
    <value>Write Log</value>
  </data>
  <data name="WriteLogDescription" xml:space="preserve">
    <value>The WriteLog property is used to specify whether to create a log entry when a task is created.</value>
  </data>
  <data name="BindingInstanceKey" xml:space="preserve">
    <value>Binding Instance Key</value>
  </data>
  <data name="BindingInstanceKeyDescription" xml:space="preserve">
    <value>Specify the primay key of the binding data instance to be written to the log.</value>
  </data>
  <data name="BindingInstanceDesc" xml:space="preserve">
    <value>Binding Instance Description</value>
  </data>
  <data name="BindingInstanceDescDescription" xml:space="preserve">
    <value>Specify the descriptive info of the binding data instance to be written to the log.</value>
  </data>
  <data name="ExpectedFinishTime" xml:space="preserve">
    <value>Expected Finish Time</value>
  </data>
  <data name="ExpectedFinishTimeDescription" xml:space="preserve">
    <value>Specify the expected finish time for the task, can be obtained from the binding data instance, to be written to the log.</value>
  </data>
  <data name="DisplayCategory" xml:space="preserve">
    <value>Display</value>
  </data>
	<data name="Visible" xml:space="preserve">
    <value>Visible</value>
  </data>
	<data name="VisibleDescription" xml:space="preserve">
    <value>The Visible property is used to specify whether the task will display in the default my task list</value>
  </data>
</root>