<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomActions" xml:space="preserve">
    <value>定制操作</value>
  </data>
  <data name="CustomActionsDescription" xml:space="preserve">
    <value>指定几种任务的定制操作来简化用户的操作。</value>
  </data>
  <data name="DataInstanceBindingCategory" xml:space="preserve">
    <value>数据实例绑定</value>
  </data>
  <data name="DynamicAssignmentCategory" xml:space="preserve">
    <value>动态分配任务</value>
  </data>
  <data name="Instruction" xml:space="preserve">
    <value>操作提示</value>
  </data>
  <data name="InstructionDescription" xml:space="preserve">
    <value>任务的具体操作提示，　将显示在WEB界面上.</value>
  </data>
  <data name="NoticeCategory" xml:space="preserve">
    <value>通知</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>角色</value>
  </data>
  <data name="RolesBindingAttribute" xml:space="preserve">
    <value>角色属性名</value>
  </data>
  <data name="RolesBindingAttributeDescription" xml:space="preserve">
    <value>指定数据绑定的属性，　该属性的值作为动态分配的角色名。如果该属性值包含多个用分号隔开的角色名，则表示赋予任务的用户必须同时具有指定的角色。</value>
  </data>
  <data name="RolesDescription" xml:space="preserve">
    <value>被分配任务的角色列表</value>
  </data>
  <data name="SendEmail" xml:space="preserve">
    <value>邮件通知</value>
  </data>
  <data name="SendEmailDescription" xml:space="preserve">
    <value>是否用电子邮件通知用户?</value>
  </data>
  <data name="StaticAssignmentCategory" xml:space="preserve">
    <value>静态分配任务</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>任务摘要</value>
  </data>
  <data name="SubjectDescription" xml:space="preserve">
    <value>任务的简要说明</value>
  </data>
  <data name="TaskCategory" xml:space="preserve">
    <value>任务</value>
  </data>
  <data name="TaskDescription" xml:space="preserve">
    <value>任务描述</value>
  </data>
  <data name="TaskDescriptionDescription" xml:space="preserve">
    <value>任务的详细描述</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>用户</value>
  </data>
  <data name="UsersBindingAttribute" xml:space="preserve">
    <value>用户属性名</value>
  </data>
  <data name="UsersBindingAttributeDescription" xml:space="preserve">
    <value>指定数据绑定的属性，　该属性的值作为动态分配的用户名</value>
  </data>
  <data name="UsersDescription" xml:space="preserve">
    <value>被分配任务的用户列表</value>
  </data>
  <data name="FormCategory" xml:space="preserve">
    <value>表单</value>
  </data>
  <data name="FormType" xml:space="preserve">
    <value>表单类型</value>
  </data>
  <data name="FormTypeDescription" xml:space="preserve">
    <value>Auto表示由系统自动生成表单;Custom表示使用定制的表单.</value>
  </data>
  <data name="CustomFormUrl" xml:space="preserve">
    <value>定制表单Url</value>
  </data>
  <data name="CustomFormUrlDescription" xml:space="preserve">
    <value>当表单类型为Custom时,指定定制表单的Url</value>
  </data>
  <data name="FormProperties" xml:space="preserve">
    <value>表单属性</value>
  </data>
  <data name="FormPropertiesDescription" xml:space="preserve">
    <value>指定出现在自动生成表单中的属性。如果不指定，则显示绑定数据类所有的属性</value>
  </data>
  <data name="LogCategory" xml:space="preserve">
    <value>日志</value>
  </data>
  <data name="WriteLog" xml:space="preserve">
    <value>生成日志</value>
  </data>
  <data name="WriteLogDescription" xml:space="preserve">
    <value>是否生成任务日志?</value>
  </data>
  <data name="BindingInstanceKey" xml:space="preserve">
    <value>绑定数据主键</value>
  </data>
  <data name="BindingInstanceKeyDescription" xml:space="preserve">
    <value>指定绑定数据实例的主键值，该主键值会被写入日志。</value>
  </data>
  <data name="BindingInstanceDesc" xml:space="preserve">
    <value>绑定数据描述</value>
  </data>
  <data name="BindingInstanceDescDescription" xml:space="preserve">
    <value>指定对绑定数据实例的描述，该描述会被写入日志。通常为绑定数据实例的某个属性值。</value>
  </data>
  <data name="ExpectedFinishTime" xml:space="preserve">
    <value>期待完成时间</value>
  </data>
  <data name="ExpectedFinishTimeDescription" xml:space="preserve">
    <value>指定任务的期待完成时间，该时间会被写入日志。通常为绑定数据实例的某个属性值。</value>
  </data>\
	<data name="DisplayCategory" xml:space="preserve">
    <value>界面</value>
  </data>
	<data name="Visible" xml:space="preserve">
    <value>是否显示</value>
  </data>
	<data name="VisibleDescription" xml:space="preserve">
    <value>指定该任务是否显示在用户的我的任务列表中</value>
  </data>
</root>