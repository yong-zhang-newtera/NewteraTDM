<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClassTreeTitle" xml:space="preserve">
    <value>Browse By Product Category</value>
  </data>
  <data name="PropertyEditor.IsRequired" xml:space="preserve">
    <value>A value is required</value>
  </data>
  <data name="PropertyEditor.IsUnique" xml:space="preserve">
    <value>This value has been existed, please enter an unique value.</value>
  </data>
  <data name="PropertyEditor.OutOfRange" xml:space="preserve">
    <value>This value is out of specified range</value>
  </data>
  <data name="PropertyEditor.WrongPattern" xml:space="preserve">
    <value>The value format is incorrect</value>
  </data>
  <data name="PropertyEditor.InvalidCast" xml:space="preserve">
    <value>Incorrect value type. The value should be </value>
  </data>
  <data name="PropertyEditor.MaxLength" xml:space="preserve">
    <value>The value length is too long. The maximum length is </value>
  </data>
  <data name="PropertyEditor.NullArrayValue" xml:space="preserve">
    <value>Null value is not allowed</value>
  </data>
  <data name="PropertyEditor.AddRowText" xml:space="preserve">
    <value>Add A New Row</value>
  </data>
  <data name="PropertyEditor.Single" xml:space="preserve">
    <value>Float type.</value>
  </data>
  <data name="PropertyEditor.Double" xml:space="preserve">
    <value>Double type.</value>
  </data>
  <data name="PropertyEditor.Int32" xml:space="preserve">
    <value>Integer type.</value>
  </data>
  <data name="PropertyEditor.DateTime" xml:space="preserve">
    <value>DateTime type, such as 2001-05-25 T13:30:20.</value>
  </data>
  <data name="PropertyEditor.Date" xml:space="preserve">
    <value>Date type, such as 2001-05-25</value>
  </data>
  <data name="PropertyEditor.Int64" xml:space="preserve">
    <value>BigInterger type.</value>
  </data>
  <data name="PropertyEditor.InvalidUniqueKeys" xml:space="preserve">
    <value>Values of attributes '{0}' are not unique among instances in the class</value>
  </data>
  <data name="PropertyEditor.UniqueKeyValueRequired" xml:space="preserve">
    <value>The attribute is part of an unique constraint, therefore, its value cannot be empty.</value>
  </data>
  <data name="PropertyEditor.NotUniqueReference" xml:space="preserve">
    <value>This instance has been referenced by another instance</value>
  </data>
  <data name="PropertyEditor.Content" xml:space="preserve">
    <value>输入的值必须是</value>
  </data>
  <data name="DataViewHelp.AddInstance" xml:space="preserve">
    <value>Add {0} instance</value>
  </data>
  <data name="DataViewHelp.DisplayValue" xml:space="preserve">
    <value>没有定义可用于显示的字段</value>
  </data>
  <data name="DataViewHelp.FindResult" xml:space="preserve">
    <value>没找到匹配的结果！</value>
  </data>
  <data name="DataViewHelp.Msg1Resources1" xml:space="preserve">
    <value>该节点可能没有指定关联的数据类。</value>
  </data>
  <data name="DataViewHelp.Msg2Resources1" xml:space="preserve">
    <value>该数据类没有指定作为结果的属性。</value>
  </data>
  <data name="DataViewHelp.Msg3Resources1" xml:space="preserve">
    <value>数据类的主键由多个属性组成.目前暂不支持组合主键。</value>
  </data>
  <data name="DataViewHelp.Msg4Resources1" xml:space="preserve">
    <value>数据类中没有定义或继承任何主键。</value>
  </data>
  <data name="UserLanguages" xml:space="preserve">
    <value>en</value>
  </data>
  <data name="PropertyEditor.Integer" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="PropertyEditor.MinLength" xml:space="preserve">
    <value>The value length is too short. The minimum length is </value>
  </data>
  <data name="InvalidSearchValue" xml:space="preserve">
    <value>The search value '{0}' is not type of {1}</value>
  </data>
  <data name="PropertyEditor.ClearImageText" xml:space="preserve">
    <value>Clear Image</value>
  </data>
  <data name="PropertyEditor.UploadImageText" xml:space="preserve">
    <value>Upload Image...</value>
  </data>
  <data name="PropertyEditor.RemoveRowText" xml:space="preserve">
    <value>Delete a row</value>
  </data>
  <data name="PropertyEditor.NotValidValue" xml:space="preserve">
    <value>The entered text is not a valid value.</value>
  </data>
  <data name="PropertyEditor.RemoveRowMessage" xml:space="preserve">
    <value>Are you sure to delete the row?</value>
  </data>
   <data name="PropertyEditor.InputComment" xml:space="preserve">
    <value>Input your comment here</value>
  </data>
   <data name="PropertyEditor.Command" xml:space="preserve">
    <value>Cmd</value>
  </data>
  <data name="DefinitionRelationData.Msg1Resources1" xml:space="preserve">
    <value>Related Properties</value>
  </data>
  <data name="DataViewHelp.ImportInstances" xml:space="preserve">
    <value>Import {0} data instances</value>
  </data>
</root>